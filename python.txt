<file_map>
/Users/mck/WebstormProjects/prototype-tokens-interpreter-py
├── contrib
│   └── permutation.py
├── docs
│   ├── data_types.md
│   └── validation_steps.md
├── migrations
│   └── base_detector.py
├── specifications
│   ├── colors
│   │   └── rgb.json
│   └── grammar
├── tests
│   ├── fixtures
│   │   ├── big_set.zip
│   │   ├── currently_broken.zip
│   │   ├── load_test.zip
│   │   └── tokens_zengarden.zip
│   ├── __init__.py
│   ├── test_color_converter.py
│   ├── test_color_objects.py
│   ├── test_control_structures.py
│   ├── test_interpreter.py
│   ├── test_lexer.py
│   ├── test_lists.py
│   ├── test_parser.py
│   └── test_variables.py
├── token_interpreter
│   ├── __init__.py
│   ├── ast.py
│   ├── colors.py
│   ├── errors.py
│   ├── interpreter.py
│   ├── lexer.py
│   ├── operations.py
│   ├── parser.py
│   ├── symbol_table.py
│   └── symbols.py
├── __init__.py
├── .gitignore
├── .python-version
├── config.py
├── main.py
├── ouptut.json
├── poetry.lock
├── pyproject.toml
├── README.md
└── token_set_interpreter.py

</file_map>

<file_contents>
File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/contrib/permutation.py
```py
import copy
from typing import List

from token_set_interpreter import flatten_tokenset, TokenSetResolver


def build_theme_tree(tokensets):
    themes_data = tokensets["$themes"]
    theme_tree = {}
    for theme in themes_data:
        theme_group = theme["group"]
        if theme["group"] not in theme_tree:
            theme_tree[theme["group"]] = {}

        #theme_tree[theme["group"]].append(theme)
        theme_name = theme["name"]
        tokens = {}
        for set_name, status in theme["selectedTokenSets"].items():
            if status == "enabled" or status == "source":
                # add all tokensets to one dictionary
                if set_name not in tokensets:
                    raise ValueError(
                        f"Token set '{set_name}' referenced in '{theme_name}' not found."
                    )
                tokens.update(flatten_tokenset(tokensets[set_name]))

        theme_tree[theme_group][theme_name] = tokens

    return theme_tree


def permutate_tokensets(theme_tree, permutate_on: List[str], tokens=None):
    """
    Permutate the tokensets based on the specified permutation.
    :param theme_tree: The theme tree to permutate.
    :param permutate_on: The tokensets to permutate on.
    :param permutate_to: The name of the tokenset to permutate to.
    :return: The permutated theme tree.
    """
    if len(permutate_on) == 0:
        return tokens

    if tokens is None:
        tokens = {}

    output = {}

    current_permutation = permutate_on.pop(0)
    print(current_permutation)
    for theme in theme_tree[current_permutation]:
        if theme_tree[current_permutation][theme] is None:
            continue
        theme_l = copy.deepcopy(theme_tree[current_permutation][theme])
        theme_l.update(tokens)
        output[theme] = permutate_tokensets(theme_tree, copy.deepcopy(permutate_on), theme_l)

    return output


def interpret_tokensets(permutation_tree, permutation_dimensions, tokens):
    """
    Interpret the tokensets based on the specified permutation.
    :param permutation_tree: The theme tree to permutate.
    :param permutation_dimensions: The dimensions of the permutation.
    :param tokens: The tokens to permutate on.
    :return: The interpreted tokensets.
    """
    if len(permutation_dimensions) == 0:
        relevant_tokens = tokens.keys()
        token_set = TokenSetResolver(permutation_tree, {})
        token_set.resolve()
        all_tokens = token_set.resolved_tokens
        relevant_tokens_extracted = {}
        for token in relevant_tokens:
            relevant_tokens_extracted[token] = all_tokens.get(token)
        return relevant_tokens_extracted

    # Use indexing instead of pop to avoid modifying the list
    current_permutation = permutation_dimensions[0]
    remaining_dimensions = permutation_dimensions[1:]

    output = {}
    for theme in current_permutation["options"]:
        output[theme] = interpret_tokensets(
            permutation_tree[theme],
            remaining_dimensions,  # Pass remaining dimensions without modifying original
            tokens
        )

    return output

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/docs/data_types.md
```md
# Data Types
The type system inside tokens script might look dynamically typed to the consumer when used in inline code. But it is actually strongly typed.

When used in script mode type definitions are mandatory. 

While the types of Variables are defined always explicitly, the types of References are either inferred from the Spec they adhere to or the context via the type of the Variable they are assigned to.

## String and ExplicitString
If you write a statement in tokens script in the inline mode it will be interpreted by default as a `String`. Except for if it can be identified as a `Number`/`Boolean`/`Color`.

So in inline mode `hello world` will be interpreted as a `String`.

You can alternatively mark a `String` as an `ExplicitString` by using single or double quotes.

Strings and ExplicitStrings are handled exactly the same in the interpreter.
```
variable a_string: String = hello world;
variable another_string: String = 'hello world';
if(string a_string == another_string) [
    return true;
]

return false;

```

### String Methods

| Method | Description | Arguments | Return Type   |
|--------|-------------|-----------|---------------|
| upper | Converts string to uppercase | none | `String`        |
| lower | Converts string to lowercase | none | `String`        |
| length | Returns the length of the string | none | `Number`      |
| concat | Concatenates strings | other (String) | `String`      |
| split | Splits string into parts | delimiter (String, optional) | `List<String>` |



## Number and NumberWithUnit

Numbers are handled as `Number` in the interpreter. You can also use `NumberWithUnit` to store a number with a unit.

In inline mode a number becomes a `NumberWithUnit` if it is followed by a unit. `30px` is a `NumberWithUnit` while `30` is a `Number`.


```
variable a_number: Number = 30;
variable a_number_with_unit: NumberWithUnit = 30px;
variable another_number_with_unit: NumberWithUnit = 30rem;

if(a_number == a_number_with_unit) [ // this will be false
    return true; 
]

a_number_with_unit = a_number_with_unit + another_number_with_unit; // this will fail as currently different units cant be used in mathematical operations
```

### Number Methods

| Method | Description | Arguments | Return Type |
|--------|-------------|-----------|-------------|
| to_string | Converts number to string | none | String |

### NumberWithUnit Methods
| Method    | Description | Arguments | Return Type |
|-----------|-------------|-----------|-------------|
| to_string | Converts number with unit to string | none | String |
| to_number | Converts number with unit to number | none | Number |

## Boolean
A `Boolean` is a type that can only be `true` or `false`. It is used for conditional statements and logical operations.

```
variable a_boolean: Boolean = true;
variable another_boolean: Boolean = false;

if(a_boolean == true) [
    return true;
]
```

## List
A `List` is a collection of items. It can contain any type of item, including other lists. Lists are zero-indexed.

**Target Syntax**
```
variable a_list: List<Number> = [1, 2, 3, 4, 5];
variable another_list: List<Number> = [6, 7, 8, 9, 10];
variable a_list_of_lists: List<List<Number>> = [[1, 2], [3, 4], [5, 6]];
```

**Current syntax**
```
variable a_list: List = [1, 2, 3, 4, 5];
```

### List Methods

| Method | Description | Arguments | Return Type |
|--------|-------------|-----------|-------------|
| append | Adds an item to the end of list | item (ChildSelfType) | List |
| extend | Adds all items from another list | items (List) | List |
| insert | Inserts item at given index | index (Number), item (ChildSelfType) | List |
| delete | Removes item at given index | index (Number) | None |
| length | Returns list length | none | Number |
| index | Returns index of given item | item (ChildSelfType) | Number |
| get | Returns item at given index | index (Number) | ChildSelfType |
| update | Updates item at given index | index (Number), item (ChildSelfType) | List |


## Color
A `Color` is a type that represents a color. It can be defined in different formats, such as hex, rgb, or hsl.

By default the color Object only supports HEX colors. All other formats are supported by dynamic language extensions.

```
variable a_color: Color = #ff0000;
variable another_color: Color = #00ff00;
```

Color conversions are done by registering the color types with conversion methods on the `Color` object. The color object then finds the best available conversion chain in the conversion tree.

When registering a color object the conversion chain is automatically created. The conversion chain is a tree structure that allows for easy conversion between different color formats. When a conversion is marked as lossless it will be used as the preferred conversion method.

```
{
    "$type": "https://schemas.tokens.studio/tokens/foundations/types/color.json",
    "$id": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json",
    "name": "rgb",
    "description": "RGB color",
        "oneOf": [
        {
            "type": "object",
          	"required": ["r", "g", "b"],
          	"additionalProperties": false,
            "properties": {            
                    "r": {
                        "$id": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#r",
                        "type": "number",
                        "description": "Red value",
                        "minimum": 0,
                        "maximum": 255
                    },
                    "g": {
                        "$id": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#g",
                        "type": "number",
                        "description": "Green value",
                        "minimum": 0,
                        "maximum": 255
                    },
                    "b": {
                        "$id": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#b",
                        "type": "number",
                        "description": "Blue value",
                        "minimum": 0,
                        "maximum": 255
                    }
              }
        }, 
        {
            "type": "string",
            "pattern": "^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$",
            "description": "RGB color in string format"
        }
      ],
    
    "required": ["r", "g", "b"],
    "additionalProperties": false,
    "x-initializers" : [
        {
            "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-initializer.json",
            "name": "default",
            "description": "Creates a RGB color from r, g, b values",
            "properties": {
                "r": {
                    "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#r"
                },
                "g": {
                    "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#g"
                },
                "b": {
                    "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#b"
                }
            },
            "required": ["r", "g", "b"],
            "additionalProperties": false,
            "x-script": {
                "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
                "script": "variable output: Color.RGB = Color.RGB({r}, {g}, {b}); return output;"
            }     
        }
    ],
    "x-conversions": [
        {
            "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-conversion.json",
            "from": "https://schemas.tokens.studio/tokens/foundations/types/hex.json",
            "description": "Converts HEX to RGB",
            "lossless": true,
            "x-script": {
                "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
                "script": " variable color_parts: List = {input}.split('#');
                            variable color: List = color_parts.get(1).split();
                            variable length: Number = color.length();
                            variable rgb: List = 0, 0, 0;
                            if(length == 3) [
                                rgb.update(0, parse_int(color.get(0).concat(color.get(0)), 16));
                                rgb.update(1, parse_int(color.get(1).concat(color.get(1)), 16));
                                rgb.update(2, parse_int(color.get(2).concat(color.get(2)), 16));
                            ] else [
                                rgb.update(0, parse_int(color.get(0).concat(color.get(1)), 16));
                                rgb.update(1, parse_int(color.get(2).concat(color.get(3)), 16));
                                rgb.update(2, parse_int(color.get(4).concat(color.get(5)), 16));
                            ];
                        
                            return rgb(r.get(0), r.get(1), r.get(2));"
            }
        }
    ],
    "x-stringify": {
        "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
        "script": "return 'rgb('.concat({value}.r.to_string()).concat(', ').concat({value}.g.to_string()).concat(', ').concat({value}.b.to_string()).concat(')')"
    }
}
```

To use a conversion you can append a .to.<new_color_format>() method to the color object. This will automatically use the conversion chain to convert the color to the new format.

So running in inline mode a `#fff.to.rgb().r` will return the red value of the r value of the rgb color object.

There must be also a stringify method defined for the color object. The output of the stringify method must be parsable by one of the initializers of the color object.

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/docs/validation_steps.md
```md
# Validation

- Is the JSON semantically correct? -> out
- Which kind of tokens are used? DTCG? custom? ???
  - Decide on a token standard to continue parsing?
    - DTCG detector
      - Rule based code
    - Legacy format 2
    - Legacy format 3
    - "We detected old values with unit"
        - "Do you want to convert them to the new format?"
        - "We detected a legacy named token, do you wanna transform it?"
        - "I wanna stay in the old format"
          - Old font token
          - expression style format
    - 
  - Recover option: Let the user define the standard.

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/migrations/base_detector.py
```py
from abc import ABC


class Detector(ABC):

    name = "Base Detector"

    description = """
        In DTCG Workshop from April 17. 2025 there was the decision to change the structure of the color token.
        The new structure is as follows:
         {
            "$type": "color",
            "$value": {
              "colorSpace": "srgb",
              "components": [1, 0, 1],
              "alpha": 1,
              "hex": "#ff00ff"
            }
         }
         
    """

    def validate(self, token):
        """
        Validate the token against the schema.
        """
        # Implement validation logic here
        pass


class DTCGColorDetector(ABC):
    name = "Base Detector"

    description = """
        In DTCG Workshop from April 17. 2025 there was the decision to change the structure of the color token.
        The new structure is as follows:
         {
            "$type": "color",
            "$value": {
              "colorSpace": "srgb",
              "components": [1, 0, 1],
              "alpha": 1,
              "hex": "#ff00ff"
            }
         }
    """

    schema = {
        "type": "object",
        "properties": {
            "$type": {
                "type": "string",
                "enum": ["color"],
            },
            "$value": {
                "type": "object",
                "properties": {
                    "colorSpace": {
                        "type": "string",
                        "enum": ["srgb"],
                    },
                    "components": {
                        "type": "array",
                        "items": {"type": "number"},
                    },
                    "alpha": {"type": ["number", "null"]},
                    "hex": {"type": ["string", "null"]},
                },
                "required": ["colorSpace", "components", "alpha", "hex"],
            },
        },
        "required": ["$type", "$value"],
    }


class DTCGColorStandardV20250414():
    detector = DTCGColorDetector


class DTCGStandard20250414():
    required_validators = [DTCGColorStandardV20250414, ]


SupportedMigrations = [ColorMigrationYaddaYadday]


class ColorMigrationYaddaYadday:
    source = DTCGStandard20250414
    target = DTCGStandard20250524



# N Tokens
 - color token - Welcher neuste standard matched?

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/specifications/colors/rgb.json
```json
{
    "$type": "https://schemas.tokens.studio/tokens/foundations/types/color.json",
    "$id": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json",
    "name": "RGB",
    "description": "RGB color",
    "schema": {
        "type": "object",
        "properties": {
            "r": {
                "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#r",
                "type": "number"
            },
            "g": {
                "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#g",
                "type": "number"
            },
            "b": {
                "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#b",
                "type": "number"
            }
        },
        "required": ["r", "g", "b"],
        "additionalProperties": false
    },
    "initializers" : [
        {
            "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-initializer-object.json",
            "title": "default",
            "keyword": "rgb",
            "description": "Creates a RGB color from r, g, b values",
            "schema": {
                "type": "object",
                "properties": {
                    "r": {
                        "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#r",
                        "type": "number"
                    },
                    "g": {
                        "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#g",
                        "type": "number"
                    },
                    "b": {
                        "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#b",
                        "type": "number"
                    }
                },
                "required": ["r", "g", "b"],
                "additionalProperties": false
            }
        },
        {
            "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-initializer-function.json",
            "title": "function",
            "keyword": "rgb",
            "description": "Creates a RGB color from string",
            "schema":{
                "type": "string",
                "pattern": "^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$"
            },
            "script": {
                "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
                "script": "variable color_parts: List = {input}; \n variable output: Color.RGB;\n output.r = color_parts.get(0);\n output.g = color_parts.get(1);\n output.b = color_parts.get(2);\n return output;"
            }
        }
    ],
    "conversions": [
        {
            "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-conversion.json",
            "source": "https://schemas.tokens.studio/tokens/foundations/types/hex.json",
            "target": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json",
            "description": "Converts HEX to RGB",
            "lossless": true,
            "script": {
                "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
                "script": " variable color_parts: List = {input}.split('#'); \n variable color: List = color_parts.get(1).split(); \n variable length: Number = color.length(); \n variable rgb: List = 0, 0, 0; \n if(length == 3) [ \n rgb.update(0, parse_int(color.get(0).concat(color.get(0)), 16)); \n rgb.update(1, parse_int(color.get(1).concat(color.get(1)), 16)); \n rgb.update(2, parse_int(color.get(2).concat(color.get(2)), 16)); \n ] else [ \n rgb.update(0, parse_int(color.get(0).concat(color.get(1)), 16)); \n rgb.update(1, parse_int(color.get(2).concat(color.get(3)), 16)); \n rgb.update(2, parse_int(color.get(4).concat(color.get(5)), 16)); \n ]; \n \n variable output: Color.RGB; \n output.r = rgb.get(0); \n output.g = rgb.get(1); \n output.b = rgb.get(2); \n \n return output; \n"
            }
        },
        {
            "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-conversion.json",
            "source": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json",
            "target": "https://schemas.tokens.studio/tokens/foundations/types/hex.json",
            "description": "Converts RGB to HEX",
            "lossless": true,
            "script": {
                "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
                "script": "return '#'.concat({value}.r.to_string(16)).concat({value}.g.to_string(16)).concat({value}.b.to_string(16));"
            }
        }
    ],
    "stringify": {
        "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
        "script": "return 'rgb('.concat({value}.r.to_string()).concat(', ').concat({value}.g.to_string()).concat(', ').concat({value}.b.to_string()).concat(')')"
    }
}

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/specifications/grammar
```
ExpressionLanguage {
  Program = ListOf<Statement, terminator> terminator?  -- program
          | InlineExpr                                -- inline

  InlineExpr = ListExpr

  Statement = SimpleStatement terminator  -- simple
            | BlockStatement             -- block

  SimpleStatement = VarDecl
                 | AttributeAssign
                 | ListExpr
                 | ReturnStmt

  BlockStatement = WhileStmt
                | IfStmt

  VarDecl = "variable" ident ":" TypeDecl ("=" ListExpr)?

  TypeDecl = ident ("." ident)*

  AttributeAssign = ident ("." ident)* "=" ListExpr

  ReturnStmt = "return" Expr

  WhileStmt = "while" "(" Expr ")" Block

  IfStmt = "if" "(" Expr ")" Block ("else" Block)?

  Block = "[" Statement* "]"

  ListExpr = NonemptyListOf<ImplicitList, ",">

  ImplicitList = Expr+

  Expr = LogicTerm (("&&" | "||") LogicTerm)*

  LogicTerm = Comparison (("+" | "-") Comparison)*

  Comparison = Term (("==" | "!=" | ">" | "<" | ">=" | "<=") Term)*

  Term = Power (("*" | "/") Power)*

  Power = Factor ("^" Factor)*

  Factor = UnaryOp
        | NumberLit
        | ParenExpr
        | Reference
        | Identifier
        | StringLit
        | HexColor
        | Boolean

  UnaryOp = ("+" | "-" | "!") Factor

  NumberLit = number Format?

  ParenExpr = "(" Expr ")" Format?

  Reference = "{" ident "}" ("." (ident | Function))*

  Identifier = ident ("(" Args ")")? ("." (ident | Function))*

  StringLit = string ("." (ident | Function))*

  HexColor = "#" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit

  Boolean = "true" | "false"

  Function = ident "(" Args ")"

  Args = ListOf<ImplicitList, ",">

  Format = "%" | "deg" | "rad"

  ident = letter (alnum | "_" | "-")*
  number = digit+ ("." digit+)?
  string = "\"" (~"\"" any)* "\""
        | "'" (~"'" any)* "'"

  terminator = ";" | "\n" | "\r\n"

  // Lexical rules
  comment = "//" (~"\n" any)* "\n"
  space += comment
}

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/fixtures/big_set.zip
```zip
[Binary file]
```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/fixtures/currently_broken.zip
```zip
[Binary file]
```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/fixtures/load_test.zip
```zip
[Binary file]
```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/fixtures/tokens_zengarden.zip
```zip
[Binary file]
```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/__init__.py
```py

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_color_converter.py
```py
from token_interpreter import Lexer, Parser, Interpreter
from token_interpreter.symbols import Number, List


def test_convert_hex_color_to_rgb():
    text = """
    variable color_parts: List = {COLOR}.split("#");
    variable color: List = color_parts.get(1).split();
    variable length: Number = color.length();
    variable rgb: List = 0, 0, 0;
    if(length == 3) [
        rgb.update(0, parse_int(color.get(0).concat(color.get(0)), 16));
        rgb.update(1, parse_int(color.get(1).concat(color.get(1)), 16));
        rgb.update(2, parse_int(color.get(2).concat(color.get(2)), 16));
    ] else [
        rgb.update(0, parse_int(color.get(0).concat(color.get(1)), 16));
        rgb.update(1, parse_int(color.get(2).concat(color.get(3)), 16));
        rgb.update(2, parse_int(color.get(4).concat(color.get(5)), 16));
    ];

    return rgb;
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"COLOR": "#FF5733"})
    interpreter.interpret()
    rgb = interpreter._variables.symbols["rgb"]
    assert str(rgb) == "255, 87, 51", f"Expected 255, 87, 51, but got {rgb}"

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"COLOR": "#FF5"})
    interpreter.interpret()
    rgb = interpreter._variables.symbols["rgb"]
    assert str(rgb) == "255, 255, 85", f"Expected 255, 87, 51, but got {rgb}"


def test_convert_rgb_to_linear_rgb():
    text = """
    variable rgb: List = {rgb};
    variable rgb_linear: List = 0, 0, 0;
    variable gamma: Number = 2.4;

    // Convert RGB to linear RGB
    variable r: Number = rgb.get(0) / 255;
    variable g: Number = rgb.get(1) / 255;
    variable b: Number = rgb.get(2) / 255;

    // Process red channel
    if(r <= 0.03928) [
        rgb_linear.update(0, r / 12.92);
    ] else [
        rgb_linear.update(0, pow((r + 0.055) / 1.055, gamma));
    ];

    // Process green channel
    if(g <= 0.03928) [
        rgb_linear.update(1, g / 12.92);
    ] else [
        rgb_linear.update(1, pow((g + 0.055) / 1.055, gamma));
    ];

    // Process blue channel
    if(b <= 0.03928) [
        rgb_linear.update(2, b / 12.92);
    ] else [
        rgb_linear.update(2, pow((b + 0.055) / 1.055, gamma));
    ];

    return rgb_linear;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(
        parser, {"rgb": List([Number(255), Number(0), Number(0)])}
    )
    interpreter.interpret()
    linear_rgb = interpreter._variables.symbols["rgb_linear"]
    assert str(linear_rgb) == "1.0, 0, 0", f"Expected 1, 0, 0, but got {linear_rgb}"


```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_color_objects.py
```py
import json

from token_interpreter import Interpreter, Parser, Lexer
from token_interpreter.colors import ColorManager
from token_interpreter.symbols import List, Number


def test_color_type_setup():
    """
    Test the initialization of color types.
    """
    # Define a sample color format specification
    with open("specifications/colors/rgb.json") as f:
        rgb_spec = json.load(f)
    cm = ColorManager()
    # Initialize the color format
    cm.setup_color_format(rgb_spec)

    assert "rgb" in cm.functions


def test_color_type_initialization():
    """
    Test the initialization of color types.
    """
    # Define a sample color format specification
    with open("specifications/colors/rgb.json") as f:
        rgb_spec = json.load(f)
    cm = ColorManager()
    # Initialize the color format
    cm.setup_color_format(rgb_spec)

    color = cm.init_color_format("rgb", List([Number(255), Number(0), Number(0)]))
    print(color)
    assert color.type._type_name == "rgb"

def test_color_type_usage():
    """
    Test the usage of color types.
    """
    # Define a sample color format specification
    with open("specifications/colors/rgb.json") as f:
        rgb_spec = json.load(f)
    cm = ColorManager()
    # Initialize the color format
    cm.setup_color_format(rgb_spec)
    code = """
    variable color: Color.RGB = rgb(255, 0, 0);
    return color;
    """

    lexer = Lexer(code)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {}, color_manager=cm)
    result = interpreter.interpret()
    assert result.type._type_name == "rgb"



```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_control_structures.py
```py
import pytest

from token_interpreter import Lexer, Parser, Interpreter
from token_interpreter.interpreter import InterpreterError


def test_while_loop():
    text = """
    variable i: Number = 0;
    while(i < 5) [
        i = i + 1;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["i"]
    assert result.value == 5, f"Expected 5, but got {result.value}"


def test_nested_while():
    text = """
    variable i: NumberWithUnit = 0px;
    variable j: Number = 0;
    while(i < 3) [
        j = 0;
        while(j < 2) [
            j = j + 1;
        ];
        i = i + 1;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    i = interpreter._variables.symbols["i"]
    j = interpreter._variables.symbols["j"]
    assert str(i) == "3px", f"Expected i=3, but got {i.value}"
    assert j.value == 2, f"Expected j=2, but got {j.value}"


def test_while_multi_statement():
    text = """
    variable i: NumberWithUnit = 0px;
    variable j: Number = 0;
    variable b: Boolean = True;
    while(i < 3 && b) [
        j = 0;
        while(j < 2) [
            j = j + 1;
        ];
        i = i + 1;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    i = interpreter._variables.symbols["i"]
    j = interpreter._variables.symbols["j"]
    assert str(i) == "3px", f"Expected i=3, but got {i.value}"
    assert j.value == 2, f"Expected j=2, but got {j.value}"


def test_while_multi_infinite():
    text = """
    variable j: Number = 0;
    while(true) [
        j = j + 1;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError):
        interpreter.interpret()


def test_if_basic():
    text = """
    variable x: Number = 0;
    if(true) [
        x = 5;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert result.value == 5, f"Expected 5, but got {result.value}"


def test_if_condition_false():
    text = """
    variable x: Number = 0;
    if(false) [
        x = 5;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert result.value == 0, f"Expected 0, but got {result.value}"


def test_while_no_bolean():
    text = """
    variable i: Number = 0;
    while(5) [
        i = i + 1;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as e:
        interpreter.interpret()

    assert "While condition must be a boolean" in str(e.value) , str(e.value)


def test_if_complex_condition():
    text = """
    variable x: Number = 0;
    variable y: Number = 5;
    if(x < y && true) [
        x = 10;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert result.value == 10, f"Expected 10, but got {result.value}"


def test_if_non_boolean_condition():
    text = """
    variable x: Number = 0;
    if(5) [
        x = 10;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError):
        interpreter.interpret()


def test_if_else():
    text = """
    variable x: Number = 0;
    if(false) [
        x = 5;
    ] else [
        x = 10;
    ];
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert result.value == 10, f"Expected 10, but got {result.value}"

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_interpreter.py
```py
import pytest

from token_interpreter.lexer import Lexer
from token_interpreter.parser import Parser, ParserError
from token_interpreter.interpreter import Interpreter, InterpreterError
from token_interpreter.symbols import List, Number


def test_interpreter_with_simple_expression():
    text = "1 + {hello} + {world}"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 1, "world": 2})
    result = interpreter.interpret()
    assert str(result) == "4", f"Expected 4, but got '{result}'"


def test_interpreter_with_expression_with_parentheses():
    text = "(1 + {hello}) * 2"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 3})
    result = interpreter.interpret()
    assert str(result) == "8", f"Expected 8, but got '{result}'"


def test_interpreter_with_expression_with_nested_parentheses():
    text = "((1 + {hello}) * 2) / 2"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 3})
    result = interpreter.interpret()
    assert str(result) == "4", f"Expected 4, but got '{result}'"


def test_interpreter_with_expression_with_variables():
    text = "{hello} + {world}"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 1, "world": 2})
    result = interpreter.interpret()
    assert str(result) == "3", f"Expected 3, but got {result}"


def test_interpreter_with_expression_with_operations():
    text = "{hello} + {world} - 2 * 8 / -4"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 1, "world": 2})
    result = interpreter.interpret()
    assert str(result) == "7", f"Expected '7', but got '{result}'"


def test_interpreter_with_format():
    text = "{hello} + {world}rem"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 1, "world": 2})
    result = interpreter.interpret()
    assert str(result) == "3rem", f"Expected 3rem, but got '{result}'"


def test_interpreter_with_function_call():
    text = "SUM({hello}, {world})"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 1, "world": 2})
    result = interpreter.interpret()
    assert str(result) == "3", f"Expected 3, but got {result}"


def test_interpreter_with_list_of_expressions():
    text = "{hello} + {world} + {test}, 5+6, {test}*2"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"hello": 1, "world": 2, "test": 3})
    result = interpreter.interpret()
    assert str(result) == "6, 11, 6", f"Expected '6, 11, 6', but got {result}"


def test_interpret_null():
    text = "0"

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "0", f"Expected 0, but got {result}"


def test_implicit_list():
    text = "{hello} {test} 3px"
    result = Lexer(text)
    parser = Parser(result)
    interpreter = Interpreter(parser, {"hello": 1, "test": 2})
    result = interpreter.interpret()
    assert str(result) == "1 2 3px", f"Expected '1 2 3px', but got {result}"


def test_mixed_list():
    text = "{hello} 1px, {test} {hello}, 3px"
    result = Lexer(text)
    parser = Parser(result)
    interpreter = Interpreter(parser, {"hello": 1, "test": 2})
    result = interpreter.interpret()
    assert str(result) == "1 1px, 2 1, 3px", (
        f"Expected '1 1px, 2 1, 3px', but got '{result}'"
    )


def test_simple_division():
    text = "4 / 2"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "2", f"Expected 0.5, but got '{result}'"


def test_division_resulting_in_float():
    text = "5 / 2"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "2.5", f"Expected 2.5, but got '{result}'"


def test_math_functions():
    text = (
        "min(1, 2, 3) + max(4, 5, 6) - average(7, 8, 9, max(20,98)) + sqrt(round(9.2))"
    )
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "-20.5", f"Expected -20.5, but got '{result}'"


def test_fake_function():
    text = "linear-gradient(1, 2 5px, 3rem)"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert result == "linear-gradient(1, 2 5px, 3rem)", (
        f"Expected 'linear-gradient(1, 2 5px, 3rem)', but got '{result}'"
    )


def test_power_function():
    text = "4 * 2^3"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "32", f"Expected 8, but got '{result}'"


def test_exponentiation():
    text = "4 ^ (2 ^ 3) * 5"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "327680", f"Expected 327680, but got '{result}'"


def test_calc_to_format():
    text = "(10*10+4)px"

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "104px", f"Expected 104px, but got '{result}'"


def test_exponential_with_format():
    text = "10^2px"

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "100px", f"Expected 100px, but got '{result}'"


def test_exponential_with_format_rem():
    text = "10rem^2"

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "100rem", f"Expected 100px, but got '{result}'"


def test_exponential_with_format_2():
    text = "10rem^2px"

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})

    with pytest.raises(ValueError) as excinfo:
        result = interpreter.interpret()
    assert (
        str(excinfo.value) == "Multiple units cant be combined currently: ['rem', 'px']"
    )


def test_function_no_inputs():
    text = "pi() + 2px"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "5.141592653589793px", (
        f"Expected 5.141592653589793px, but got '{result}'"
    )


def test_unkown_function():
    text = "unkown_function(1, 2, 3)"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()
    assert "Unknown function: unkown_function" in str(excinfo.value)


def test_parse_int():
    text = """
    variable i: Number = parse_int("ff", 16);
    variable j: Number = parse_int("00", 16);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    i = interpreter._variables.symbols["i"]
    j = interpreter._variables.symbols["j"]
    assert i.value == 255, f"Expected 255, but got {i.value}"
    assert j.value == 0, f"Expected 0, but got {j.value}"


def test_return_statement():
    text = """
    variable x: Number = 5;
    if(x > 3) [
        return x + 2;
    ];
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert float(result.value) == 7, f"Expected 7, but got {result}"


def test_string_literal_methods():
    text = """
    variable parts: List = "hello-world".split("-");
    variable color_parts: List = "#000000".split("#");

    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["parts"]
    color_parts = interpreter._variables.symbols["color_parts"]
    assert [str(e) for e in result.elements] == ["hello", "world"]
    assert [str(e) for e in color_parts.elements] == ["", "000000"]



def test_float_reference():
    text = """
    variable i: Number = {float_ref};
    variable j: Number = 0.5;
    variable k: Number = i + j;
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"float_ref": 0.5})
    interpreter.interpret()
    i = interpreter._variables.symbols["i"]
    j = interpreter._variables.symbols["j"]
    k = interpreter._variables.symbols["k"]
    assert i.value == 0.5, f"Expected 0.5, but got {i.value}"
    assert j.value == 0.5, f"Expected 0.5, but got {j.value}"
    assert k.value == 1.0, f"Expected 1.0, but got {k.value}"


def test_unsupported_ref():
    text = """
    variable i: Number = {unsupported_ref};
    variable j: Number = 0.5;
    variable k: Number = i + j;
    """
    lexer = Lexer(text)
    parser = Parser(lexer)

    with pytest.raises(InterpreterError) as excinfo:
        interpreter = Interpreter(parser, {"unsupported_ref": {"unsupported_ref": 0.5}})
    assert "Invalid reference value" in str(excinfo.value)


def test_empty_programm():
    text = """
    
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "", f"Expected '', but got '{result}'"


def test_token_with_none():
    """none"""
    text = "none {is.none}"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {"is.none": "none"})
    result = interpreter.interpret()
    assert str(result) == "none none", f"Expected 'none none', but got '{result}'"

def test_token_with_minus_one():
    text = "-1%"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "-1%"


def test_hex_color():
    text = """
    variable color: Color = #FF5733;
    return color;
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert str(result) == "#FF5733", f"Expected '#FF5733', but got '{result}'"

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_lexer.py
```py
import pytest
from token_interpreter.lexer import Lexer, LexerError, Token, TokenType, ReservedKeyword
from config import Operations, SupportedFormats


def test_variable_lexing():
    text = "{hello }"
    lexer = Lexer(text)
    result = lexer.next_token()
    assert result == Token(TokenType.REFERENCE, "hello"), (
        f"Expected a variable token, but got {result}"
    )


def test_number_lexing():
    text = "123.45"
    lexer = Lexer(text)
    result = lexer.next_token()
    assert result == Token(TokenType.NUMBER, "123.45"), (
        f"Expected a number token, but got {result}"
    )


def test_math_lexing():
    text = "1 + 2 - 3 * 4 / 5"
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.NUMBER, "1"),
        Token(TokenType.OPERATION, Operations.ADD),
        Token(TokenType.NUMBER, "2"),
        Token(TokenType.OPERATION, Operations.SUBTRACT),
        Token(TokenType.NUMBER, "3"),
        Token(TokenType.OPERATION, Operations.MULTIPLY),
        Token(TokenType.NUMBER, "4"),
        Token(TokenType.OPERATION, Operations.DIVIDE),
        Token(TokenType.NUMBER, "5"),
    ]


def test_multiple_variables():
    result = []
    text = "{hello} * {world} + {test}"
    lexer = Lexer(text)

    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.REFERENCE, "hello"),
        Token(TokenType.OPERATION, Operations.MULTIPLY),
        Token(TokenType.REFERENCE, "world"),
        Token(TokenType.OPERATION, Operations.ADD),
        Token(TokenType.REFERENCE, "test"),
    ]


def test_variables_with_format():
    result = []
    text = "{hello} * {world} + {test}rem"
    lexer = Lexer(text)

    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.REFERENCE, "hello"),
        Token(TokenType.OPERATION, Operations.MULTIPLY),
        Token(TokenType.REFERENCE, "world"),
        Token(TokenType.OPERATION, Operations.ADD),
        Token(TokenType.REFERENCE, "test"),
        Token(TokenType.FORMAT, SupportedFormats.REM),
    ], f"Expected a variable with rem unit, but got {result}"


def test_unsupported_operation():
    text = "{hello} * {world} + {test} ´ 2"
    lexer = Lexer(text)
    with pytest.raises(LexerError) as excinfo:
        while lexer.current_char is not None:
            lexer.next_token()
    assert (
        "Invalid character '´' at position 27. Invalid character '´'." in str(excinfo.value)

    )


def test_null():
    text = "0"
    lexer = Lexer(text)
    result = lexer.next_token()
    assert result == Token(TokenType.NUMBER, "0"), "Expected a number without unit"


def test_unsupported_variable_start_char():
    text = "{{hello} * {world}"
    lexer = Lexer(text)
    with pytest.raises(LexerError) as excinfo:
        while lexer.current_char is not None:
            lexer.next_token()
    assert (
        "Invalid character '{' at position 1. Expected '}' to close variable." in str(excinfo.value)
    )


def test_static_number_with_format():
    text = "100px"
    lexer = Lexer(text)
    result = lexer.next_token()
    assert result == Token(TokenType.NUMBER, "100"), "Expected a number without unit"
    assert lexer.next_token() == Token(TokenType.FORMAT, SupportedFormats.PX), (
        "Expected a unit token"
    )


def test_variable_with_format():
    text = "{test}rem"
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.REFERENCE, "test"),
        Token(TokenType.FORMAT, SupportedFormats.REM),
    ], f"Expected a variable with rem unit, but got {result}"


def test_parens():
    text = "{hello} * ({world} + {test})"
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.REFERENCE, "hello"),
        Token(TokenType.OPERATION, Operations.MULTIPLY),
        Token(TokenType.LPAREN, "("),
        Token(TokenType.REFERENCE, "world"),
        Token(TokenType.OPERATION, Operations.ADD),
        Token(TokenType.REFERENCE, "test"),
        Token(TokenType.RPAREN, ")"),
    ], f"Expected a variable with rem unit, but got {result}"


def test_function():
    txt = "abs(-100px)"
    lexer = Lexer(txt)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.STRING, "abs"),
        Token(TokenType.LPAREN, "("),
        Token(TokenType.OPERATION, Operations.SUBTRACT),
        Token(TokenType.NUMBER, "100"),
        Token(TokenType.FORMAT, SupportedFormats.PX),
        Token(TokenType.RPAREN, ")"),
    ], f"Expected a variable with rem unit, but got {result}"


def test_comma():
    text = "{hello}, {world}"
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())
    assert result == [
        Token(TokenType.REFERENCE, "hello"),
        Token(TokenType.COMMA, ","),
        Token(TokenType.REFERENCE, "world"),
    ], f"Expected a variable with rem unit, but got {result}"


def test_function_multi_input():
    txt = "abs(-100px, 200px)"
    lexer = Lexer(txt)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.STRING, "abs"),
        Token(TokenType.LPAREN, "("),
        Token(TokenType.OPERATION, Operations.SUBTRACT),
        Token(TokenType.NUMBER, "100"),
        Token(TokenType.FORMAT, SupportedFormats.PX),
        Token(TokenType.COMMA, ","),
        Token(TokenType.NUMBER, "200"),
        Token(TokenType.FORMAT, SupportedFormats.PX),
        Token(TokenType.RPAREN, ")"),
    ], f"Expected a variable with rem unit, but got {result}"


def test_implicit_list():
    txt = "{hello} {world}"
    lexer = Lexer(txt)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())
    assert result == [
        Token(TokenType.REFERENCE, "hello"),
        Token(TokenType.REFERENCE, "world"),
    ], f"Expected a variable with rem unit, but got {result}"


def test_format_on_group():
    text = "{hello} * ({world} + {test})rem"
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.REFERENCE, "hello"),
        Token(TokenType.OPERATION, Operations.MULTIPLY),
        Token(TokenType.LPAREN, "("),
        Token(TokenType.REFERENCE, "world"),
        Token(TokenType.OPERATION, Operations.ADD),
        Token(TokenType.REFERENCE, "test"),
        Token(TokenType.RPAREN, ")"),
        Token(TokenType.FORMAT, SupportedFormats.REM),
    ], f"Expected a variable with rem unit, but got {result}"


def test_multiple_strings():
    text = "allo hallo foo"
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())

    assert result == [
        Token(TokenType.STRING, "allo"),
        Token(TokenType.STRING, "hallo"),
        Token(TokenType.STRING, "foo"),
    ], f"Expected a list of strings, but got {result}"


def test_reserved_keyword():
    text = """
    variable hello: string = abcd;
    variable world: number = 123;
    """
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())
    assert result == [
        Token(TokenType.RESERVED_KEYWORD, ReservedKeyword.VARIABLE),
        Token(TokenType.STRING, "hello"),
        Token(TokenType.COLON, ":"),
        Token(TokenType.STRING, "string"),
        Token(TokenType.ASSIGN, "="),
        Token(TokenType.STRING, "abcd"),
        Token(TokenType.SEMICOLON, ";"),
        Token(TokenType.RESERVED_KEYWORD, ReservedKeyword.VARIABLE),
        Token(TokenType.STRING, "world"),
        Token(TokenType.COLON, ":"),
        Token(TokenType.STRING, "number"),
        Token(TokenType.ASSIGN, "="),
        Token(TokenType.NUMBER, "123"),
        Token(TokenType.SEMICOLON, ";"),
        Token(TokenType.EOF, None),
    ]


def test_string_features():
    text = """
    variable hello: string = "HELLO";
    variable result: string = hello.lower();
    """

    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())
    assert result == [
        Token(TokenType.RESERVED_KEYWORD, ReservedKeyword.VARIABLE),
        Token(TokenType.STRING, "hello"),
        Token(TokenType.COLON, ":"),
        Token(TokenType.STRING, "string"),
        Token(TokenType.ASSIGN, "="),
        Token(TokenType.EXPLICIT_STRING, "HELLO"),
        Token(TokenType.SEMICOLON, ";"),
        Token(TokenType.RESERVED_KEYWORD, ReservedKeyword.VARIABLE),
        Token(TokenType.STRING, "result"),
        Token(TokenType.COLON, ":"),
        Token(TokenType.STRING, "string"),
        Token(TokenType.ASSIGN, "="),
        Token(TokenType.STRING, "hello"),
        Token(TokenType.DOT, "."),
        Token(TokenType.STRING, "lower"),
        Token(TokenType.LPAREN, "("),
        Token(TokenType.RPAREN, ")"),
        Token(TokenType.SEMICOLON, ";"),
        Token(TokenType.EOF, None),
    ]


def test_string_features_chained():
    text = """
    variable hello: string = "HELLO";
    variable result: string = hello.lower().upper();
    """

    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())
    assert result == [
        Token(TokenType.RESERVED_KEYWORD, ReservedKeyword.VARIABLE),
        Token(TokenType.STRING, "hello"),
        Token(TokenType.COLON, ":"),
        Token(TokenType.STRING, "string"),
        Token(TokenType.ASSIGN, "="),
        Token(TokenType.EXPLICIT_STRING, "HELLO"),
        Token(TokenType.SEMICOLON, ";"),
        Token(TokenType.RESERVED_KEYWORD, ReservedKeyword.VARIABLE),
        Token(TokenType.STRING, "result"),
        Token(TokenType.COLON, ":"),
        Token(TokenType.STRING, "string"),
        Token(TokenType.ASSIGN, "="),
        Token(TokenType.STRING, "hello"),
        Token(TokenType.DOT, "."),
        Token(TokenType.STRING, "lower"),
        Token(TokenType.LPAREN, "("),
        Token(TokenType.RPAREN, ")"),
        Token(TokenType.DOT, "."),
        Token(TokenType.STRING, "upper"),
        Token(TokenType.LPAREN, "("),
        Token(TokenType.RPAREN, ")"),
        Token(TokenType.SEMICOLON, ";"),
        Token(TokenType.EOF, None),
    ]


def test_boolean_comparison():
    text = """
    variable not_result: boolean = hello != world && !world;
    """
    lexer = Lexer(text)
    result = []
    while lexer.current_char is not None:
        result.append(lexer.next_token())
    assert result == [
        Token(TokenType.RESERVED_KEYWORD, ReservedKeyword.VARIABLE),
        Token(TokenType.STRING, "not_result"),
        Token(TokenType.COLON, ":"),
        Token(TokenType.STRING, "boolean"),
        Token(TokenType.ASSIGN, "="),
        Token(TokenType.STRING, "hello"),
        Token(TokenType.IS_NOT_EQ, "!="),
        Token(TokenType.STRING, "world"),
        Token(TokenType.LOGIC_AND, Operations.LOGIC_AND),
        Token(TokenType.OPERATION, Operations.LOGIC_NOT),
        Token(TokenType.STRING, "world"),
        Token(TokenType.SEMICOLON, ";"),
        Token(TokenType.EOF, None),
    ]

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_lists.py
```py
import pytest

from token_interpreter import Lexer, Parser, Interpreter
from token_interpreter.symbols import List, Number, String, Boolean


def test_list_creation():
    text = """
    variable x: List = 1, 2, 3;
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert isinstance(result, List)
    assert len(result.elements) == 3
    assert [e.value for e in result.elements] == [1, 2, 3]


def test_list_append():
    text = """
    variable x: List = 1, 2;
    x.append(3);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert [e.value for e in result.elements] == [1, 2, 3]


def test_list_extend():
    text = """
    variable x: List = 1, 2;
    variable y: List = 3, 4;
    x.extend(y);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert [e.value for e in result.elements] == [1, 2, 3, 4]


def test_list_insert():
    text = """
    variable x: List = 1, 2, 4;
    x.insert(2, 3);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert [e.value for e in result.elements] == [1, 2, 3, 4]


def test_list_delete():
    text = """
    variable x: List = 1, 2, 3, 4;
    x.delete(2);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert [e.value for e in result.elements] == [1, 2, 4]


def test_list_length():
    text = """
    variable x: List = 1, 2, 3, 4;
    variable len: Number = x.length();
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["len"]
    assert result.value == 4


def test_list_index():
    text = """
    variable x: List = 1, 2, 3, 4;
    variable idx: Number = x.index(3);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["idx"]
    assert result.value == 2


def test_list_index_not_found():
    text = """
    variable x: List = 1, 2, 3, 4;
    variable idx: Number = x.index(5);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["idx"]
    assert result.value == -1


def test_list_with_mixed_types():
    text = """
    variable x: List = 1, "hello", true;
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert len(result.elements) == 3
    assert isinstance(result.elements[0], Number)
    assert isinstance(result.elements[1], String)
    assert isinstance(result.elements[2], Boolean)


"""
def test_list_type_checking():
    text = "variable x: List<Number> = 1, 2, 3;"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert all(isinstance(e, Number) for e in result.elements)


def test_list_type_checking_error():
    text = "variable x: List<Number> = 1, "hello", 3;"
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(ValueError):
        interpreter.interpret()
"""


def test_list_chaining_methods():
    text = """
    variable x: List = 1, 2;
    x.append(3).append(4);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["x"]
    assert [e.value for e in result.elements] == [1, 2, 3, 4]


def test_list_insert_out_of_range():
    text = """
    variable x: List = 1, 2, 3;
    x.insert(5, 4);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(IndexError):
        interpreter.interpret()


def test_list_delete_out_of_range():
    text = """
    variable x: List = 1, 2, 3;
    x.delete(5);
    """
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(IndexError):
        interpreter.interpret()

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_parser.py
```py
from token_interpreter.parser import parse_expression


def test_simple_expression():
    text = "1 + {hello} + {world}"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression"


def test_expression_with_parentheses():
    text = "(1 + {hello}) * 2"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression"


def test_expression_with_nested_parentheses():
    text = "((1 + {hello}) * 2) / 3"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression"


def test_expression_with_variables():
    text = "{hello} + {world}"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression"


def test_expression_with_operations():
    text = "{hello} + {world} - 2 * 3 / 4"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression"


def test_expression_with_unary_operations():
    text = "-{hello} + -{world}"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression"


def test_expression_with_empty():
    text = ""
    result = parse_expression(text)
    assert result is None, "Expected an empty expression to return None"


def test_expression_with_format():
    text = "{hello} + {world}rem"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with unit"


def test_function_call():
    text = "SUM({hello}, {world})"
    result = parse_expression(text)
    assert result is not None, "Expected a valid function call expression"


def test_list_of_expressions():
    text = "{hello} + {world} + {test}, 5+6, {test}*2"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with multiple variables"


def test_simple_number_without_unit():
    text = "1"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with unit"


def test_simple_number_with_unit():
    text = "1rem"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with unit"


def test_implicit_list():
    text = "{hello} {test} 3px"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with implicit list"


def test_mixed_list():
    text = "{hello} 1px, {test} {hello}, 3px"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with implicit list"


def test_color():
    text = "#ff0000"
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with color"


def test_variable_assignment():
    text = """
    variable hello: string = abcd;
    variable world: number = 123;
    """
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with variable assignment"


def test_variable_operations():
    text = """
    variable result4: string = hello.concat(" ", world);
    """
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with variable assignment"


def test_nested_variable_operations():
    text = """
    variable hello: string = "hello";
    variable world: string = "world";
    variable test: string = "test";
    variable result4: string = hello.concat(world).concat(test.concat(" 2"));
    """
    result = parse_expression(text)
    assert result is not None, "Expected a valid expression with variable assignment"

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/tests/test_variables.py
```py
import pytest

from token_interpreter import Lexer, Parser, Interpreter
from token_interpreter.interpreter import InterpreterError


def test_variable_assignment():
    text = """
    variable hello: String = abcd;
    variable world: Number = 123;
    variable complex: NumberWithUnit = (1 + 2 * 3)rem;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert len(interpreter._variables.symbols) == 3, (
        f"Expected 3 variables, but got {len(interpreter._variables.symbols)}"
    )
    assert str(interpreter._variables.symbols["hello"]) == "abcd", (
        f"Expected 'abcd', but got {interpreter._variables.symbols['hello']}"
    )
    assert str(interpreter._variables.symbols["world"]) == "123", (
        f"Expected '123', but got {interpreter._variables.symbols['world']}"
    )
    assert str(interpreter._variables.symbols["complex"]) == "7rem", (
        f"Expected '7rem', but got {interpreter._variables.symbols['complex']}"
    )


def test_variable_two_times_assignment():
    text = """
    variable hello: string = abcd;
    variable hello: string = efgh;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()

    assert (
        "Variable 'hello' already defined. Use a different name." in str(excinfo.value)
    )


def test_variable_reassignment():
    text = """
    variable hello: string = abcd;
    hello = efgh;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert len(interpreter._variables.symbols) == 1, (
        f"Expected 3 variables, but got {len(interpreter._variables)}"
    )
    assert str(interpreter._variables.symbols["hello"]) == "efgh", (
        f"Expected 'efgh', but got {interpreter._variables['hello']}"
    )


def test_variable_reassignment_not_defined():
    text = """
    hello = efgh;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()

    assert "Variable 'hello' not defined." in str(excinfo.value)


def test_variable_reassignment_invalid_value():
    text = """
    variable hello: string = abcd;
    hello = 123;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()

    assert (
        "Invalid value '123' for variable 'hello'. Use a valid value." in str(excinfo.value)

    )


def test_variable_reassignment_invalid_type_unit_number():
    text = """
    variable hello: string = abcd;
    hello = 123rem;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()

    assert (
        "Invalid value '123rem' for variable 'hello'. Use a valid value." in str(excinfo.value)
    )


def test_assign_var_from_var():
    text = """
    variable hello: string = abcd;
    variable world: string = hello;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert len(interpreter._variables.symbols) == 2, (
        f"Expected 2 variables, but got {len(interpreter._variables.symbols)}"
    )
    assert str(interpreter._variables.symbols["hello"]) == "abcd", (
        f"Expected 'abcd', but got {interpreter._variables.symbols['hello']}"
    )
    assert str(interpreter._variables.symbols["world"]) == "abcd", (
        f"Expected 'abcd', but got {interpreter._variables.symbols['world']}"
    )


def test_assignment_explicit_string():
    text = """
    variable hello: String = "abcd";
    hello = "abcdd 'sds'";
    variable world: String = 'efgh';
    variable blub: String = hello;
    variable lst: List = hello, world, blub;
    variable lst2: List = hello world blub;

    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    result = interpreter.interpret()
    assert len(interpreter._variables.symbols) == 5, (
        f"Expected 5 variables, but got {len(interpreter._variables.symbols)}"
    )
    assert str(interpreter._variables.symbols["hello"]) == "abcdd 'sds'", (
        f"Expected 'abcd', but got {interpreter._variables.symbols['hello']}"
    )
    assert str(interpreter._variables.symbols["world"]) == "efgh", (
        f"Expected 'efgh', but got {interpreter._variables.symbols['world']}"
    )
    assert str(interpreter._variables.symbols["blub"]) == "abcdd 'sds'", (
        f"Expected 'abcd', but got {interpreter._variables.symbols['blub']}"
    )
    assert (
        str(interpreter._variables.symbols["lst"]) == "abcdd 'sds', efgh, abcdd 'sds'"
    ), f"Expected 'abcd', but got {interpreter._variables.symbols['lst']}"
    assert (
        str(interpreter._variables.symbols["lst2"]) == "abcdd 'sds' efgh abcdd 'sds'"
    ), f"Expected 'abcd', but got {interpreter._variables.symbols['lst2']}"


def test_string_to_number_assignment():
    text = """
    variable hello: string = "123";
    hello = 123;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()

    assert (
        "Invalid value '123' for variable 'hello'. Use a valid value." in str(excinfo.value)
    )


def test_string_to_number_assignment_with_unit():
    text = """
    variable hello: string = "123rem";
    hello = 123;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()

    assert (
        "Invalid value '123' for variable 'hello'. Use a valid value." in str(excinfo.value)

    )


def test_list_to_number_assignment():
    text = """
    variable hello: list = 1, 2, 3;
    hello = 123;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(InterpreterError) as excinfo:
        result = interpreter.interpret()

    assert (
               "Invalid value '123' for variable 'hello'. Use a valid value." in  str(excinfo.value)
    )


def test_math_with_strings():
    text = """
    variable hello: string = "123";
    variable world: string = "456";
    variable result: number = hello + world;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    with pytest.raises(ValueError) as excinfo:
        result = interpreter.interpret()

    assert str(excinfo.value) == "Unsupported object type for math operations: String"


def test_math_with_numbers():
    text = """
    variable hello: Number = 123;
    variable world: Number = 456;
    variable result: NumberWithUnit = (hello + world)deg;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "579deg", f"Expected '579deg', but got '{result}'"


def test_string_features():
    text = """
    variable hello: string = "HELLO";
    variable world: string = "world";
    variable result: string = hello.lower();
    variable result2: string = world.upper();
    variable result3: string = hello.concat(" ".concat(world));
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    result2 = interpreter._variables.symbols["result2"]
    result3 = interpreter._variables.symbols["result3"]
    assert str(result) == "hello", f"Expected 'hello', but got '{result}'"
    assert str(result2) == "WORLD", f"Expected 'WORLD', but got '{result2}'"
    assert str(result3) == "HELLO world", f"Expected 'HELLO world', but got '{result3}'"


def test_string_concat():
    text = """
    variable hello: string = "HELLO";
    variable world: string = "world";
    variable result: string = hello.lower().concat(" ".concat(world));
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "hello world", f"Expected 'hello world', but got '{result}'"


def test_string_length():
    text = """
    variable hello: string = "HELLO";
    variable world: string = "world";
    variable result: number = hello.concat(world).length();
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "10", f"Expected '10', but got '{result}'"


def test_string_split():
    text = """
    variable hello: string = "HELLO world";
    variable result: list = hello.split(" ");
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "HELLO, world", f"Expected 'HELLO, world', but got '{result}'"


def test_string_split_empty():
    text = """
    variable hello: string = "";
    variable result: list = hello.split(" ");
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "", f"Expected '', but got '{result}'"


def test_string_split_no_delimiter():
    text = """
    variable hello: string = "HELLO world";
    variable result: list = hello.split();
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "H, E, L, L, O,  , w, o, r, l, d", (
        f"Expected 'H, E, L, L, O,  , w, o, r, l, d', but got '{result}'"
    )


def test_number_to_string():
    text = """
    variable hello: number = 123;
    variable result: string = hello.to_string();
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "123", f"Expected '123', but got '{result}'"


def test_number_to_string_with_unit():
    text = """
    variable hello: NumberWithUnit = 123rem;
    variable result: String = hello.to_string();
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    assert str(result) == "123rem", f"Expected '123rem', but got '{result}'"


def test_boolean():
    text = """
    variable hello: boolean = true;
    variable world: boolean = false;
    variable result: boolean = hello && world;
    variable true_result: boolean = hello || world;
    variable false_result: boolean = !hello;
    variable not_result: boolean = !world;
    not_result = (!world && hello) || world;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    true_result = interpreter._variables.symbols["true_result"]
    false_result = interpreter._variables.symbols["false_result"]
    not_result = interpreter._variables.symbols["not_result"]
    assert result.value == False, f"Expected 'false', but got '{result}'"
    assert true_result.value == True, f"Expected 'true', but got '{true_result}'"
    assert false_result.value == False, f"Expected 'false', but got '{false_result}'"
    assert not_result.value == True, f"Expected 'true', but got '{not_result}'"


def test_boolean_comparison():
    text = """
    variable hello: boolean = true;
    variable world: boolean = false;
    variable result: boolean = hello == world;
    variable not_result: boolean = (hello != world) && !world;
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    not_result = interpreter._variables.symbols["not_result"]
    assert result.value == False, f"Expected 'false', but got '{result}'"
    assert not_result.value == True, f"Expected 'true', but got '{not_result}'"


def test_number_comparison():
    text = """
    variable hello: Number = 123;
    variable world: Number = 456;
    variable result: boolean = hello == world;
    variable not_result: boolean = !(hello >= world) && !(1 > world);
    """

    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, {})
    interpreter.interpret()
    result = interpreter._variables.symbols["result"]
    not_result = interpreter._variables.symbols["not_result"]
    assert result.value == False, f"Expected 'false', but got '{result}'"
    assert not_result.value == True, f"Expected 'true', but got '{not_result}'"

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/__init__.py
```py
from token_interpreter.interpreter import Interpreter
from token_interpreter.parser import Parser
from token_interpreter.lexer import Lexer


def parse_token(text, variables):
    lexer = Lexer(text)
    parser = Parser(lexer)
    interpreter = Interpreter(parser, variables)
    return interpreter.interpret()

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/ast.py
```py
from config import Operations, SupportedFormats


class AST:
    """Base class for all AST nodes."""
    token = None
    pass


class BinOp(AST):
    def __init__(self, left, op: Operations, right):
        self.left = left
        self.token = self.op = op
        self.right = right

    def __repr__(self):
        return f"BinOp({self.left}, {self.op}, {self.right})"


class Num(AST):
    def __init__(self, token):
        self.token = token
        if "." in self.token.value:
            value = float(self.token.value)
            is_float = True
        else:
            value = int(self.token.value)
            is_float = False

        self.is_float = is_float
        self.value = value

    def __repr__(self):
        return f"Num({self.token}, is_float={self.is_float})"


class String(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value

    def __repr__(self):
        return f"String({self.token})"


class WhileNode:
    def __init__(self, condition, body, token=None):
        self.condition = condition
        self.body = body
        self.token = token


class IfNode(AST):
    def __init__(self, condition, if_body, else_body=None, token=None):
        self.condition = condition
        self.if_body = if_body
        self.else_body = else_body
        self.token = token


class UnaryOp(AST):
    def __init__(self, op, expr):
        self.token = self.op = op
        self.expr = expr

    def __repr__(self):
        return f"UnaryOp({self.op}, {self.expr})"


class List(AST):
    def __init__(self, elements, token=None):
        self.elements = elements
        self.token = token

    def __repr__(self):
        return f"List({self.elements})"


class ImplicitList(List):
    def __init__(self, elements, token=None):
        super().__init__(elements, token)
        self.is_implicit = True

    def __repr__(self):
        return f"ImplicitList({self.elements})"


class Function(AST):
    def __init__(self, name, args, token=None):
        self.name = name
        self.args = args
        self.token = token

    def __repr__(self):
        return f"Function({self.name}, {self.args})"


class NoOp(AST):
    pass


class Reference(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value

    def __repr__(self):
        return f"Reference({self.token})"


class Var(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value

    def __repr__(self):
        return f"Var({self.token})"


class HexColor(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value

    def __repr__(self):
        return self.token.value


class ElementWithUnit(AST):
    def __init__(self, token, unit: SupportedFormats):
        self.token = token
        self.unit = (
            unit.value
        )  # Assuming unit is an enum or similar object with a value attribute

    def __repr__(self):
        return f"ElementWithUnit({self.token}, {self.unit})"


class Assign(AST):
    def __init__(self, left, op, right, type_):
        self.left = left
        self.token = self.op = op
        self.right = right
        self.type = type_


class ReAssign(AST):
    def __init__(self, left, op, right):
        self.left = left
        self.token = self.op = op
        self.right = right

    def __repr__(self):
        return f"AssignUpdate({self.left}, {self.op}, {self.right})"


class AccessAttribute(AST):
    def __init__(self, left, right):
        self.left = left
        self.right = right

    def __repr__(self):
        return f"AccessAttribute({self.left}, {self.right})"

class AssignAttribute(AST):
    def __init__(self, object_, attribute, op, value):
        self.object = object_
        self.attribute = attribute
        self.token = self.op = op
        self.value = value

    def __repr__(self):
        return f"AttributeAssign({self.object}, {self.attribute}, {self.op}, {self.value})"


class StatementList(AST):
    def __init__(self, statements, token=None):
        self.statements = statements
        self.token = token

    def __repr__(self):
        return f"StatementList({self.statements})"


class ReturnNode(AST):
    def __init__(self, expr):
        self.expr = expr

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/colors.py
```py
import logging
from collections import deque
from typing import List, Dict

from token_interpreter.parser import parse_expression
from token_interpreter.symbols import String, Number, Boolean, NumberWithUnit, List as SymbolList,  SymbolType

"""
A color definition represents a color subtype inside tokenscript.
It is a dynamic object that can be created and modified at runtime.
It is used to define colors in a flexible way, allowing for different color formats and conversions.
That means that a consumer can extend the data model inside their design tokens flexibly by adding new data types.
It allows us to keep the core feature set small and manageable while allowing for extensibility in a safe way.


A color type consists of the following components:
- a name (e.g. "RGB", "HSL", "CMYK")
- the data structure of the object (e.g. RGB is a object with 3 attributes: r, g, b)
- initializers which lets you take rgb(1,255,255) and convert it to a color type object. e.g. rgb is a function call with a list of arguments which need to be mapped to the attributes of the object.
- a list of conversion functions which lets you convert from one color type to another.
- a method to stringify the object to a color format (e.g. "rgb(1,255,255)", "hsl(1,100%,50%)")

We take first the color data structures and map them to dynamic color types. Those are classes that are generated at runtime which represent the data structure of the color types.
Afterwards we parse all the initializers and register them as function that then just execute the initializer code and mapp its input to the attributes of the color type object. They return a color type object.

Then we register all the conversion functions which are used to convert from one color type to another. 
They are registered on the color conversion proxy which is accessible from the color type object. It is just called via the attribute `to` on the color type object. 
So for example if you have a color type object `a_color` of type RGB you can call `a_color.to.hsl()` to convert it to HSL. This will return a new color type object of type HSL.

If there is not a direct conversion method available, we try to find the shortest path to the target color type. If there is no path available, we raise an error.
"""


logger = logging.getLogger(__name__)

DATA_TYPE_MAP = {
    "string": String,
    "number": Number,
    "boolean": Boolean,
    "number_with_unit": NumberWithUnit,
}

INITIALIZER_FUNCTION = "https://schemas.tokens.studio/tokens/foundations/types/color-initializer-function.json"
INITIALIZER_OBJECT = "https://schemas.tokens.studio/tokens/foundations/types/color-initializer-object.json"

HEX_COLOR = "https://schemas.tokens.studio/tokens/foundations/types/hex-color.json"


class DynamicColorSymbol:
    def __init__(self, type_name, id_, available_attributes):
        self._values = {}
        self._data_types = {}
        self._id = id_
        self._type_name = type_name
        for attr in available_attributes["properties"]:
            self._values[attr] = None
            self._data_types[attr] = DATA_TYPE_MAP.get(available_attributes["properties"][attr].get('type'))

        self._available_attributes = available_attributes

    # TODO reference converter proxy here.

    def __call__(self, value=None):
        """
        Creates a new instance of the color symbol.
        Args:
            *args:
            **kwargs:

        Returns:

        """
        dcs = Color(self._values, type_=self)
        if value is not None:
            if isinstance(value, dict):
                for key, val in value.items():
                    if key not in self._available_attributes["properties"]:
                        raise ValueError(f"Invalid attribute {key} for color format {self._type_name}")
                    dcs._values[key] = val
            elif isinstance(value, Color):
                if value.type._id != self._id:
                    raise ValueError(f"Invalid color type {value.type._id} for color format {self._type_name}")
                dcs._values = value.type._values
            else:
                raise ValueError(f"Invalid value type {type(value)} for color format {self._type_name}")
        return dcs

    def __getattr__(self, item):

        if item in ["_values", "_data_types", "_type_name", "_available_attributes", "_id"]:
            return super().__getattr__(item)

        if item not in self._available_attributes:
            raise AttributeError(
                f"{item} is not a valid attribute for {self._type_name}. Available attributes are: {self._available_attributes}")
        return self._values[item]

    def __setattr__(self, key, value):
        if key in ["_values", "_data_types", "_type_name", "_available_attributes", "_id"]:
            super().__setattr__(key, value)
        elif key not in self._available_attributes:
            raise AttributeError(
                f"{key} is not a valid attribute for {self._type_name}. Available attributes are: {self._available_attributes}")
        else:
            # TODO make it a symbol
            self._values[key] = value


    def __repr__(self):
        return f"{self._type_name}({', '.join([f'{k}: {v}' for k, v in self._values.items()])})"



class HexColorSymbol(DynamicColorSymbol):
    def __init__(self):
        super().__init__("hex", "https://schemas.tokens.studio/tokens/foundations/types/hex-color.json", {
            "properties": {
                "value": {
                    "type": "string",
                    "format": "hex-color"
                }
            }
        })


class ColorConversionProxy:
    def __init__(self, color_transforms: Dict[str, Dict[str, callable]], source_type: str):
        self.color_transforms = color_transforms
        self.source_type = source_type

    def __getattr__(self, name: str) -> callable:
        """Dynamically create conversion methods"""

        def convert():
            target_type = f"https://schemas.tokens.studio/tokens/foundations/types/{name}-color.json"
            path = self._find_conversion_path(self.source_type, target_type)

            if not path:
                raise ValueError(f"No conversion path found from {self.source_type} to {target_type}")

            # Execute the conversion chain
            result = self.source_color
            for source, target in zip(path, path[1:]):
                convert_fn = self.color_transforms[source][target]
                result = convert_fn(result)

            return result

        return convert

    def _find_conversion_path(self, source: str, target: str) -> List[str]:
        """Find the shortest path between two color formats using BFS"""
        if source == target:
            return [source]

        visited = {source}
        queue = deque([(source, [source])])

        while queue:
            current, path = queue.popleft()

            # Check all possible conversions from current format
            for next_format in self.color_transforms.get(current, {}):
                if next_format == target:
                    return path + [target]

                if next_format not in visited:
                    visited.add(next_format)
                    queue.append((next_format, path + [next_format]))

        return []


class Color(SymbolType):
    type: DynamicColorSymbol

    @classmethod
    def _hex_color(cls, value: str):
        """
        Validates the value of the color.
        :return: bool
        """
        if not isinstance(value, str):
            raise ValueError(f"Color must be a string, got {type(value)}")
        if not value.startswith("#"):
            raise ValueError(f"Color must start with '#', got {value}")
        if len(value) > 9 or len(value) < 4:
            raise ValueError(f"Color must be 7 characters long, got {value}")

        # TODO: Validate the color format

        return True

    @classmethod
    def valid_value(cls, value: any):
        """
        Validates the value of the color.
        :param value: The value to validate.
        :return: bool
        """
        if isinstance(value, Color):
            return True

        if isinstance(value, str):
            return cls._hex_color(value)

    def __init__(self, value, type_=HexColorSymbol):
        self.value = value
        if type_ is None:
            type_ = HEX_COLOR

        self.type = type_

        if value is not None:
            self.valid_value(value)

    def has_attribute(self, name):
        """
        Checks if the color has the given attribute.
        :param name: The name of the attribute.
        :return: bool
        """
        return name in self.type._data_types

    def get_attribute(self, name):
        """
        Gets the value of the given attribute.
        :param name: The name of the attribute.
        :return: The value of the attribute.
        """
        if name == "to":
            pass
        if not self.has_attribute(name):
            raise AttributeError(
                f"{name} is not a valid attribute for {self.type._type_name}. Available attributes are: {self.type._available_attributes}")
        return self.value.get(name)

    def set_attribute(self, name, value):
        """
        Sets the value of the given attribute.
        :param name: The name of the attribute.
        :param value: The value to set.
        """
        if not self.has_attribute(name):
            raise AttributeError(
                f"{name} is not a valid attribute for {self.type._type_name}. Available attributes are: {self.type._available_attributes}")
        self.value[name] = value

    def __repr__(self):
        return str(self.value)

    def __eq__(self, other):
        if isinstance(other, Color):
            return self.value == other.value
        return False


class ColorManager:
    """
    Represents thy color type object.
    It stores all supported color formats and their respective conversion methods.
    """
    def __init__(self):
        self.color_types = {}        # color name -> type obj
        self.color_transforms = {}    # source format -> target format -> function
        self.functions = {}          # fn name -> dict (type, fn)
        self.names = {}              # fn name -> id


    SUPPORTED_SCRIPT_FORMATS = [
        "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
    ]

    def setup_color_format(self, format_spec):
        """
        Initialize the color format with the given specification.

        Args:
            format_spec (dict): The color format specification containing schema and conversions
        """
        format_id = format_spec.get('$id')
        if not format_id:
            raise ValueError("Color format specification must have an $id")

        name = format_spec.get('name').lower()
        if not name:
            raise ValueError("Color format specification must have a name")

        self.names[name] = format_id

        # Register the color format
        self.color_types[format_id] = DynamicColorSymbol(
            type_name=name,
            id_=format_spec.get('$id'),
            available_attributes=format_spec.get('schema')
        )

        # Register the initializer functions

        if "initializers" not in format_spec:
            raise ValueError("Color format specification must have initializers")

        for initializer in format_spec.get('initializers'):
            if initializer["$type"] != INITIALIZER_FUNCTION:
                continue
            keyword = initializer.get('keyword')
            if not keyword:
                raise ValueError("Initializer must have a keyword")

            if keyword in self.functions:
                raise ValueError(f"Initializer function {keyword} already registered")

            self.functions[keyword] = self.parse_fn(initializer.get('script'))

        for conversion in format_spec.get('conversions'):

            source = conversion.get('source')
            target = conversion.get('target')

            if not source or not target:
                raise ValueError("Conversion must have a source and target")

            if source not in self.color_transforms:
                self.color_transforms[source] = {}

            if target in self.color_transforms[source]:
                raise ValueError(f"Conversion from {source} to {target} already registered")

            self.color_transforms[source][target] = self.parse_fn(conversion.get('script'))

    def parse_fn(self, code):
        """
        Parse the given code and return the corresponding preloaded AST.
        Args:
            code (str): The code to parse
        """

        if "type" not in code:
            raise ValueError("Code must have a type")

        if "#" in code["type"]:
            code["type"] = code["type"].split("#")[0]

        # Check if the type is supported
        if code["type"] not in self.SUPPORTED_SCRIPT_FORMATS:
            raise ValueError(f"Type {code['type']} is not supported")

        # Use the Interpreter to parse the code
        result = parse_expression(code["script"])

        # Check if the AST is valid
        if not result:
            raise ValueError("Invalid AST")

        return result

    def init_color_format(self, name: str, input=None) -> Color:
        """
        Initialize a new color object of the specified format.

        Args:
            name (str): The name of the color format type
            input: The color values

        Returns:
            Color: A new color object with the specified format and values
        """
        name = name.lower()
        if name not in self.names:
            raise ValueError(f"Color format {name} not found")

        id_ = self.names[name]

        if id_ not in self.color_types:
            raise ValueError(f"Color format {id_} not found")

        # Create a new instance of the dynamic color symbol
        color_type = self.color_types[id_]
        color_instance = DynamicColorSymbol(
            type_name=color_type._type_name,
            id_=color_type._id,
            available_attributes=color_type._available_attributes
        )

        if isinstance(input, Dict):
            for key, value in input.items():
                if key not in color_instance._available_attributes["properties"]:
                    raise ValueError(f"Invalid attribute {key} for color format {name}")
                color_instance._values[key] = value

        elif isinstance(input, SymbolList):
            # use initializer function
            initializer_fn = self.functions.get(name)
            if not initializer_fn:
                raise ValueError(f"Initializer function for {name} not found")
            from token_interpreter import Interpreter
            interpreter = Interpreter(initializer_fn, {"input": input})
            interpreter.set_functions(self.functions)
            for name, id in self.names.items():
                interpreter.add_color_type(name, self.color_types[id])

            result = interpreter._interpret(initializer_fn)


            if not result:
                raise ValueError(f"Invalid initializer function for {name}")
            return result

        elif input is not None:
            raise ValueError(f"Invalid input type {type(input)} for color format {name}")

        # Create the color object
        color = Color(color_instance, type_=color_type._id)

        # Setup the conversion proxy
        color.type._to = ColorConversionProxy(self.color_transforms, color_type._id)
        color.type._to.source_color = color_instance

        return color

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/errors.py
```py
class LanguageError(Exception):
    def __init__(self, message, line=None, token=None):
        self.message = message
        self.line = line
        if line is not None:
            self.line = line
        if token is not None and not line and hasattr(token, 'line'):
            self.line = token.line
        self.token = token
        super().__init__(self.format_message())

    def format_message(self):
        base = f"Line {self.line}: {self.message}"
        if self.token and hasattr(self.token, 'value'):
            base += f"\nNear token: {self.token.value}"
        return base

class LexerError(LanguageError):
    pass

class ParserError(LanguageError):
    pass

class InterpreterError(LanguageError):
    pass

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/interpreter.py
```py
from typing import Union

from token_interpreter.ast import Assign, Function, AccessAttribute
from token_interpreter.errors import InterpreterError
from token_interpreter.lexer import TokenType
from token_interpreter.operations import (
    OPERATION_MAP,
    DEFAULT_FUNCTION_MAP,
)
from config import Operations, LANGUAGE_OPTIONS
from token_interpreter.symbol_table import SymbolTable
from token_interpreter.symbols import (
    String,
    Number,
    NumberWithUnit,
    List,
    Boolean,
)
from typing import List as TypedList
from token_interpreter.symbols import SymbolType

class Interpreter:
    def __init__(self, parser, references=None, symbol_table=None, inline=False, color_manager=None):
        self.parser = parser
        self._references = {}
        self._functions = DEFAULT_FUNCTION_MAP
        self._dynamic_functions = {}
        self.inline = inline
        if not symbol_table:
            self._variables = SymbolTable()
        if references is not None:
            self.set_references(references)
        if color_manager is not None:
            self._color_manager = color_manager
            for name, func in color_manager.functions.items():
                self._dynamic_functions[name] = func
            for name, color_type in color_manager.names.items():
                self._variables.add_color_type(name, color_manager.color_types[color_type])

    def set_functions(self, functions: dict[str, callable]):
        """
        Sets the _functions for the interpreter.

        :param functions: Dictionary of functions.
        """
        self._dynamic_functions.update(functions)

    def add_symbol_type(self, name: str, symbol_type: SymbolType):
        """
        Adds a new symbol type to the symbol table.

        :param name: The name of the symbol type.
        :param symbol_type: The symbol type to add.
        """
        self._variables.add_symbol_type(name, symbol_type)

    def add_color_type(self, name: str, symbol_type: SymbolType):
        """
        Adds a new color type to the symbol table.

        :param name: The name of the color type.
        :param symbol_type: The color type to add.
        """
        self._variables.add_color_type(name, symbol_type)


    def set_references(
        self, references: dict[str, Union[str, float, int, NumberWithUnit, Number]]
    ):
        """
        Sets the _references for the interpreter.

        :param references: Dictionary of _references.
        """
        for key, value in references.items():
            self._references[key] = self._import_reference(value)

    def _import_reference(self, value):
        if  isinstance(value, String):
            return value
        elif isinstance(value, (int, float)):
            return Number(value)
        elif isinstance(value, NumberWithUnit) or isinstance(value, Number):
            return value
        elif isinstance(value, list):
            # TODO: do we actually want to support lists of reference values?
            return List([self._import_reference(v) for v in value])
        elif isinstance(value, List):
            return value
        elif isinstance(value,str):
            if value.isdigit():
                return Number(int(value))

            return String(value)

        else:
            raise InterpreterError(
                f"Invalid reference value: {value}. The value must be a string, int, float, Number, NumberWithUnit or a list of these types.",
            )

    def visit(self, node):
        method_name = "visit_" + type(node).__name__
        visitor = getattr(self, method_name, self.generic_visit)
        return visitor(node)

    def generic_visit(self, node):
        raise InterpreterError(f"No visit_{type(node).__name__} method", token=node)

    def visit_BinOp(self, node):
        if node.op.type in [
            TokenType.IS_EQ,
            TokenType.IS_NOT_EQ,
            TokenType.IS_GT,
            TokenType.IS_LT,
            TokenType.IS_GT_EQ,
            TokenType.IS_LT_EQ,
        ]:
            left = self.visit(node.left)
            right = self.visit(node.right)

            if left is None or right is None:
                raise InterpreterError(f"Cannot compare None values: {left}, {right}", token=node.token)

            left_value = left.value if isinstance(left, SymbolType) else left
            right_value = right.value if isinstance(right, SymbolType) else right

            if node.op.type == TokenType.IS_EQ:
                return Boolean(left_value == right_value)
            elif node.op.type == TokenType.IS_NOT_EQ:
                return Boolean(left_value != right_value)
            elif node.op.type == TokenType.IS_GT:
                return Boolean(left_value > right_value)
            elif node.op.type == TokenType.IS_LT:
                return Boolean(left_value < right_value)
            elif node.op.type == TokenType.IS_GT_EQ:
                return Boolean(left_value >= right_value)
            elif node.op.type == TokenType.IS_LT_EQ:
                return Boolean(left_value <= right_value)

        if node.op.value in OPERATION_MAP:
            left = self.visit(node.left)
            right = self.visit(node.right)
            op = OPERATION_MAP[node.op.value]
            return op(left, right)
        else:
            raise InterpreterError(f"Unknown operator type: {type(node.op).__name__}", token=node.token)

    def visit_String(self, node):
        if not self.inline and self._variables.exists(node.value):
            return self._variables.get(node.value)
        return String(node.value)

    def visit_UnaryOp(self, node):
        if node.op.value in OPERATION_MAP:
            expr = self.visit(node.expr)
            if node.op.value == Operations.SUBTRACT:
                if isinstance(expr, NumberWithUnit) or isinstance(expr, Number):
                    expr.value = -expr.value
                else:
                    raise InterpreterError(
                        f"Cannot apply unary '-' to non-number value: {expr}",
                        token=node.token,
                    )

                return expr
            elif node.op.value == Operations.ADD:
                if isinstance(expr, NumberWithUnit) or isinstance(expr, Number):
                    expr.value = +expr.value
                else:
                    raise InterpreterError(
                        f"Cannot apply unary '+' to non-number value: {expr}",
                        token=node.token,
                    )
                return expr
            elif node.op.value == Operations.LOGIC_NOT:
                if isinstance(expr, Boolean):
                    return Boolean(not expr.value)
                raise InterpreterError(f"Cannot apply NOT to non-boolean value: {expr}",
                                       token=node.token,
                )

            else:
                raise InterpreterError(
                    f"Unknown operator type: {type(node.op).__name__}",
                    token=node.token,
                )
        else:
            raise InterpreterError(f"Unknown operator type: {type(node.op).__name__}",
                                   token=node.token,
                                   )

    def visit_Num(self, node):
        return Number(node.value, is_float=node.is_float)

    def visit_Reference(self, node):
        if node.value in self._references:
            if isinstance(self._references[node.value], SymbolType):
                return self._references[node.value]
            if isinstance(self._references[node.value], str):
                return String(self._references[node.value])
            elif isinstance(self._references[node.value], int) or isinstance(
                self._references[node.value], float
            ):
                return Number(self._references[node.value])
            return self._references[node.value]
        else:
            raise InterpreterError(f"Unknown reference: {node.value}", token=node.token)

    def visit_ElementWithUnit(self, node):
        return NumberWithUnit(self.visit(node.token), node.unit)

    def visit_Function(self, node):
        if node.name.lower() in self._functions:
            # Handle built-in functions
            func = self._functions[node.name.lower()]
            args = [self.visit(arg) for arg in node.args]
            return func(*args)
        elif node.name.lower() in self._dynamic_functions:
            # Handle dynamic functions
            func = self._dynamic_functions[node.name.lower()]
            args = [self.visit(arg) for arg in node.args]
            interpreter = Interpreter(func, {"input": args})
            interpreter._functions = self._functions
            interpreter._dynamic_functions = self._dynamic_functions
            interpreter._variables.active_symbol_types = self._variables.active_symbol_types
            return interpreter._interpret(func)
        else:
            raise InterpreterError(f"Unknown function: {node.name}", token=node.token)

    def visit_List(self, node):
        return List([self.visit(item) for item in node.elements])

    def visit_ImplicitList(self, node):
        return List([self.visit(item) for item in node.elements], implicit=True)

    def visit_HexColor(self, node):
        return node.value

    def visit_Boolean(self, node):
        return Boolean(node.value)

    def visit_StatementList(self, node):
        result = None
        for statement in node.statements:
            result = self.visit(statement)
        return result

    def visit_Assign(self, node: Assign):
        value = self.visit(node.right)
        name = node.left.value.lower()
        subtype = None
        if isinstance(node.type, TypedList):
            type_ = node.type[0].value.lower()
            subtype = node.type[1].value.lower()

        else:
            type_ = node.type.value.lower()

        if not self._variables.is_symbol_type(type_):
            raise InterpreterError(
                f"Invalid variable type '{type_}'. Use a valid type. ({', '.join(self._variables.active_symbol_types.keys())})",
                token=node.token,
            )

        if self._variables.exists(name):
            raise InterpreterError(
                f"Variable '{name}' already defined. Use a different name.",
                token=node.token,
            )

        if not subtype and not self._variables.get_type(type_).valid_value(value) and value is not None:
            raise InterpreterError(
                f"Invalid value '{value}' ('{type_}') for variable '{name}'. Use a valid value.",
                token=node.token,
            )

        if "." in name or "[" in name or "-" in name:
            raise InterpreterError(
                f"Invalid variable name '{name}'. Use a simple name (and underscores) without '.', '-', '['.",
                token=node.token,
            )

        if not subtype:
            self._variables.set(name, value)
        else:
            # Check if the subtype is valid
            if not self._variables.is_symbol_type(subtype):
                raise InterpreterError(
                    f"Invalid variable type '{subtype}'. Use a valid type. ({', '.join(self._variables.active_symbol_types.keys())})",
                    token=node.token,
                )

            # Create a new instance of the subtype
            value = self._variables.get_type(type_, subtype)(value)
            self._variables.set(name, value)
            print(self._variables.symbols)

        return value

    def visit_NoneType(self, node):
        return None

    def visit_ReAssign(self, node):
        value = self.visit(node.right)
        current_element = None
        attributes = False
        print(node.left)
        if isinstance(node.left, list):
            name = [n.value.lower() for n in node.left]
            current_element = self._variables.get(name[0])
            attributes = True
        else:
            current_element = self._variables.get(node.left.value.lower())
            name = node.left.value.lower()

        print(current_element)
        if current_element is None:
            raise InterpreterError(f"Variable '{node.left.value}' not defined.", token=node.token)

        if not attributes:
            if not self._variables.get(name).valid_value(value):
                raise InterpreterError(
                    f"Invalid value '{value}' for variable '{node.left.value}'. Use a valid value.",
                    token=node.token,
                )

            self._variables.set(name, value)

        else:
            # iteratively check if the subattribute exists
            parent_element = current_element
            for n in name[1:]:
                if isinstance(current_element, SymbolType):
                    parent_element = current_element
                    current_element = current_element.get_attribute(n)
                else:
                    raise InterpreterError(
                        f"Cannot access attribute '{n}' on '{current_element}' ({type(current_element)})",
                        token=node.token,
                    )
            parent_element.set_attribute(name[-1], value)
        return value

    def visit_AccessAttribute(self, node):
        left = self.visit(node.left)
        right = node.right

        if isinstance(left, SymbolType):
            if isinstance(right, Function):
                # Handle method calls (e.g., str.lower())
                args = [self.visit(arg) for arg in right.args]
                if left.has_method(right.name, args):
                    return left.call_method(right.name, args)
                raise InterpreterError(
                    f"Method '{right.name}' not found on '{left}' ({left.type})",
                    token=node.token,
                )
            elif isinstance(right, String):
                # Handle property access (e.g., str.length)
                if left.has_attribute(right.value):
                    return left.get_attribute(right.value)
                raise InterpreterError(
                    f"Attribute '{right.value}' not found on '{left}' ({left.type})", token=node.token
                )
        raise InterpreterError(f"Cannot access attributes on {type(left)}", token=node.token)

    def visit_WhileNode(self, node):
        c = 0
        while True:
            c += 1
            if c > LANGUAGE_OPTIONS["MAX_ITERATIONS"]:
                raise InterpreterError(
                    "Potential infinite loop detected. If this is expected, please increase the `max_iterations` limit.",
                    token=node.token,
                )
            condition = self.visit(node.condition)
            if not isinstance(condition, Boolean):
                raise InterpreterError("While condition must be a boolean", token=node.token)
            if not condition.value:
                break
            self.visit(node.body)

    def visit_IfNode(self, node):
        condition = self.visit(node.condition)
        if not isinstance(condition, Boolean):
            raise InterpreterError("If condition must be a boolean", token=node.token)

        if condition.value:
            return self.visit(node.if_body)
        elif node.else_body:
            return self.visit(node.else_body)
        return None

    def visit_ReturnNode(self, node):
        return self.visit(node.expr)

    def interpret(self):
        tree = self.parser.parse()
        if tree is None:
            return ""
        result = self._interpret(tree)
        return result

    def _interpret(self, tree):
        return self.visit(tree)

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/lexer.py
```py
import enum

from config import Operations, SupportedFormats
from token_interpreter.errors import LexerError

# Supported operations (e.g. +, -, *, /)
OPERATION_TO_NAME = {**{op.value: op for op in Operations}}

# Supported formats
SUPPORTED_FORMATS = {**{fmt.value: fmt for fmt in SupportedFormats}}


class ReservedKeyword(enum.Enum):
    TRUE = "true"
    FALSE = "false"
    NULL = "null"
    UNDEFINED = "undefined"

    WHILE = "while"
    IF = "if"
    ELSE = "else"
    RETURN = "return"

    VARIABLE = "variable"


RESERVED_KEYWORDS = {kw.value: kw for kw in ReservedKeyword}


class TokenType(enum.Enum):
    """Enum for token types."""

    # script
    REFERENCE = "REFERENCE"
    NUMBER = "NUMBER"
    OPERATION = "OPERATION"
    FORMAT = "FORMAT"  # %, DEG, RAD
    LPAREN = "LPAREN"  # (
    RPAREN = "RPAREN"  # )
    EOF = "EOF"  # End of file
    COMMA = "COMMA"  # ,
    HEX_COLOR = "HEX_COLOR"  # #ff0000
    STRING = "STRING"  # function name, variable name or just a string
    EXPLICIT_STRING = "EXPLICIT_STRING"  # "string" or 'string'

    # language
    ASSIGN = "ASSIGN"  # =
    IS_EQ = "IS_EQ"  # ==
    IS_GT = "GT"  # >
    IS_LT = "LT"  # <
    IS_GT_EQ = "IS_GT_EQ"  # >=
    IS_LT_EQ = "IS_LT_EQ"  # <=
    IS_NOT_EQ = "IS_NOT_EQ"  # !=
    RESERVED_KEYWORD = (
        "RESERVED_KEYWORD"  # true, false, null, undefined, while, if, else, return
    )
    SEMICOLON = "SEMICOLON"  # ;
    LOGIC_NOT = "LOGIC_NOT"  # !
    COLON = "COLON"  # :
    DOT = "DOT"
    LOGIC_AND = "LOGIC_AND"  # &&
    LOGIC_OR = "LOGIC_OR"  # ||
    LBLOCK = "LBLOCK"  # [
    RBLOCK = "RBLOCK"  # ]


class Token:
    """A token class to represent the tokens generated by the lexer."""

    def __init__(self, type_: TokenType, value, line=0):
        self.type = type_
        self.value = value
        self.line = line

    def __repr__(self):
        return f"Token({self.type}, {self.value})"

    def __eq__(self, other):
        if isinstance(other, Token):
            return self.type == other.type and self.value == other.value
        return False



class Lexer:
    def __init__(self, text):
        self.text = text
        self.pos = 0
        if len(text) == 0:
            self.current_char = None
            self.is_eof = True
            return
        self.line = 1
        self.column = 1
        self.current_char = self.text[self.pos]
        self.total_length = len(self.text)
        self.is_eof = False
        self._supported_formats = SUPPORTED_FORMATS

    def error(self, description=""):
        if self.current_char is None:
            raise LexerError(
                f"Unexpected end of input at position {self.pos}. {description}",
                line=self.line,
            )

        raise LexerError(
            f"Invalid character '{self.current_char}' at position {self.pos}. {description}",
            line=self.line,
            token=self.token(TokenType.EOF, self.current_char),
        )

    def advance(self):
        """Advance the `pos` pointer and set the `current_char` variable."""
        if self.current_char == '\n':
            self.line += 1
            self.column = 0
        else:
            self.column += 1

        self.pos += 1
        if self.pos > self.total_length - 1:
            self.current_char = None
            self.is_eof = True
        else:
            self.current_char = self.text[self.pos]

    def hex_color(self):
        """Return a multi-character identifier from the text."""
        result = ""
        while self.current_char is not None and (
            self.current_char.isalpha()
            or self.current_char.isdigit()
            or self.current_char in "#"
        ):
            if self.current_char.isspace():
                self.advance()
                break
            result += self.current_char
            self.advance()

        if result == "":
            self.error("Empty hex color.")

        return self.token(TokenType.HEX_COLOR, result)

    def skip_whitespace(self):
        """Skip whitespace characters."""
        while self.current_char is not None and self.current_char.isspace():
            self.advance()

    def reference(self):
        """Return a multi-character identifier from the text."""
        result = ""
        while self.current_char is not None and (self.current_char != "}"):
            if self.current_char == "{":
                self.error("Expected '}' to close variable.")
            if self.current_char.isspace():
                self.advance()
                continue
            result += self.current_char
            self.advance()

        if result == "":
            self.error("Empty variable name.")

        self.advance()
        return self.token(TokenType.REFERENCE, result)

    def number(self):
        """Return a multi-character integer from the text."""
        result = ""
        if self.current_char == ".":
            result += "0"
        while (
            self.current_char is not None
            and self.current_char.isdigit()
            or self.current_char == "."
        ):
            result += self.current_char
            self.advance()
        return self.token(TokenType.NUMBER, result)

    def format_name(self, result):
        """Return a multi-character identifier from the text."""

        # Check if the unit is supported
        if result.lower() not in self._supported_formats:
            self.error(
                f"Unsupported unit '{result}'. Supported formats are: {', '.join(self._supported_formats.keys())}"
            )

        return self.token(TokenType.FORMAT, self._supported_formats[result.lower()])

    def str_element(self):
        """Return a multi-character identifier from the text."""
        result = ""
        while (
            self.current_char is not None
            and (
                self.current_char.isalpha()
                or self.current_char.isdigit()
                or self.current_char in ["_", "-"]
            )
            and self.current_char != "("
        ):
            result += self.current_char
            self.advance()

        if self.current_char != "(" and result in self._supported_formats:
            return self.format_name(result)

        if result.lower() in RESERVED_KEYWORDS:
            return self.token(TokenType.RESERVED_KEYWORD, RESERVED_KEYWORDS[result.lower()])

        return self.token(TokenType.STRING, result)

    def peek(self, n=1):
        peek_pos = self.pos + n
        if peek_pos > len(self.text) - n:
            return None
        else:
            return self.text[peek_pos]

    def explicit_string(self, string_identifier):
        """Return a multi-character identifier from the text."""
        if string_identifier not in ["'", '"']:
            self.error("Invalid string identifier. Use ' or \".")
        result = ""
        self.advance()
        while self.current_char is not None:
            if self.current_char == string_identifier:
                self.advance()
                break
            result += self.current_char
            self.advance()

        return self.token(TokenType.EXPLICIT_STRING, result)

    def skip_comment(self):
        """Skip everything until the end of line"""
        while self.current_char is not None and self.current_char != "\n":
            self.advance()
        if self.current_char == "\n":
            self.advance()
    
    def token(self, token_type, value=None, line=None):
        """Return a token of the given type."""
        return Token(token_type, value,  line if line else self.line)

    def next_token(self):
        while self.current_char is not None:
            if self.current_char.isspace():
                self.skip_whitespace()
                continue
            if self.current_char == "/" and self.peek() == "/":
                self.advance()  # skip first /
                self.advance()  # skip second /
                self.skip_comment()
                continue
            if self.current_char.isdigit():
                return self.number()
            elif self.current_char == "'":
                return self.explicit_string(string_identifier="'")
            elif self.current_char == '"':
                return self.explicit_string(string_identifier='"')
            elif self.current_char.isalpha():
                return self.str_element()

            elif self.current_char == "{":
                self.advance()
                return self.reference()
            elif self.current_char == "[":
                self.advance()
                return self.token(TokenType.LBLOCK, "[")
            elif self.current_char == "]":
                self.advance()
                return self.token(TokenType.RBLOCK, "]")
            elif self.current_char == "!" and self.peek() == "=":
                self.advance()
                self.advance()
                return self.token(TokenType.IS_NOT_EQ, "!=")
            elif self.current_char in OPERATION_TO_NAME.keys():
                result =  self.token(
                    TokenType.OPERATION, OPERATION_TO_NAME[self.current_char]
                )
                self.advance()
                return result

            elif self.current_char == "(":
                self.advance()
                return self.token(TokenType.LPAREN, "(")
            elif self.current_char == ")":
                self.advance()
                return self.token(TokenType.RPAREN, ")")
            elif self.current_char == ",":
                self.advance()
                return self.token(TokenType.COMMA, ",")
            elif self.current_char == ".":
                if self.peek().isdigit():
                    return self.number()
                self.advance()
                return self.token(TokenType.DOT, ".")
            elif self.current_char == "#":
                return self.hex_color()
            elif self.current_char == "%":
                self.advance()
                return self.token(TokenType.FORMAT, SupportedFormats.PERCENTAGE)
            elif self.current_char == "=":
                if self.peek() == "=":
                    self.advance()
                    self.advance()
                    return self.token(TokenType.IS_EQ, "==")
                self.advance()
                return self.token(TokenType.ASSIGN, "=")
            elif self.current_char == ">":
                if self.peek() == "=":
                    self.advance()
                    self.advance()
                    return self.token(TokenType.IS_GT_EQ, ">=")
                self.advance()
                return self.token(TokenType.IS_GT, ">")
            elif self.current_char == "<":
                if self.peek() == "=":
                    self.advance()
                    self.advance()
                    return self.token(TokenType.IS_LT_EQ, "<=")
                self.advance()
                return self.token(TokenType.IS_LT, "<")
            elif self.current_char == ";":
                self.advance()
                return self.token(TokenType.SEMICOLON, ";")
            elif self.current_char == "&" and self.peek() == "&":
                self.advance()
                self.advance()
                return self.token(TokenType.LOGIC_AND, Operations.LOGIC_AND)
            elif self.current_char == "|" and self.peek() == "|":
                self.advance()
                self.advance()
                return self.token(TokenType.LOGIC_OR, Operations.LOGIC_OR)
            elif self.current_char == ":":
                self.advance()
                return self.token(TokenType.COLON, ":")

            # If we reach here, the character is not valid
            self.error(f"Invalid character '{self.current_char}'.")

        return self.token(TokenType.EOF, None)

    def peek_tokens(self, n=1):
        """Return the next n tokens without consuming them."""
        tokens = []
        current_pos = self.pos
        current_char = self.current_char
        current_line = self.line

        for _ in range(n):
            token = self.next_token()
            if token:
                tokens.append(token)

        # Restore state
        self.pos = current_pos
        self.current_char = current_char
        self.line = current_line
        return tokens

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/operations.py
```py
from typing import Union

import math

from config import Operations, SupportedFormats
from token_interpreter.symbols import NumberWithUnit, Number, Boolean
from token_interpreter.symbols import SymbolType


def decompose_unit(format_object: Union[NumberWithUnit, float]) -> tuple:
    """
    Decomposes a unit object into its base and unit components.
    Args:
        format_string (str): The unit string to decompose.
    Returns:
        tuple: A tuple containing the base and unit components.
    """
    if isinstance(format_object, NumberWithUnit):
        base = format_object.value
        unit = format_object.unit.value
    elif isinstance(format_object, Number):
        base = format_object.value
        unit = None
    else:
        raise ValueError(
            f"Unsupported object type for math operations: {format_object.type}"
        )
    return base, unit


def recompose_unit(base: float, units) -> Union[NumberWithUnit, Number]:
    """
    Recombines a base and unit into a unit object.
    Args:
        base (float): The base value.
        unit (str): The unit string.
    Returns:
        ElementWithUnit: The recombined unit object.
    """
    if not isinstance(base, (int, float)):
        raise ValueError(f"Base must be a number, got {type(base)}")

    if units is not None and not isinstance(units, list):
        raise ValueError(f"Units must be a list, got {type(units)}")

    available_units = set(units) - {None}

    if units is None or len(available_units) == 0:
        if isinstance(base, int):
            return Number(base)
        return Number(base, is_float=True)

    if len(available_units) > 1:
        raise ValueError(f"Multiple units cant be combined currently: {units}")

    return NumberWithUnit(base, list(available_units)[0])


def divide(a, b):
    if b == 0:
        raise ZeroDivisionError("Division by zero is not allowed.")

    # Check if the result is a float and convert to int if possible
    # this is necessary because python handles integer division differently
    # and we dont want to force people to float values if it is not necessary

    result = a / b
    if isinstance(result, float) and result.is_integer():
        result = int(result)

    return result


def decompose_units_lst(lst, allow_other_types=False):
    """
    Decomposes a list of unit objects into their base and unit components.
    Args:
        lst (list): The list of unit objects to decompose.
    Returns:
        tuple: A tuple containing the base and unit components.
    """

    bases = []
    units = []

    for item in lst:
        if allow_other_types and not isinstance(item, (NumberWithUnit, Number)):
            if isinstance(item, SymbolType):
                item = item.value
            bases.append(item)
            units.append(None)
            continue
        base, unit = decompose_unit(item)
        bases.append(base)
        units.append(unit)

    return bases, units


def math_wrapper(func, args_as_list=True, allow_other_types=False):
    """
    A wrapper function to handle mathematical operations.
    Args:
        func: The mathematical function to wrap.
    Returns:
        A function that takes a variable number of arguments and applies the wrapped function.
    """

    def wrapper(*args):
        if len(args) == 0:
            return recompose_unit(func(), [None])
        if len(args) == 1 and not args_as_list:
            base, unit = decompose_unit(args[0])
            result = func(base)
            return recompose_unit(result, [unit])

        if args_as_list:
            bases, units = decompose_units_lst(
                args, allow_other_types=allow_other_types
            )
            result = func([*bases])
        else:
            bases, units = decompose_units_lst(
                args, allow_other_types=allow_other_types
            )
            result = func(*bases)

        return recompose_unit(result, units)

    return wrapper


def to_text_wrapper(name="linear-gradient", args_as_list=False):
    """
    A wrapper function to handle text formatting.
    Args:
        args: The arguments to unit.
        name: The name of the function.
    Returns:
        A formatted string.
    """

    def wrapper(*args):
        if len(args) == 0:
            return f"{name}()"

        if len(args) == 1:
            return f"{name}({', '.join(args)})"

        args = [str(arg) for arg in args]
        return f"{name}({', '.join(args)})"

    return wrapper


OPERATION_MAP = {
    Operations.ADD: math_wrapper(lambda *args: sum(args), args_as_list=False),
    Operations.SUBTRACT: math_wrapper(
        lambda *args: args[0] - sum(args[1:]), args_as_list=False
    ),
    Operations.MULTIPLY: math_wrapper(
        lambda *args: math.prod(args), args_as_list=False
    ),
    Operations.DIVIDE: math_wrapper(divide, args_as_list=False),
    Operations.POWER: math_wrapper(lambda x, y: x**y, args_as_list=False),
    Operations.LOGIC_AND: lambda x, y: Boolean(x.value and y.value)
    if isinstance(x, Boolean) and isinstance(y, Boolean)
    else None,
    Operations.LOGIC_OR: lambda x, y: Boolean(x.value or y.value)
    if isinstance(x, Boolean) and isinstance(y, Boolean)
    else None,
    Operations.LOGIC_NOT: lambda x: Boolean(not x.value)
    if isinstance(x, Boolean)
    else None,
}

DEFAULT_FUNCTION_MAP = {
    "min": math_wrapper(min),
    "max": math_wrapper(max),
    "sum": math_wrapper(sum),
    "average": math_wrapper(lambda *args: sum(args) / len(args), args_as_list=False),
    "ceil": math_wrapper(math.ceil, args_as_list=False),
    "floor": math_wrapper(math.floor, args_as_list=False),
    "round": math_wrapper(round, args_as_list=False),
    "roundto": math_wrapper(lambda x, n=0: round(x, int(n)), args_as_list=False),
    "abs": math_wrapper(abs, args_as_list=False),
    "sqrt": math_wrapper(math.sqrt, args_as_list=False),
    "sin": math_wrapper(math.sin, args_as_list=False),
    "cos": math_wrapper(math.cos, args_as_list=False),
    "tan": math_wrapper(math.tan, args_as_list=False),
    "asin": math_wrapper(math.asin, args_as_list=False),
    "acos": math_wrapper(math.acos, args_as_list=False),
    "atan": math_wrapper(math.atan, args_as_list=False),
    "log": math_wrapper(math.log, args_as_list=False),
    "mod": math_wrapper(lambda x, y: x % y, args_as_list=False),
    "pi": math_wrapper(lambda: math.pi, args_as_list=False),
    "parse_int": math_wrapper(
        lambda x, base=10: int(x, base), args_as_list=False, allow_other_types=True
    ),
    "pow": math_wrapper(lambda x, y: x**y, args_as_list=False, allow_other_types=True),
    "linear-gradient": to_text_wrapper(name="linear-gradient", args_as_list=True),
    "rgba": to_text_wrapper(name="rgba", args_as_list=True),
}

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/parser.py
```py
from token_interpreter.ast import (
    BinOp,
    Num,
    String,
    UnaryOp,
    List,
    ImplicitList,
    Function,
    Reference,
    HexColor,
    ElementWithUnit,
    Assign,
    StatementList,
    ReAssign,
    AccessAttribute,
    WhileNode,
    IfNode,
    ReturnNode, AssignAttribute,
)
from token_interpreter.errors import ParserError
from token_interpreter.lexer import Lexer, TokenType, ReservedKeyword, Token
from config import Operations
from token_interpreter.symbols import Boolean


class Parser(object):
    def __init__(self, lexer):
        self.lexer = lexer
        # set current token to the first token taken from the input
        self.current_token = self.lexer.next_token()
        self.required_references = set()

    def error(self, error_message="Invalid syntax"):
        raise ParserError(error_message, self.current_token.line, self.current_token)

    def eat(self, token_type):
        """Consume the current token if it matches the expected token type."""
        if self.current_token.type == token_type:
            self.current_token = self.lexer.next_token()
        else:
            self.error(
                f"Expected token type {token_type}, but got {self.current_token.type}"
            )

    def statement_list(self):
        """
        statement_list : statement
                       | statement SEMI statement_list
        """
        node = self.statement()
        token = self.current_token

        results = [node]

        while self.current_token.type == TokenType.SEMICOLON:
            self.eat(TokenType.SEMICOLON)
            if (
                self.current_token.type == TokenType.EOF
                or self.current_token.type == TokenType.RBLOCK
            ):
                break
            results.append(self.statement())

        if len(results) == 1:
            return results[0]

        return StatementList(results, token=token)

    def statement(self):
        """
        statement : variable_declaration
                 | attribute_assignment
                 | list_expr
        """
        if self.current_token.type == TokenType.RESERVED_KEYWORD:
            if self.current_token.value == ReservedKeyword.RETURN:
                return self.return_statement()
            if self.current_token.value == ReservedKeyword.WHILE:
                return self.while_statement()
            if self.current_token.value == ReservedKeyword.IF:
                return self.if_statement()
            if self.current_token.value == ReservedKeyword.VARIABLE:
                return self.assign_variable()
        elif self.current_token.type == TokenType.STRING:
            # Look ahead to check the token sequence
            next_tokens = self.peek_tokens(4)  # Get next 4 tokens
            if next_tokens is not None:

                for i in range(0, len(next_tokens)-1, 2):
                    if (next_tokens[i].type == TokenType.DOT and
                        next_tokens[i+1].type == TokenType.STRING):
                        if i+2 < len(next_tokens) and next_tokens[i+2].type == TokenType.ASSIGN:
                            name = self.current_token
                            self.eat(TokenType.STRING)
                            return self.reassign_variable(name)

        return self.list_expr()

    def assign_variable(self):
        """Handle variable declarations like: var a_color : Color.RGB;"""
        self.eat(TokenType.RESERVED_KEYWORD)  # consume 'variable'

        # Get variable name
        var_name = self.current_token
        if var_name.type != TokenType.STRING:
            self.error("Expected variable name")
        self.eat(TokenType.STRING)

        # Get type declaration
        if self.current_token.type != TokenType.COLON:
            self.error("Expected ':' after variable name")
        self.eat(TokenType.COLON)

        # Get base type
        type_token = self.current_token
        if type_token.type != TokenType.STRING:
            self.error("Expected type name")
        self.eat(TokenType.STRING)

        # Handle subtype (e.g., Color.RGB)
        if self.current_token.type == TokenType.DOT:
            type_info = [type_token]
            while self.current_token.type == TokenType.DOT:
                self.eat(TokenType.DOT)
                if self.current_token.type != TokenType.STRING:
                    self.error("Expected subtype name after '.'")
                type_info.append(self.current_token)
                self.eat(TokenType.STRING)
        else:
            type_info = type_token # todo list

        # Handle assignment if present
        if self.current_token.type == TokenType.ASSIGN:
            token = self.current_token
            self.eat(TokenType.ASSIGN)
            value = self.list_expr()
            return Assign(var_name, token, value, type_info)

        # No assignment, just declaration
        return Assign(var_name, None, None, type_info)

    def reassign_variable(self, variable):

        name = variable
        if self.current_token.type == TokenType.DOT:
            name = [name]
            while self.current_token.type == TokenType.DOT:
                self.eat(TokenType.DOT)
                if self.current_token.type != TokenType.STRING:
                    self.error("Expected subtype name after '.'")
                name.append(self.current_token)
                self.eat(TokenType.STRING)
        self.eat(TokenType.ASSIGN)
        value = self.list_expr()
        node = ReAssign(name, self.current_token, value)
        return node

    def reference(self):
        node = Reference(self.current_token)
        self.eat(TokenType.REFERENCE)
        self.required_references.add(node.value)
        if self.current_token.type == TokenType.FORMAT:
            node = self.format(node)
        return node

    def expr(self):
        """
        expr : logic_term ((AND | OR) logic_term)*
        """
        node = self.logic_term()

        while (
            self.current_token.type == TokenType.LOGIC_AND
            or self.current_token.type == TokenType.LOGIC_OR
        ):
            token = self.current_token
            if token.type == TokenType.LOGIC_AND:
                self.eat(TokenType.LOGIC_AND)
            else:
                self.eat(TokenType.LOGIC_OR)
            node = BinOp(left=node, op=token, right=self.logic_term())

        return node

    def logic_term(self):
        """
        logic_term : term ((PLUS | MINUS) term)*
        """
        node = self.comparison()

        while (
            self.current_token.type == TokenType.OPERATION
            and self.current_token.value in (Operations.ADD, Operations.SUBTRACT)
        ):
            token = self.current_token
            self.eat(TokenType.OPERATION)
            node = BinOp(left=node, op=token, right=self.comparison())

        return node

    def comparison(self):
        """
        comparison : term ((IS_EQ | IS_NOT_EQ | IS_GT | IS_LT | IS_GT_EQ | IS_LT_EQ) term)*
        """
        node = self.term()

        while self.current_token.type in [
            TokenType.IS_EQ,
            TokenType.IS_NOT_EQ,
            TokenType.IS_GT,
            TokenType.IS_LT,
            TokenType.IS_GT_EQ,
            TokenType.IS_LT_EQ,
        ]:
            token = self.current_token
            self.eat(token.type)
            node = BinOp(left=node, op=token, right=self.term())

        return node

    def implicit_list_expr(self):
        """
        implicit_list_expr : factor ((COMMA) factor)*
        """
        token = self.current_token
        elements = [self.expr()]
        while self.current_token.type not in [
            TokenType.COMMA,
            TokenType.RPAREN,
            TokenType.EOF,
            TokenType.SEMICOLON,
        ]:
            elements.append(self.expr())

        if len(elements) == 1:
            return elements[0]
        return ImplicitList(elements, token=token)

    def list_expr(self):
        """
        list_expr : factor ((COMMA) factor)*
        """
        token = self.current_token
        elements = [self.implicit_list_expr()]
        while self.current_token.type == TokenType.COMMA:
            if self.current_token.type == TokenType.COMMA:
                self.eat(TokenType.COMMA)
            elements.append(self.implicit_list_expr())

        if len(elements) == 1:
            return elements[0]
        return List(elements, token=token)

    def power(self):
        """power : factor (POWER factor)*"""
        node = self.factor()

        while (
            self.current_token.type == TokenType.OPERATION
            and self.current_token.value == Operations.POWER
        ):
            token = self.current_token
            self.eat(TokenType.OPERATION)
            node = BinOp(left=node, op=token, right=self.factor())

        return node

    def while_statement(self):
        """
        while_statement : WHILE LPAREN expr RPAREN LBLOCK statement_list RBLOCK
        """
        token = self.current_token
        self.eat(TokenType.RESERVED_KEYWORD)  # 'while'
        self.eat(TokenType.LPAREN)
        condition = self.expr()
        self.eat(TokenType.RPAREN)
        self.eat(TokenType.LBLOCK)
        body = self.statement_list()
        self.eat(TokenType.RBLOCK)
        return WhileNode(condition, body, token)

    def if_statement(self):
        """
        if_statement : IF LPAREN expr RPAREN LBLOCK statement_list RBLOCK
                    | IF LPAREN expr RPAREN LBLOCK statement_list RBLOCK ELSE LBLOCK statement_list RBLOCK
        """
        token = self.current_token
        self.eat(TokenType.RESERVED_KEYWORD)  # 'if'
        self.eat(TokenType.LPAREN)
        condition = self.expr()
        self.eat(TokenType.RPAREN)
        self.eat(TokenType.LBLOCK)
        if_body = self.statement_list()
        self.eat(TokenType.RBLOCK)

        else_body = None
        if (
            self.current_token.type == TokenType.RESERVED_KEYWORD
            and self.current_token.value == ReservedKeyword.ELSE
        ):
            self.eat(TokenType.RESERVED_KEYWORD)  # 'else'
            self.eat(TokenType.LBLOCK)
            else_body = self.statement_list()
            self.eat(TokenType.RBLOCK)

        return IfNode(condition, if_body, else_body, token=token)

    def term(self):
        """term : factor ((MUL | DIV) factor)*"""
        node = self.power()

        while (
            self.current_token.type == TokenType.OPERATION
            and self.current_token.value
            in (
                Operations.MULTIPLY,
                Operations.DIVIDE,
                # Operations.MODULUS,
            )
        ):
            token = self.current_token
            if token.type == TokenType.OPERATION:
                self.eat(TokenType.OPERATION)

            node = BinOp(left=node, op=token, right=self.power())

        return node

    def format(self, node_token):
        """unit : FORMAT"""
        format_token = self.current_token
        self.eat(TokenType.FORMAT)
        node = ElementWithUnit(node_token, format_token)
        return node

    def number(self):
        """number : INTEGER"""
        node = Num(self.current_token)
        self.eat(TokenType.NUMBER)
        if self.current_token.type == TokenType.FORMAT:
            node = self.format(node)

        return node

    def factor(self):
        """
        factor : PLUS factor
               | MINUS factor
               | NOT factor
               | NUMBER (FORMAT)?
               | LPAREN expr RPAREN (FORMAT)?
               | REFERENCE (DOT (STRING | function))*
               | STRING (LPAREN args RPAREN)? (DOT (STRING | function))*
               | EXPLICIT_STRING (DOT (STRING | function))*
               | HEX_COLOR
        """
        token = self.current_token
        if token is None:
            return None

        if token.type == TokenType.OPERATION and token.value in (
            Operations.ADD,
            Operations.SUBTRACT,
            Operations.LOGIC_NOT,
        ):
            self.eat(TokenType.OPERATION)
            node = UnaryOp(token, self.factor())
            return node
        elif token.type == TokenType.RESERVED_KEYWORD:
            if token.value == ReservedKeyword.TRUE:
                self.eat(TokenType.RESERVED_KEYWORD)
                return Boolean(True)
            elif token.value == ReservedKeyword.FALSE:
                self.eat(TokenType.RESERVED_KEYWORD)
                return Boolean(False)
            else:
                self.error(f"Unknown reserved keyword: {token.value}")

        elif token.type == TokenType.NUMBER:
            node = self.number()
            return node
        elif token.type == TokenType.LPAREN:
            self.eat(TokenType.LPAREN)
            node = self.expr()
            self.eat(TokenType.RPAREN)
            if self.current_token.type == TokenType.FORMAT:
                node = self.format(node)
            return node
        elif token.type == TokenType.REFERENCE:
            node = self.reference()
            # Handle attribute access for references
            while self.current_token.type == TokenType.DOT:
                self.eat(TokenType.DOT)
                if self.current_token.type == TokenType.STRING:
                    if self.peek_tokens().type == TokenType.LPAREN:
                        # It's a method call
                        method_name = self.current_token.value
                        self.eat(TokenType.STRING)
                        node = AccessAttribute(node, self.function(method_name))
                    else:
                        # It's a property access
                        attr_token = self.current_token
                        self.eat(TokenType.STRING)
                        node = AccessAttribute(node, String(attr_token))
            return node
        elif token.type == TokenType.FORMAT:
            self.error("Unexpected unit token")
        elif token.type == TokenType.HEX_COLOR:
            node = HexColor(self.current_token)
            self.eat(TokenType.HEX_COLOR)
            return node
        elif token.type == TokenType.STRING:
            current_token = self.current_token
            self.eat(TokenType.STRING)

            if self.current_token.type == TokenType.LPAREN:
                node = self.function(current_token.value)
            elif self.current_token.type == TokenType.ASSIGN:
                return self.reassign_variable(current_token)
            else:
                node = String(current_token)

            # Handle attribute access for strings
            while self.current_token.type == TokenType.DOT:
                self.eat(TokenType.DOT)
                if self.current_token.type == TokenType.STRING:
                    if self.peek_tokens().type == TokenType.LPAREN:
                        # It's a method call
                        method_name = self.current_token.value
                        self.eat(TokenType.STRING)
                        node = AccessAttribute(node, self.function(method_name))
                    else:
                        # It's a property access
                        attr_token = self.current_token
                        self.eat(TokenType.STRING)
                        node = AccessAttribute(node, String(attr_token))
            return node
        elif token.type == TokenType.EXPLICIT_STRING:
            current_token = self.current_token
            self.eat(TokenType.EXPLICIT_STRING)
            node = String(current_token)

            # Handle attribute access for explicit strings
            while self.current_token.type == TokenType.DOT:
                self.eat(TokenType.DOT)
                if self.current_token.type == TokenType.STRING:
                    if self.peek_tokens().type == TokenType.LPAREN:
                        # It's a method call
                        method_name = self.current_token.value
                        self.eat(TokenType.STRING)
                        node = AccessAttribute(node, self.function(method_name))
                    else:
                        # It's a property access
                        attr_token = self.current_token
                        self.eat(TokenType.STRING)
                        node = AccessAttribute(node, String(attr_token))
            return node
        else:
            self.error(f"Unknown token type: {self.current_token.type}")

    def peek_tokens(self, n=1):
        """Look at the next token without consuming it."""
        tokens = self.lexer.peek_tokens(n)
        if tokens is None:
            return None
        if len(tokens) == 1:
            return tokens[0]

        return tokens

    def function(self, function_name):
        token = self.current_token
        self.eat(TokenType.LPAREN)
        args = []
        while self.current_token.type != TokenType.RPAREN:
            if self.current_token.type == TokenType.COMMA:
                self.eat(TokenType.COMMA)
            args.append(self.implicit_list_expr())
        self.eat(TokenType.RPAREN)
        return Function(function_name, args, token)

    def return_statement(self):
        """
        return_statement : RETURN expr SEMICOLON
        """
        self.eat(TokenType.RESERVED_KEYWORD)  # 'return'
        expr = self.expr()
        self.eat(TokenType.SEMICOLON)
        return ReturnNode(expr)

    def parse(self, inline=False):
        """
        Program grammar:

        statement_list : statement (SEMICOLON statement)*

        statement : variable_declaration
                 | list_expr

        variable_declaration : VARIABLE STRING COLON STRING ASSIGN expr

        list_expr : expr (COMMA expr)*

        expr : term ((ADD | SUBTRACT) term)*

        term : power ((MULTIPLY | DIVIDE) power)*

        power : attribute_access (POWER attribute_access)*

        attribute_access : primary (DOT (STRING | function))*

        primary : NUMBER (FORMAT)?
                | LPAREN expr RPAREN (FORMAT)?
                | REFERENCE
                | STRING (LPAREN args RPAREN)?
                | EXPLICIT_STRING
                | HEX_COLOR
                | (PLUS | MINUS) primary

        function : STRING LPAREN args RPAREN

        args : expr (COMMA expr)*
        """

        if self.current_token.type == TokenType.EOF:
            return None

        if inline:
            node = self.list_expr()
        else:
            node = self.statement_list()
        if self.current_token.type != TokenType.EOF:
            self.error("Unexpected token at the end of input.")

        return node


def parse_expression(text):
    """Parse the input expression and return the result."""
    lexer = Lexer(text)
    if lexer.is_eof:
        return None
    parser = Parser(lexer)
    result = parser.parse()

    return result

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/symbol_table.py
```py
from typing import Dict

from token_interpreter.symbols import SymbolType, Number, List, String, NumberWithUnit, Boolean
from token_interpreter.colors import Color


class SymbolTable:
    """
    A symbol table for storing variables and their values.
    """

    def __init__(self):
        self.symbols = {}
        self.active_symbol_types: Dict[str, SymbolType] = {
            "number": Number,
            "list": List,
            "string": String,
            "numberwithunit": NumberWithUnit,
            "boolean": Boolean,
            "color": {
                "default": Color,
            },
        }

    def is_symbol_type(self, name: str) -> bool:
        """
        Checks if the symbol type is valid.
        :param name: The name of the symbol type.
        :return: bool
        """
        if name.lower() in self.active_symbol_types:
            return True
        for st in self.active_symbol_types:
            if isinstance(self.active_symbol_types[st], dict):
                print(self.active_symbol_types[st].keys())
                if name.lower() in self.active_symbol_types[st].keys():
                    return True
        return name.lower() in self.active_symbol_types

    def add_symbol_type(self, name: str, symbol_type: SymbolType):
        """
        Adds a new symbol type to the symbol table.
        :param name: The name of the symbol type.
        :param symbol_type: The symbol type to add.
        """
        self.active_symbol_types[name.lower()] = symbol_type

    def add_color_type(self, name: str, symbol_type: SymbolType):
        """
        Adds a new color type to the symbol table.
        :param name: The name of the color type.
        :param symbol_type: The color type to add.
        """
        self.active_symbol_types["color"][name.lower()] = symbol_type

    def get_type(self, name: str, subtype=None) -> SymbolType:
        """
        Gets the symbol type by name.
        :param name: The name of the symbol type.
        :return: SymbolType
        """
        print(f"Getting type for {name} with subtype {subtype}")
        if subtype:
            if name.lower() in self.active_symbol_types:
                print(self.active_symbol_types[name.lower()])
                return self.active_symbol_types[name.lower()].get(subtype.lower())
        if subtype is None and isinstance(self.active_symbol_types.get(name.lower()), dict):
            if "default" in self.active_symbol_types[name.lower()]:
                return self.active_symbol_types[name.lower()]["default"]
            else:
                raise ValueError(f"Default type not found for {name}")
        return self.active_symbol_types.get(name.lower())

    def set(self, name: str, value: SymbolType):
        self.symbols[name.lower()] = value

    def get(self, name: str) -> SymbolType:
        return self.symbols.get(name.lower())

    def remove(self, name: str):
        name = name.lower()
        if name in self.symbols:
            del self.symbols[name]

    def clear(self):
        self.symbols.clear()

    def exists(self, name: str) -> bool:
        return name.lower() in self.symbols

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_interpreter/symbols.py
```py
import abc
from typing import Union, List as PList

from config import SupportedFormats


class SymbolSelfType:
    """
    A type hint for the symbol self object.
    This is used to indicate that the method should return an instance of the same class as the one it is called on.
    """

    pass


class ChildSelfType:
    """
    A type hint for the child symbol self object.
    This is used to indicate that the method should return an instance of the same class as the one it is called on.
    """

    pass


class SymbolType(abc.ABC):
    """
    Base class for all symbols in the interpreter.
    """

    @classmethod
    @property
    def type(cls):
        """
        Returns the type of the symbol.
        :return: str
        """
        return cls.__name__

    @abc.abstractmethod
    def __init__(self, value):
        """
        Initializes the symbol with a value.
        :param value: The value of the symbol.
        """
        self.value = value

    @classmethod
    @abc.abstractmethod
    def valid_value(cls, value: any):
        """
        Validates the value of the symbol.
        :param value: The value to validate.
        :return: bool
        """
        pass

    @abc.abstractmethod
    def __repr__(self):
        """
        Returns a string representation of the symbol.
        :return: str
        """
        pass

    @abc.abstractmethod
    def __eq__(self, other):
        """
        Compares two symbols for equality.
        :param other: The other symbol to compare with.
        :return: bool
        """
        pass

    def _required_args(self, name):
        """
        Returns the required arguments for a method.
        :param name: The name of the method.
        :return: list
        """
        return [arg for arg in self._SUPPORTED_METHODS[name].args if not arg.optional]

    def has_method(self, name, args):
        """
        Checks if the symbol has a method.
        :return: bool
        """
        if name.lower() in self._SUPPORTED_METHODS:
            method = self._SUPPORTED_METHODS[name.lower()]
            if not (
                    len(args) >= len(self._required_args(name))
                    and len(args) <= len(method.args)
            ):
                return False

            for arg, arg_type in zip(args, method.args):
                if arg_type.type == SymbolSelfType:
                    if isinstance(arg, self.__class__):
                        continue
                if arg_type.type == ChildSelfType:
                    continue  # TODO
                if not isinstance(arg, arg_type.type):
                    return False
            return True

    def call_method(self, name, args):
        """
        Calls a method on the symbol.
        :param name: The name of the method.
        :param args: The arguments to pass to the method.
        :return: The result of the method call.

        """
        n_args = list()
        arg_types = self._SUPPORTED_METHODS[name].args
        for num, arg in enumerate(args):
            if arg_types[num].unpack:
                if isinstance(arg, List):
                    n_args.extend(arg.elements)
                elif isinstance(arg, SymbolType):
                    n_args.append(arg.value)
                else:
                    raise ValueError(
                        f"Cannot unpack {type(arg)} to {arg_types[num].type}"
                    )
            else:
                n_args.append(arg)

        return_type = self._SUPPORTED_METHODS[name].return_type
        if return_type == SymbolSelfType:
            return_type = self.__class__
        elif return_type == ChildSelfType:
            return_type = self.__class__

        # TODO validate return type

        return self._SUPPORTED_METHODS[name].function(self, *n_args)

    def has_attribute(self, name):
        """
        Checks if the symbol has an attribute.
        :return: bool
        """
        raise NotImplementedError(
            f"{self.__class__.__name__} does not implement has_attribute method"
        )

    def retrieve_attribute(self, name):
        """
        Retrieves the attribute of the symbol.
        :param name: The name of the attribute.
        :return: The value of the attribute.
        """
        raise NotImplementedError(
            f"{self.__class__.__name__} does not implement retrieve_attribute method"
        )


class MethodArgument:
    """
    A type hint for the method argument.
    This is used to indicate that the method should return an instance of the same class as the one it is called on.
    """

    name: str = None
    type: Union[SymbolSelfType, ChildSelfType] = None

    def __init__(
            self,
            name: str,
            type_: Union[SymbolSelfType, SymbolType],
            optional=False,
            unpack=True,
    ):
        self.name = name
        self.type = type_
        self.optional = optional
        self.unpack = unpack


class MethodDefinition:
    """
    A type hint for the method type.
    This is used to indicate that the method should return an instance of the same class as the one it is called on.
    """

    name: str = None
    function = None
    args = None
    return_type = None

    def __init__(
            self, name: str, function, args: PList[MethodArgument], return_type: SymbolType
    ):
        self.name = name
        self.function = function
        self.args = args
        self.return_type = return_type


class Number(SymbolType):
    def __init__(self, value, is_float=False):
        if isinstance(value, Number) or isinstance(value, NumberWithUnit):
            value = value.value
        self.value = value
        self.is_float = is_float
        self._SUPPORTED_METHODS = {
            "to_string": MethodDefinition(
                name="to_string",
                function=Number.to_string,
                args=[],
                return_type=String,
            )
        }

    def __repr__(self):
        """
        Returns a string representation of the number.
        If the number has been stored as a float, it will be returned as a float.
        If the number has been stored as an int and it can be represented as an int, it will be returned as an int.
        Returns:
            str: The string representation of the number.
        """
        if not self.is_float:
            if self.value.is_integer():
                return str(int(self.value))
        return str(self.value)

    def __eq__(self, other):
        if isinstance(other, Number):
            return self.value == other.value
        return False

    @classmethod
    def valid_value(cls, value: any):
        """
        Validates the value of the number.
        :param value: The value to validate.
        :return: bool
        """
        return isinstance(value, (int, float)) or isinstance(value, Number)

    def to_string(self):
        return String(str(self.value))

        # Add method definition to _SUPPORTED_METHODS


class List(SymbolType):
    def __init__(self, elements, type_=None, implicit=False):
        self.implicit = implicit
        if type_ is not None:
            if not all(isinstance(e, type_) for e in elements):
                raise ValueError(f"All elements must be of type {type_}")
        self.elements = elements
        self.value_type = type_
        self._SUPPORTED_METHODS = {
            "append": MethodDefinition(
                name="append",
                function=List.append,
                args=[
                    MethodArgument(
                        name="item", type_=ChildSelfType, optional=False, unpack=False
                    )
                ],
                return_type=SymbolSelfType,
            ),
            "extend": MethodDefinition(
                name="extend",
                function=List.extend,
                args=[
                    MethodArgument(
                        name="items", type_=SymbolSelfType, optional=False, unpack=False
                    )
                ],
                return_type=SymbolSelfType,
            ),
            "insert": MethodDefinition(
                name="insert",
                function=List.insert,
                args=[
                    MethodArgument(name="index", type_=Number, optional=False),
                    MethodArgument(
                        name="item", type_=ChildSelfType, optional=False, unpack=False
                    ),
                ],
                return_type=SymbolSelfType,
            ),
            "delete": MethodDefinition(
                name="delete",
                function=List.delete,
                args=[
                    MethodArgument(
                        name="index", type_=Number, optional=False, unpack=True
                    )
                ],
                return_type=None,
            ),
            "length": MethodDefinition(
                name="length", function=List.length, args=[], return_type=Number
            ),
            "index": MethodDefinition(
                name="index",
                function=List.index,
                args=[
                    MethodArgument(
                        name="item", type_=ChildSelfType, optional=False, unpack=False
                    )
                ],
                return_type=Number,
            ),
            "get": MethodDefinition(
                name="get",
                function=List.get,
                args=[
                    MethodArgument(
                        name="index", type_=Number, optional=False, unpack=True
                    )
                ],
                return_type=ChildSelfType,
            ),
            "update": MethodDefinition(
                name="update",
                function=List.update,
                args=[
                    MethodArgument(name="index", type_=Number, optional=False),
                    MethodArgument(
                        name="item", type_=ChildSelfType, optional=False, unpack=False
                    ),
                ],
                return_type=SymbolSelfType,
            ),
        }

    @classmethod
    def valid_value(cls, value: any):
        return isinstance(value, list) or isinstance(value, List)

    def __repr__(self):
        if self.implicit:
            return " ".join([str(e) for e in self.elements])
        return ", ".join([str(e) for e in self.elements])

    def __eq__(self, other):
        if isinstance(other, List):
            return self.elements == other.elements
        return False

    def get(self, index: int):
        if index < 0 or index >= len(self.elements):
            raise IndexError("Index out of range")
        return self.elements[index]

    def update(self, index: int, item: SymbolType):
        if index < 0 or index >= len(self.elements):
            raise IndexError("Index out of range")
        if self.value_type is None or isinstance(item, self.value_type):
            self.elements[index] = item
        else:
            raise ValueError(f"Cannot update {type(item)} to List")
        return self

    def append(self, item):
        if self.value_type is None or isinstance(item, self.value_type):
            self.elements.append(item)
        else:
            raise ValueError(f"Cannot append {type(item)} to List")
        return self

    def extend(self, items):
        if self.value_type is None or all(
                isinstance(item, self.value_type) for item in items.elements
        ):
            self.elements.extend(items.elements)
        else:
            raise ValueError(f"Cannot extend List with {type(items)}")
        return self

    def insert(self, index: int, item: SymbolType):
        if index < 0 or index > len(self.elements):
            raise IndexError("Index out of range")
        if self.value_type is None or isinstance(item, self.value_type):
            self.elements.insert(index, item)
        else:
            raise ValueError(f"Cannot insert {type(item)} to List")
        return self

    def delete(self, index: int):
        if index < 0 or index >= len(self.elements):
            raise IndexError("Index out of range")
        del self.elements[index]

    def length(self):
        return Number(len(self.elements))

    def index(self, item: SymbolType):
        try:
            return Number(self.elements.index(item))
        except ValueError:
            return Number(-1)


class NumberWithUnit(SymbolType):
    @classmethod
    def valid_value(cls, value: any):
        """
        Validates the value of the number with unit.
        :param value: The value to validate.
        :return: bool
        """
        return isinstance(value, NumberWithUnit)

    def __init__(self, value: Number, unit: Union[SupportedFormats, str]):
        if isinstance(value, Number) or isinstance(value, NumberWithUnit):
            value = value.value
        if not isinstance(value, (int, float)):
            raise ValueError(f"Value must be int or float, got {type(value)}")

        if not isinstance(unit, (SupportedFormats, str)):
            raise ValueError(
                f"Format must be SupportedFormats or str, got {type(unit)}"
            )

        if unit not in SupportedFormats:
            raise ValueError(
                f"Invalid format: {unit}. Supported formats are: {SupportedFormats.__dict__.values()}"
            )

        self.value = value
        self.unit = SupportedFormats(unit) if isinstance(unit, str) else unit

        self._SUPPORTED_METHODS = {
            "to_string": MethodDefinition(
                name="to_string",
                function=NumberWithUnit.to_string,
                args=[],
                return_type=String,
            ),
            "to_number": MethodDefinition(
                name="to_number",
                function=NumberWithUnit.to_number,
                args=[],
                return_type=Number,
            ),
        }

    def __repr__(self):
        return f"{self.value}{self.unit.value if isinstance(self.unit, SupportedFormats) else self.unit}"

    def __eq__(self, other):
        if isinstance(other, NumberWithUnit):
            return self.value == other.value and self.unit == other.unit
        return False

    def to_number(self):
        """
        Converts the NumberWithUnit to a Number.
        :return: Number
        """
        return self.value

    # Inside the Number class, add the method
    def to_string(self):
        return String(str(self.value) + str(self.unit.value))


class String(SymbolType):
    @classmethod
    def valid_value(cls, value: any):
        """
        Validates the value of the string.
        :param value: The value to validate.
        :return: bool
        """
        return isinstance(value, String) or isinstance(value, str)

    def __init__(self, value):
        if isinstance(value, String):
            value = value.value
        self.value = value

    def __repr__(self):
        return f"{self.value}"

    def __eq__(self, other):
        if isinstance(other, String):
            return self.value == other.value
        return False

    def upper(self):
        return String(self.value.upper())

    def lower(self):
        return String(self.value.lower())

    def length(self):
        return Number(len(self.value))

    def concat(self, other):
        if isinstance(other, str):
            return String(self.value + other)
        if isinstance(other, String):
            return String(self.value + other.value)
        raise ValueError(f"Cannot concatenate {type(other)} to String")

    def split(self, delimiter=None):
        if isinstance(delimiter, String):
            return List([i for i in list(self.value.split(delimiter.value))])
        elif isinstance(delimiter, str):
            return List([String(i) for i in list(self.value.split(delimiter))])
        elif delimiter is None:
            return List([String(i) for i in list(self.value)])
        raise ValueError(f"Cannot split String by {type(delimiter)}")

    _SUPPORTED_METHODS = {
        "upper": MethodDefinition(
            name="upper",
            function=upper,
            args=[],
            return_type=SymbolSelfType,
        ),
        "lower": MethodDefinition(
            name="lower",
            function=lower,
            args=[],
            return_type=SymbolSelfType,
        ),
        "length": MethodDefinition(
            name="length",
            function=length,
            args=[],
            return_type=Number,
        ),
        "concat": MethodDefinition(
            name="concat",
            function=concat,
            args=[
                MethodArgument(
                    name="other",
                    type_=SymbolSelfType,
                )
            ],
            return_type=SymbolSelfType,
        ),
        "split": MethodDefinition(
            name="split",
            function=split,
            args=[
                MethodArgument(name="delimiter", type_=SymbolSelfType, optional=True)
            ],
            return_type=List,
        ),
    }


class Boolean(SymbolType):
    @classmethod
    def valid_value(cls, value: any):
        """
        Validates the value of the boolean.
        :param value: The value to validate.
        :return: bool
        """
        return isinstance(value, bool) or isinstance(value, Boolean)

    def __init__(self, value):
        self.value = value

    def __repr__(self):
        return str(self.value)

    def __eq__(self, other):
        if isinstance(other, Boolean):
            return self.value == other.value
        return False



```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/__init__.py
```py

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/.gitignore
```
# Created by https://www.toptal.com/developers/gitignore/api/pythonvanilla,pycharm+all
# Edit at https://www.toptal.com/developers/gitignore?templates=pythonvanilla,pycharm+all

### PyCharm+all ###
# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# User-specific stuff
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf

# AWS User-specific
.idea/**/aws.xml

# Generated files
.idea/**/contentModel.xml

# Sensitive or high-churn files
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml

# Gradle
.idea/**/gradle.xml
.idea/**/libraries

# Gradle and Maven with auto-import
# When using Gradle or Maven with auto-import, you should exclude module files,
# since they will be recreated, and may cause churn.  Uncomment if using
# auto-import.
# .idea/artifacts
# .idea/compiler.xml
# .idea/jarRepositories.xml
# .idea/modules.xml
# .idea/*.iml
# .idea/modules
# *.iml
# *.ipr

# CMake
cmake-build-*/

# Mongo Explorer plugin
.idea/**/mongoSettings.xml

# File-based project unit
*.iws

# IntelliJ
out/

# mpeltonen/sbt-idea plugin
.idea_modules/

# JIRA plugin
atlassian-ide-plugin.xml

# Cursive Clojure plugin
.idea/replstate.xml

# SonarLint plugin
.idea/sonarlint/

# Crashlytics plugin (for Android Studio and IntelliJ)
com_crashlytics_export_strings.xml
crashlytics.properties
crashlytics-build.properties
fabric.properties

# Editor-based Rest Client
.idea/httpRequests

# Android studio 3.1+ serialized cache file
.idea/caches/build_file_checksums.ser

### PyCharm+all Patch ###
# Ignore everything but code style settings and run configurations
# that are supposed to be shared within teams.

.idea/*

!.idea/codeStyles
!.idea/runConfigurations

### PythonVanilla ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/


# End of https://www.toptal.com/developers/gitignore/api/pythonvanilla,pycharm+all

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/.python-version
```
3.12

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/config.py
```py
import enum


class Operations(enum.Enum):
    SUBTRACT = "-"
    ADD = "+"
    MULTIPLY = "*"
    DIVIDE = "/"
    POWER = "^"
    LOGIC_AND = "&&"
    LOGIC_OR = "||"
    LOGIC_NOT = "!"


class SupportedFormats(enum.Enum):
    PX = "px"
    EM = "em"
    REM = "rem"
    VW = "vw"
    VH = "vh"
    PT = "pt"
    IN = "in"
    CM = "cm"
    MM = "mm"
    DEG = "deg"
    S = "s"
    PERCENTAGE = "%"


UNINTERPRETED_KEYWORDS = [
    "inside",
    "outside",
    "above",
    "below",
    "left",
    "right",
    "top",
    "bottom",
    "before",
    "after",
    "between",
    "uppercase",
    "lowercase",
    "underline",
    "none",
    "innerShadow",
    "outerShadow",
    "shadow",
]

LANGUAGE_OPTIONS = {
    "MAX_ITERATIONS": 1000,
}

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/main.py
```py
import argparse
import copy

import token_interpreter
import zipfile
import json
import timeit

from contrib.permutation import build_theme_tree, permutate_tokensets, interpret_tokensets
from token_interpreter.symbols import NumberWithUnit, Number, List, String
from token_set_interpreter import load_themes, process_themes


def interactive():
    variables = {}
    while True:
        try:
            text = input("Enter expression: ")
            if text.lower() in ["exit", "quit"]:
                break

            if text.lower() == "set_variables":
                # Set variables interactively
                while True:
                    var_input = input(
                        "Enter variable (name=value) or 'done' to finish: "
                    )
                    if var_input.lower() == "done":
                        break
                    try:
                        name, value = var_input.split("=")
                        variables[name.strip()] = float(value.strip())
                    except ValueError:
                        print("Invalid input. Please enter in the unit name=value.")
                continue

            result = token_interpreter.parse_token(text, variables)
            print(f"Result: {result}")
        except Exception as e:
            print(f"Error: {e}")


def load_zip_to_memory(zip_path):
    files_content = {}
    IGNORED_FILES = ["__MACOSX", "._MACOSX", "__init__.py", "README.md"]
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        for file_name in zip_ref.namelist():
            if any(ignored in file_name for ignored in IGNORED_FILES):
                continue
            if file_name.endswith(".json"):
                # Read JSON files into memory
                with zip_ref.open(file_name) as file:
                    try:
                        files_content[file_name.replace(".json", "")] = json.load(file)
                    except Exception as e:
                        print(f"Error decoding JSON from {file_name}: {e}")
    return files_content


class FallbackEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, NumberWithUnit):
            return str(obj)
        elif isinstance(obj, Number):
            return str(obj)
        elif isinstance(obj, List):
            return str(obj)
        elif isinstance(obj, String):
            return str(obj)

        return super().default(obj)


if __name__ == "__main__":
    # test the interpreter interactively
    args = argparse.ArgumentParser()
    args.add_argument(
        "action",
        type=str,
        help="action to perform. Either 'interactive' or 'parse_tokenset'",
        default="interactive",
    )
    args.add_argument("--tokenset", type=str, help="path to the tokenset zip file")
    args.add_argument(
        "--output",
        type=str,
        help="name of the tokenset to parse",
        default="output.json",
    )
    args.add_argument(
        "--permutate-on",
        type=str,
        nargs='+',
        help="list of tokensets to permutate",
        default=None,
    )
    args.add_argument(
        "--permutate-to",
        type=str,
        help="name of the tokenset to permutate",
        default="permutated",
    )
    args = args.parse_args()

    if args.action in ["parse_tokenset", "permutate_tokenset"]:

        zip_path = args.tokenset
        output_path = args.output

        if zip_path is None:
            print("Please provide a path to the tokenset zip file.")
            exit(1)

        if output_path is None:
            print("Please provide a name for the output file.")
            exit(1)
        # load the zip file into memory
        files_content = load_zip_to_memory(zip_path)


        if args.action == "parse_tokenset":
            timing = timeit.default_timer()
            themes = load_themes(files_content)
            print(
                f"Loaded themes: {themes} in {timeit.default_timer() - timing:.2f} seconds"
            )
            output = process_themes(themes)
            with open(output_path, "w", encoding="utf8") as output_file:
                json.dump(
                    output, output_file, indent=4, cls=FallbackEncoder, ensure_ascii=False
                )
            print(f"Output written to {output_path}")

        elif args.action == "permutate_tokenset":
            print(f"Permutating on {args.permutate_on} to {args.permutate_to}")
            themes = build_theme_tree(
                files_content,
            )
            if not set(args.permutate_on).issubset(set(themes.keys())):
                raise ValueError(
                    f"Expected keys {args.permutate_on} in themes, but got {list(themes.keys())}"
                )

            if args.permutate_to not in themes:
                raise ValueError(
                    f"Expected key {args.permutate_to} in themes, but got {list(themes.keys())}"
                )

            permutations = permutate_tokensets(
                themes,
                copy.deepcopy(args.permutate_on),
            )


            output = {

            }
            p_ = [{"name": k, "options": list(themes[k].keys())} for k in args.permutate_on]

            for item in themes[args.permutate_to]:
                item_result = {
                    "name": item,
                    "permutations": p_,
                    "tokens": interpret_tokensets(copy.deepcopy(permutations), copy.deepcopy(p_), copy.deepcopy(themes[args.permutate_to][item]))
                }
                output[item] = item_result


            with open(output_path, "w", encoding="utf8") as output_file:
                json.dump(
                    output, output_file, indent=4, cls=FallbackEncoder, ensure_ascii=False
                )

    elif args.action == "interactive":
        interactive()

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/ouptut.json
```json
{
    "Spacious": {
        "semantic.elevation.100": [
            {
                "x": "{semantic.dimension.elevation.core.100.x}",
                "y": "{semantic.dimension.elevation.core.100.y}",
                "blur": "{semantic.dimension.elevation.core.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.100.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.100.x}",
                "y": "{semantic.dimension.elevation.cast.100.y}",
                "blur": "{semantic.dimension.elevation.cast.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.100.spread}"
            }
        ],
        "semantic.elevation.200": [
            {
                "x": "{semantic.dimension.elevation.core.200.x}",
                "y": "{semantic.dimension.elevation.core.200.y}",
                "blur": "{semantic.dimension.elevation.core.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.200.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.200.x}",
                "y": "{semantic.dimension.elevation.cast.200.y}",
                "blur": "{semantic.dimension.elevation.cast.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.200.spread}"
            }
        ],
        "semantic.elevation.300": [
            {
                "x": "{semantic.dimension.elevation.core.300.x}",
                "y": "{semantic.dimension.elevation.core.300.y}",
                "blur": "{semantic.dimension.elevation.core.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.300.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.300.x}",
                "y": "{semantic.dimension.elevation.cast.300.y}",
                "blur": "{semantic.dimension.elevation.cast.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.300.spread}"
            }
        ],
        "semantic.elevation.400": [
            {
                "x": "{semantic.dimension.elevation.core.400.x}",
                "y": "{semantic.dimension.elevation.core.400.y}",
                "blur": "{semantic.dimension.elevation.core.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.400.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.400.x}",
                "y": "{semantic.dimension.elevation.cast.400.y}",
                "blur": "{semantic.dimension.elevation.cast.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.400.spread}"
            }
        ],
        "semantic.elevation.500": [
            {
                "x": "{semantic.dimension.elevation.core.500.x}",
                "y": "{semantic.dimension.elevation.core.500.y}",
                "blur": "{semantic.dimension.elevation.core.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.500.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.500.x}",
                "y": "{semantic.dimension.elevation.cast.500.y}",
                "blur": "{semantic.dimension.elevation.cast.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.500.spread}"
            }
        ],
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.color.red.100": "#FBF1F1",
        "core.color.red.200": "#FAE2E3",
        "core.color.red.300": "#FACAC6",
        "core.color.red.400": "#FEA5AA",
        "core.color.red.500": "#FF808A",
        "core.color.red.600": "#FD4369",
        "core.color.red.700": "#DD0A42",
        "core.color.red.800": "#AA001B",
        "core.color.red.900": "#7C0007",
        "core.color.red.1000": "#5C0906",
        "core.color.red.1100": "#3F0C06",
        "core.color.red.1200": "#1F0804",
        "core.color.aqua.100": "#EEF6F6",
        "core.color.aqua.200": "#DFEFF2",
        "core.color.aqua.300": "#B2DCEA",
        "core.color.aqua.400": "#83CBE5",
        "core.color.aqua.500": "#51B6DD",
        "core.color.aqua.600": "#0E98CC",
        "core.color.aqua.700": "#0377A8",
        "core.color.aqua.800": "#005885",
        "core.color.aqua.900": "#003D63",
        "core.color.aqua.1000": "#002F4B",
        "core.color.aqua.1100": "#001E32",
        "core.color.aqua.1200": "#00111D",
        "core.color.blue.100": "#F0F7FC",
        "core.color.blue.200": "#DBEAF5",
        "core.color.blue.300": "#C3D7E9",
        "core.color.blue.400": "#ADC6DC",
        "core.color.blue.500": "#8DAFD1",
        "core.color.blue.600": "#6590BD",
        "core.color.blue.700": "#3F72B1",
        "core.color.blue.800": "#1A5393",
        "core.color.blue.900": "#003781",
        "core.color.blue.1000": "#00266d",
        "core.color.blue.1100": "#001955",
        "core.color.blue.1200": "#000f39",
        "core.color.gray.100": "#f4f4f5",
        "core.color.gray.200": "#e9eaeb",
        "core.color.gray.300": "#d7d9db",
        "core.color.gray.400": "#c0c4c7",
        "core.color.gray.500": "#a7acb1",
        "core.color.gray.600": "#888f96",
        "core.color.gray.700": "#68727b",
        "core.color.gray.800": "#495560",
        "core.color.gray.900": "#2f3c49",
        "core.color.gray.1000": "#202d3b",
        "core.color.gray.1100": "#12202e",
        "core.color.gray.1200": "#041321",
        "core.color.teal.100": "#E3F8F8",
        "core.color.teal.200": "#C2F0EF",
        "core.color.teal.300": "#8DE3E2",
        "core.color.teal.400": "#6DD2D0",
        "core.color.teal.500": "#46BAB8",
        "core.color.teal.600": "#1F9B9E",
        "core.color.teal.700": "#057C85",
        "core.color.teal.800": "#005C64",
        "core.color.teal.900": "#014248",
        "core.color.teal.1000": "#013134",
        "core.color.teal.1100": "#012325",
        "core.color.teal.1200": "#001213",
        "core.color.black": "#000000",
        "core.color.green.100": "#E7F9EB",
        "core.color.green.200": "#C0F3D1",
        "core.color.green.300": "#9AE5B4",
        "core.color.green.400": "#68D190",
        "core.color.green.500": "#34C270",
        "core.color.green.600": "#10A251",
        "core.color.green.700": "#05813C",
        "core.color.green.800": "#006028",
        "core.color.green.900": "#00450F",
        "core.color.green.1000": "#023409",
        "core.color.green.1100": "#052409",
        "core.color.green.1200": "#071108",
        "core.color.white": "#FFFFFF",
        "core.color.orange.100": "#FBF3E9",
        "core.color.orange.200": "#FCE2C8",
        "core.color.orange.300": "#FECA91",
        "core.color.orange.400": "#FFA456",
        "core.color.orange.500": "#FF8939",
        "core.color.orange.600": "#EA6308",
        "core.color.orange.700": "#C34800",
        "core.color.orange.800": "#933400",
        "core.color.orange.900": "#682500",
        "core.color.orange.1000": "#4E1D01",
        "core.color.orange.1100": "#361503",
        "core.color.orange.1200": "#1B0A03",
        "core.color.purple.100": "#FDF1F7",
        "core.color.purple.200": "#F9E1ED",
        "core.color.purple.300": "#F4C9DF",
        "core.color.purple.400": "#EEAECB",
        "core.color.purple.500": "#E78EB3",
        "core.color.purple.600": "#DC6597",
        "core.color.purple.700": "#BD417F",
        "core.color.purple.800": "#962165",
        "core.color.purple.900": "#720849",
        "core.color.purple.1000": "#5B0037",
        "core.color.purple.1100": "#430023",
        "core.color.purple.1200": "#2A0010",
        "core.color.yellow.100": "#FEF5CD",
        "core.color.yellow.200": "#FBE6A7",
        "core.color.yellow.300": "#FAD066",
        "core.color.yellow.400": "#FAB600",
        "core.color.yellow.500": "#DBA103",
        "core.color.yellow.600": "#B48602",
        "core.color.yellow.700": "#8F6A00",
        "core.color.yellow.800": "#6A4E00",
        "core.color.yellow.900": "#4B3701",
        "core.color.yellow.1000": "#382A04",
        "core.color.yellow.1100": "#281D05",
        "core.color.yellow.1200": "#130E03",
        "core.color.darkblue.100": "#f2f4f9",
        "core.color.darkblue.200": "#e4eaf3",
        "core.color.darkblue.300": "#cfd9ea",
        "core.color.darkblue.400": "#b6c5de",
        "core.color.darkblue.500": "#98accf",
        "core.color.darkblue.600": "#758fbb",
        "core.color.darkblue.700": "#5371a4",
        "core.color.darkblue.800": "#335389",
        "core.color.darkblue.900": "#1c3a6c",
        "core.color.darkblue.1000": "#122b55",
        "core.color.darkblue.1100": "#0F1F3A",
        "core.color.darkblue.1200": "#091223",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "semantic.opacity.elevation.overlay.100": 0.0,
        "avatar.icon.size.factor": 0.625,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "button.contained.scaling.active": 0.99,
        "button.plain.scaling.active": 0.99,
        "link.scaling.active": 0.99,
        "semantic.motion.easing.default.exit.y1": 0.0,
        "core.motion.duration.250": "0.25s",
        "semantic.motion.duration.medium": "0.25s",
        "radio-button.transition.duration": "0.25s",
        "checkbox.transition.duration": "0.25s",
        "accordion.chevron.transition.duration": "0.25s",
        "core.breakpoint.xl": "1280.0px",
        "core.breakpoint.max-width.2xl": 1759.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.letter-spacing.base": 0.0,
        "semantic.motion.easing.default.change.y1": 0.1,
        "avatar.xl.text.letterSpacing": 0.0,
        "semantic.opacity.elevation.overlay.500": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.2,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.motion.easing.default.enter.y2": 1.0,
        "core.breakpoint.s": 320.0,
        "semantic.motion.easing.default.change.x2": 0.25,
        "core.motion.duration.500": "0.5s",
        "semantic.motion.duration.slow": "0.5s",
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "button.plain.scaling.resting": 1.0,
        "button.contained.scaling.resting": 1.0,
        "link.scaling.resting": 1.0,
        "radio-button.scaling.resting": 1.0,
        "core.breakpoint.xs": 0.0,
        "semantic.opacity.elevation.shadow.core": 0.16,
        "semantic.color.disabled.palette.treshhold": 0.04,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "semantic.motion.duration.modifier.medium-to-fast": 1.0,
        "checkbox.transition.check.duration": "0.25s",
        "button.contained.transition.duration": "0.25s",
        "link.transition.duration": "0.25s",
        "button.plain.transition.duration": "0.25s",
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "segmented-control.s.inset.all": 4.0,
        "switch.inset.all": 4.0,
        "core.dimension.200": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.dimension.elevation.core.200.blur": 8.0,
        "semantic.spacing.dynamic-l.200": 8.0,
        "tile.stack": 8.0,
        "dropdown.flyout.offset": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.200": 8.0,
        "semantic.dimension.elevation.core.400.y": 8.0,
        "semantic.dimension.elevation.cast.200.y": 8.0,
        "tile.group.items.stack": 8.0,
        "semantic.spacing.dynamic-s.200": 8.0,
        "semantic.spacing.static.100": 4.0,
        "link.gap": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.300": 12.0,
        "semantic.spacing.dynamic-m.300": 12.0,
        "semantic.spacing.dynamic-s.300": 12.0,
        "dropdown.item.gap": 12.0,
        "semantic.font-size.utility.xs": 12.0,
        "semantic.text.utility.default.xs.fontSize": 12.0,
        "indicator.text.fontSize": 12.0,
        "semantic.text.utility.attention.xs.fontSize": 12.0,
        "core.dimension.1000": 40.0,
        "semantic.dimension.elevation.cast.400.blur": 40.0,
        "core.dimension.400": 16.0,
        "semantic.dimension.elevation.core.300.blur": 16.0,
        "semantic.dimension.elevation.cast.100.blur": 16.0,
        "callout.info.size": 16.0,
        "semantic.line-height.utility.xs": 16.0,
        "semantic.text.utility.attention.xs.lineHeight": 16.0,
        "semantic.text.utility.default.xs.lineHeight": 16.0,
        "tile.group.items.gap": 16.0,
        "semantic.dimension.elevation.core.500.y": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-m.400": 16.0,
        "semantic.dimension.elevation.cast.300.y": 16.0,
        "core.border-radius.200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "tile.gap": 16.0,
        "semantic.spacing.dynamic-s.400": 16.0,
        "semantic.spacing.dynamic-l.400": 16.0,
        "tab.item.gap": 4.0,
        "semantic.dimension.elevation.core.100.blur": 4.0,
        "core.dimension.500": 20.0,
        "semantic.dimension.elevation.cast.400.y": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "semantic.spacing.dynamic-s.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-l.1600": 64.0,
        "semantic.dimension.elevation.core.500.blur": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.dynamic-m.1600": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "semantic.spacing.adjustment.icon.s": 4.0,
        "semantic.dimension.elevation.core.300.y": 4.0,
        "text-input.stack": 4.0,
        "core.dimension.1500": 60.0,
        "semantic.dimension.elevation.cast.100.y": 4.0,
        "callout.gap": 4.0,
        "label.gap": 4.0,
        "segmented-control.m.inset.all": 4.0,
        "core.dimension.25": 1.0,
        "semantic.dimension.elevation.core.100.y": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "checkbox.border-width": 1.0,
        "radio-button.border-width": 1.0,
        "tag.border-width": 1.0,
        "button.contained.border-width": 1.0,
        "switch.border-width": 1.0,
        "toggle-button.border-width": 1.0,
        "segmented-control.border-width": 1.0,
        "input-field.border-width": 1.0,
        "tile.border-width": 1.0,
        "semantic.border-width.static": 1.0,
        "tab.border-width": 1.0,
        "indicator.border-width": 1.0,
        "divider.border-width": 1.0,
        "accordion.border-width": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.dynamic-l.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "semantic.spacing.dynamic-m.2400": 96.0,
        "semantic.spacing.dynamic-s.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.dynamic-l.1200": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-s.1200": 48.0,
        "semantic.spacing.dynamic-m.1200": 48.0,
        "semantic.dimension.elevation.cast.500.blur": 48.0,
        "button.plain.gap": 4.0,
        "core.dimension.0": 0.0,
        "semantic.dimension.elevation.core.400.spread": 0.0,
        "indicator.count.inset.vertical": 0.0,
        "semantic.dimension.elevation.core.100.spread": 0.0,
        "semantic.dimension.elevation.cast.300.spread": 0.0,
        "semantic.dimension.elevation.core.300.spread": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.dimension.elevation.cast.100.x": 0.0,
        "semantic.dimension.elevation.cast.500.spread": 0.0,
        "semantic.dimension.elevation.core.200.spread": 0.0,
        "semantic.dimension.elevation.core.100.x": 0.0,
        "semantic.dimension.elevation.core.200.x": 0.0,
        "semantic.dimension.elevation.cast.400.x": 0.0,
        "semantic.dimension.elevation.cast.200.x": 0.0,
        "semantic.dimension.elevation.cast.500.x": 0.0,
        "dropdown.flyout.gap": 0.0,
        "semantic.dimension.elevation.cast.200.spread": 0.0,
        "semantic.dimension.elevation.core.400.x": 0.0,
        "semantic.dimension.elevation.cast.100.spread": 0.0,
        "semantic.dimension.elevation.core.500.spread": 0.0,
        "semantic.dimension.elevation.cast.300.x": 0.0,
        "semantic.dimension.elevation.core.500.x": 0.0,
        "semantic.dimension.elevation.core.300.x": 0.0,
        "semantic.dimension.elevation.cast.400.spread": 0.0,
        "core.dimension.800": 32.0,
        "semantic.spacing.dynamic-m.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.dimension.elevation.core.400.blur": 32.0,
        "core.grid.column-gap.m": 32.0,
        "semantic.spacing.dynamic-s.800": 32.0,
        "core.grid.column-gap.l": 32.0,
        "accordion.l.item.header.gap": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.800": 32.0,
        "semantic.dimension.elevation.cast.300.blur": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "checkbox.border-radius": 4.0,
        "button.plain.border-radius": 4.0,
        "tab.focus.border-radius": 4.0,
        "segmented-control.button.border-radius": 4.0,
        "button.plain.focus.border-radius": 4.0,
        "link.focus.border-radius": 4.0,
        "semantic.spacing.dynamic-l.100": 4.0,
        "core.dimension.50": 2.0,
        "callout.info.inset.vertical": 2.0,
        "text-input.hint.inset.vertical": 2.0,
        "callout.inset.vertical": 2.0,
        "semantic.dimension.elevation.core.200.y": 2.0,
        "semantic.offset.focus": 2.0,
        "checkbox.focus.border-radius": 6.0,
        "button.plain.m.icon.indicator-countless.adjustment": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.selected": 2.0,
        "button.contained.s.icon.indicator-countless.adjustment": 2.0,
        "tab.item.label.gap": 2.0,
        "text-input.message.inset.vertical": 2.0,
        "dropdown.message.inset.vertical": 2.0,
        "text-area.hint.inset.vertical": 2.0,
        "text-area.message.inset.vertical": 2.0,
        "button.contained.m.icon.indicator-countless.adjustment": 2.0,
        "button.plain.s.icon.indicator-countless.adjustment": 2.0,
        "dropdown.hint.inset.vertical": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "accordion.m.item.header.gap": 24.0,
        "semantic.dimension.elevation.cast.500.y": 24.0,
        "semantic.spacing.dynamic-l.600": 24.0,
        "semantic.dimension.elevation.cast.200.blur": 24.0,
        "semantic.spacing.dynamic-m.600": 24.0,
        "semantic.spacing.static.600": 24.0,
        "semantic.spacing.dynamic-s.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-l.1400": 56.0,
        "semantic.spacing.dynamic-m.1400": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "semantic.spacing.dynamic-s.1400": 56.0,
        "core.dimension.4000": 160.0,
        "text-area.stack": 4.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "tab.item.border-width": 4.0,
        "core.dimension.700": 28.0,
        "dropdown.stack": 4.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "semantic.border-width.focus": 3.0,
        "message.gap": 4.0,
        "core.dimension.1300": 52.0,
        "segmented-control.m.gap": 4.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.spacing.dynamic-m.100": 4.0,
        "semantic.spacing.adjustment.icon.m": 4.0,
        "segmented-control.s.gap": 4.0,
        "core.dimension.900": 36.0,
        "semantic.spacing.dynamic-s.100": 4.0,
        "semantic.font-size.base": 18.0,
        "semantic.font-size.headline.6xl": 64.0,
        "semantic.text.headline.6xl.fontSize": 64.0,
        "semantic.font-size.headline.5xl": 54.0,
        "semantic.text.headline.5xl.fontSize": 54.0,
        "semantic.font-size.body.m": 18.0,
        "semantic.text.body.m.fontSize": 18.0,
        "semantic.font-size.headline.xl": 26.0,
        "semantic.text.headline.xl.fontSize": 26.0,
        "semantic.font-size.utility.m": 18.0,
        "semantic.text.utility.default.m.fontSize": 18.0,
        "semantic.text.utility.attention.m.fontSize": 18.0,
        "semantic.font-size.headline.3xl": 37.0,
        "semantic.text.headline.3xl.fontSize": 37.0,
        "semantic.font-size.headline.4xl": 45.0,
        "semantic.text.headline.4xl.fontSize": 45.0,
        "semantic.font-size.headline.m": 18.0,
        "semantic.text.headline.m.fontSize": 18.0,
        "accordion.m.title.text.opened.fontSize": 18.0,
        "accordion.m.title.text.closed.fontSize": 18.0,
        "semantic.font-size.headline.2xl": 31.0,
        "semantic.text.headline.2xl.fontSize": 31.0,
        "semantic.font-size.headline.l": 22.0,
        "accordion.l.title.text.opened.fontSize": 22.0,
        "accordion.l.title.text.closed.fontSize": 22.0,
        "semantic.text.headline.l.fontSize": 22.0,
        "semantic.font-size.body.s": 16.0,
        "semantic.text.body.s.fontSize": 16.0,
        "semantic.motion.duration.modifier.slow-to-medium": 1.0,
        "accordion.item.transition.duration": "0.5s",
        "semantic.font-weight.treshhold": 28.0,
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.opacity.elevation.overlay.300": 0.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.text.utility.attention.m.fontWeight": 700.0,
        "semantic.text.utility.attention.xs.fontWeight": 700.0,
        "semantic.text.utility.attention.s.fontWeight": 700.0,
        "accordion.m.title.text.opened.fontWeight": 700.0,
        "accordion.l.title.text.opened.fontWeight": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.line-height.cushion.utility": 4.0,
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "radio-button.scaling.active": 0.95,
        "avatar.m.text.letterSpacing": 0.0,
        "semantic.font-size.growth-ratio.utility": 1.105,
        "core.motion.duration.100": "0.1s",
        "semantic.motion.duration.fast": "0.1s",
        "semantic.motion.transition.focus.duration": "0.1s",
        "radio-button.transition.border-width.duration": "0.1s",
        "input-field.transition.duration": "0.1s",
        "accordion.title.transition.duration": "0.1s",
        "radio-button.transition.scaling.duration": "0.1s",
        "semantic.color.disabled.palette.increment": 0.0225,
        "semantic.motion.easing.default.enter.x2": 0.58,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "semantic.font-size.headline.s": 16.0,
        "semantic.text.headline.s.fontSize": 16.0,
        "icon.illustrative.contained.icon.factor": 0.55,
        "semantic.opacity.elevation.overlay.200": 0.0,
        "semantic.color.disabled.palette-inverse.treshhold": 0.3,
        "semantic.color.on-disabled.palette-inverse.increment": 0.01,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.max-width.l": 1279.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 16.0,
        "semantic.text.utility.attention.s.fontSize": 16.0,
        "semantic.text.utility.default.s.fontSize": 16.0,
        "semantic.line-height.factor": 0.92,
        "semantic.letter-spacing.treshhold": 36.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.text.body.s.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "accordion.l.title.text.closed.letterSpacing": 0.0,
        "semantic.text.headline.l.letterSpacing": 0.0,
        "accordion.l.title.text.opened.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.3xl": -0.5,
        "semantic.text.headline.3xl.letterSpacing": -0.5,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.text.utility.default.m.letterSpacing": 0.0,
        "semantic.text.utility.attention.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.text.headline.s.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.text.utility.default.xs.letterSpacing": 0.0,
        "semantic.text.utility.attention.xs.letterSpacing": 0.0,
        "indicator.text.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.text.headline.2xl.letterSpacing": 0.0,
        "semantic.text.headline.xl.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.text.headline.6xl.letterSpacing": -0.5,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.text.utility.attention.s.letterSpacing": 0.0,
        "semantic.text.utility.default.s.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.4xl": -0.5,
        "semantic.text.headline.4xl.letterSpacing": -0.5,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.text.body.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "accordion.m.title.text.opened.letterSpacing": 0.0,
        "accordion.m.title.text.closed.letterSpacing": 0.0,
        "semantic.text.headline.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.text.headline.5xl.letterSpacing": -0.5,
        "semantic.spacing.modifier.linear.factor": 0.0,
        "semantic.spacing.modifier.linear.200": 0.0,
        "accordion.l.item.gap": 48.0,
        "avatar.l.size": 64.0,
        "avatar.l.text.lineHeight": 64.0,
        "avatar.l.icon.size": 40.0,
        "avatar.l.border-radius": 32.0,
        "icon.illustrative.plain.m.size": 56.0,
        "breakpoint-m.tab.gap": 32.0,
        "icon.illustrative.contained.m.surface.size": 80.0,
        "icon.illustrative.contained.m.border-radius": 40.0,
        "icon.illustrative.contained.m.size": 44.0,
        "radio-button.group.items.gap": 32.0,
        "checkbox.group.items.gap": 32.0,
        "icon.illustrative.contained.s.surface.size": 64.0,
        "icon.illustrative.contained.s.size": 35.2,
        "icon.illustrative.contained.s.border-radius": 32.0,
        "toggle-button.inset.horizontal": 28.0,
        "accordion.m.item.gap": 32.0,
        "semantic.spacing.modifier.linear.300": 0.0,
        "avatar.xl.size": 80.0,
        "avatar.xl.text.lineHeight": 80.0,
        "avatar.xl.border-radius": 40.0,
        "avatar.xl.icon.size": 50.0,
        "semantic.spacing.modifier.linear.100": 0.0,
        "icon.illustrative.plain.s.size": 40.0,
        "input-field.inset.horizontal": 16.0,
        "tile.horizontal.inset.vertical": 14.0,
        "tile.vertical.inset.horizontal": 16.0,
        "tile.horizontal.icon.inset.horizontal": 16.0,
        "segmented-control.m.button.icon.inset.all": 10.0,
        "segmented-control.m.button.inset.horizontal": 16.0,
        "button.contained.s.inset.horizontal": 16.0,
        "button.contained.s.icon-before.inset.end": 16.0,
        "button.contained.s.icon-after.inset.start": 16.0,
        "button.contained.s.icon-before.inset.start": 12.0,
        "button.contained.s.icon-after.inset.end": 12.0,
        "accordion.l.item.inset.vertical": 24.0,
        "radio-button.group.stack": 16.0,
        "toggle-button.group.items.gap": 16.0,
        "segmented-control.m.button.inset.vertical": 10.0,
        "dropdown.item.inset.horizontal": 16.0,
        "dropdown.flyout.inset.vertical": 8.0,
        "radio-button.group.items.stack": 16.0,
        "toggle-button.inset.vertical": 14.0,
        "tile.horizontal.inset.horizontal": 16.0,
        "checkbox.group.items.stack": 16.0,
        "tile.group.stack": 16.0,
        "accordion.m.item.inset.vertical": 16.0,
        "tile.horizontal.icon.inset.top": 24.0,
        "tile.horizontal.icon.inset.bottom": 14.0,
        "tile.vertical.inset.vertical": 14.0,
        "toggle-button.group.stack": 16.0,
        "checkbox.group.stack": 16.0,
        "button.contained.m.inset.horizontal": 24.0,
        "button.contained.m.icon-after.inset.start": 24.0,
        "button.contained.m.icon-after.inset.end": 20.0,
        "button.contained.m.icon-before.inset.end": 24.0,
        "button.contained.m.icon-before.inset.start": 20.0,
        "indicator.icon.xl.size": 24.0,
        "indicator.icon.xl.border-radius": 12.0,
        "segmented-control.s.button.inset.horizontal": 12.0,
        "tab.gap": 24.0,
        "semantic.spacing.modifier.linear.50": 0.0,
        "indicator.icon.s.size": 12.0,
        "indicator.icon.s.border-radius": 6.0,
        "segmented-control.s.button.icon.inset.all": 4.0,
        "indicator.icon.l.size": 20.0,
        "indicator.icon.l.border-radius": 10.0,
        "tile.control.offset.end": 12.0,
        "segmented-control.s.button.inset.vertical": 4.0,
        "tile.control.offset.top": 12.0,
        "segmented-control.m.button.gap": 8.0,
        "segmented-control.s.button.gap": 8.0,
        "info.gap": 8.0,
        "indicator.icon.m.size": 16.0,
        "indicator.icon.m.border-radius": 8.0,
        "semantic.border-radius.surface.l": 16.0,
        "semantic.spacing.label.stack": 4.0,
        "checkbox.label.stack": 4.0,
        "radio-button.group.label.stack": 4.0,
        "checkbox.group.label.stack": 4.0,
        "switch.label.stack": 4.0,
        "radio-button.label.stack": 4.0,
        "toggle-button.group.label.stack": 4.0,
        "tile.group.label.stack": 4.0,
        "tile.label.stack": 4.0,
        "button.contained.gap": 8.0,
        "input-field.gap": 8.0,
        "semantic.spacing.modifier.linear.25": 0.0,
        "semantic.border-radius.action.m": 8.0,
        "dropdown.focus.border-radius": 8.0,
        "button.contained.border-radius": 8.0,
        "toggle-button.focus.border-radius": 10.0,
        "button.contained.focus.border-radius": 10.0,
        "segmented-control.focus.border-radius": 10.0,
        "segmented-control.border-radius": 8.0,
        "input-field.focus.border-radius": 8.0,
        "toggle-button.border-radius": 8.0,
        "tile.border-radius": 8.0,
        "tile.focus.border-radius": 10.0,
        "input-field.border-radius": 8.0,
        "semantic.border-radius.surface.m": 8.0,
        "dropdown.border-radius": 8.0,
        "semantic.motion.easing.default.enter.x1": 0.0,
        "semantic.spacing.modifier.clamp-smaller.factor": 0.0,
        "semantic.spacing.modifier.clamp-smaller.200": 0.0,
        "tile.horizontal.icon.size": 40.0,
        "semantic.spacing.modifier.clamp-smaller.25": 0.0,
        "indicator.count.inset.horizontal": 4.0,
        "semantic.spacing.modifier.clamp-smaller.100": 0.0,
        "checkbox.gap": 12.0,
        "dropdown.item.inset.vertical": 12.0,
        "tile.vertical.icon.size": 32.0,
        "tab.item.inset.bottom": 12.0,
        "tag.gap": 8.0,
        "radio-button.gap": 12.0,
        "switch.gap": 12.0,
        "semantic.spacing.modifier.clamp-smaller.300": 0.0,
        "semantic.spacing.modifier.clamp-smaller.50": 0.0,
        "indicator.count.min-width": 16.0,
        "info.size": 18.0,
        "tag.deletable.inset.vertical": 6.0,
        "callout.info.inset.end": 4.0,
        "indicator.countless.size": 10.0,
        "indicator.countless.border-radius": 5.0,
        "tag.inset.horizontal": 12.0,
        "tag.selected.inset.vertical": 6.0,
        "tag.selected.inset.end": 12.0,
        "tag.deletable.inset.end": 8.0,
        "tag.selected.inset.start": 8.0,
        "indicator.count.height": 16.0,
        "indicator.text.lineHeight": 16.0,
        "indicator.count.border-radius": 8.0,
        "callout.info.inset.start": 10.0,
        "tag.inset.vertical": 6.0,
        "tag.deletable.inset.start": 12.0,
        "callout.inset.horizontal": 10.0,
        "badge.inset.horizontal": 10.0,
        "semantic.color.on-disabled.palette.treshhold": 0.4,
        "core.font-weight.100": 400.0,
        "accordion.m.title.text.closed.fontWeight": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.text.body.m.fontWeight": 400.0,
        "semantic.text.body.l.fontWeight": 400.0,
        "semantic.text.body.s.fontWeight": 400.0,
        "accordion.l.title.text.closed.fontWeight": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.text.utility.default.m.fontWeight": 400.0,
        "semantic.text.utility.default.xs.fontWeight": 400.0,
        "semantic.text.utility.default.s.fontWeight": 400.0,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.line-height.body.m": 24.0,
        "semantic.text.body.m.lineHeight": 24.0,
        "semantic.line-height.body.s": 22.0,
        "semantic.text.body.s.lineHeight": 22.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.l": 28.0,
        "accordion.l.title.text.opened.lineHeight": 28.0,
        "semantic.text.headline.l.lineHeight": 28.0,
        "accordion.l.title.text.closed.lineHeight": 28.0,
        "semantic.line-height.headline.2xl": 36.0,
        "semantic.text.headline.2xl.lineHeight": 36.0,
        "semantic.line-height.headline.5xl": 56.0,
        "semantic.text.headline.5xl.lineHeight": 56.0,
        "semantic.line-height.headline.xl": 30.0,
        "semantic.text.headline.xl.lineHeight": 30.0,
        "semantic.line-height.headline.m": 24.0,
        "accordion.m.title.text.closed.lineHeight": 24.0,
        "accordion.m.title.text.opened.lineHeight": 24.0,
        "semantic.text.headline.m.lineHeight": 24.0,
        "semantic.line-height.headline.4xl": 48.0,
        "semantic.text.headline.4xl.lineHeight": 48.0,
        "semantic.line-height.headline.s": 22.0,
        "semantic.text.headline.s.lineHeight": 22.0,
        "semantic.line-height.headline.6xl": 66.0,
        "semantic.text.headline.6xl.lineHeight": 66.0,
        "semantic.line-height.headline.3xl": 42.0,
        "semantic.text.headline.3xl.lineHeight": 42.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 20.0,
        "semantic.text.utility.attention.s.lineHeight": 20.0,
        "semantic.size.content.s": 20.0,
        "checkbox.icon.size": 20.0,
        "tag.height": 32.0,
        "tag.border-radius": 16.0,
        "tag.focus.border-radius": 18.0,
        "link.s.icon.size": 20.0,
        "tag.icon.size": 20.0,
        "semantic.size.component.m": 48.0,
        "button.contained.m.inset.vertical": 14.0,
        "button.contained.m.icon.inset.all": 14.0,
        "button.contained.m.icon-before.inset.vertical": 14.0,
        "button.contained.m.icon-after.inset.vertical": 14.0,
        "input-field.min-height": 48.0,
        "avatar.m.size": 48.0,
        "avatar.m.border-radius": 24.0,
        "avatar.m.icon.size": 30.0,
        "avatar.m.text.lineHeight": 48.0,
        "icon.functional.s.size": 20.0,
        "button.contained.icon.size": 20.0,
        "button.contained.m.icon.indicator-countless.offset.bottom": 26.0,
        "button.contained.m.icon.indicator-count.offset.bottom": 24.0,
        "button.contained.m.icon.indicator-count.offset.start": 24.0,
        "button.contained.m.icon.indicator-countless.offset.start": 26.0,
        "semantic.size.component.s": 36.0,
        "avatar.s.size": 36.0,
        "avatar.s.border-radius": 18.0,
        "avatar.s.icon.size": 22.5,
        "avatar.s.text.lineHeight": 36.0,
        "message.icon.size": 20.0,
        "button.plain.s.icon.size": 20.0,
        "button.plain.s.icon.indicator-count.offset.start": 10.0,
        "button.plain.s.icon.indicator-countless.offset.start": 12.0,
        "button.plain.s.icon.indicator-countless.offset.bottom": 12.0,
        "button.plain.s.icon.indicator-count.offset.bottom": 10.0,
        "semantic.text.utility.default.s.lineHeight": 20.0,
        "button.contained.s.inset.vertical": 8.0,
        "button.contained.s.icon-after.inset.vertical": 8.0,
        "button.contained.s.icon.inset.all": 8.0,
        "button.contained.s.icon.indicator-countless.offset.bottom": 20.0,
        "button.contained.s.icon.indicator-count.offset.start": 18.0,
        "button.contained.s.icon.indicator-countless.offset.start": 20.0,
        "button.contained.s.icon.indicator-count.offset.bottom": 18.0,
        "button.contained.s.icon-before.inset.vertical": 8.0,
        "semantic.line-height.utility.m": 24.0,
        "semantic.text.utility.default.m.lineHeight": 24.0,
        "semantic.size.content.m": 24.0,
        "link.m.icon.size": 24.0,
        "button.plain.m.icon.size": 24.0,
        "button.plain.m.icon.indicator-countless.offset.bottom": 14.0,
        "button.plain.m.icon.indicator-count.offset.bottom": 12.0,
        "button.plain.m.icon.indicator-countless.offset.start": 14.0,
        "button.plain.m.icon.indicator-count.offset.start": 12.0,
        "badge.height": 24.0,
        "badge.border-radius": 12.0,
        "badge.inset.vertical": 2.0,
        "switch.height": 24.0,
        "switch.border-radius": 12.0,
        "switch.focus.border-radius": 14.0,
        "switch.knob.size": 16.0,
        "switch.knob.border-radius": 8.0,
        "icon.functional.m.size": 24.0,
        "callout.height": 24.0,
        "callout.border-radius": 12.0,
        "checkbox.size": 24.0,
        "radio-button.size": 24.0,
        "radio-button.border-radius": 12.0,
        "radio-button.focus.border-radius": 14.0,
        "radio-button.selected.border-width": 7.0,
        "badge.character.width": 24.0,
        "tab.mask.fade.width": 24.0,
        "tab.item.icon.size": 24.0,
        "switch.width": 48.0,
        "tab.mask.inset.horizontal": 24.0,
        "semantic.text.utility.attention.m.lineHeight": 24.0,
        "input-field.inset.vertical": 12.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 20.0,
        "semantic.text.body.l.fontSize": 20.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.text.body.l.letterSpacing": 0.0,
        "semantic.line-height.body.l": 26.0,
        "semantic.text.body.l.lineHeight": 26.0,
        "core.motion.duration.0": "0.0s",
        "semantic.opacity.elevation.overlay.400": 0.0,
        "semantic.color.disabled.palette-inverse.increment": 0.025,
        "semantic.motion.easing.default.enter.y1": 0.0,
        "semantic.motion.easing.default.enter": "0.0, 0.0, 0.58, 1.0",
        "semantic.motion.easing.default.change.x1": 0.25,
        "semantic.opacity.elevation.shadow.cast": 0.12,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.text.headline.m.fontWeight": 700.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.text.headline.l.fontWeight": 700.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.text.headline.xl.fontWeight": 700.0,
        "semantic.font-weight.headline.2xl": 600.0,
        "semantic.text.headline.2xl.fontWeight": 600.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.text.headline.4xl.fontWeight": 600.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.text.headline.6xl.fontWeight": 600.0,
        "semantic.font-weight.headline.s": 700.0,
        "semantic.text.headline.s.fontWeight": 700.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.text.headline.3xl.fontWeight": 600.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.text.headline.5xl.fontWeight": 600.0,
        "avatar.xl.text.fontWeight": 600.0,
        "avatar.s.text.fontWeight": 600.0,
        "avatar.l.text.fontWeight": 600.0,
        "indicator.text.fontWeight": 600.0,
        "avatar.m.text.fontWeight": 600.0,
        "avatar.s.text.letterSpacing": 0.0,
        "core.breakpoint.m": 704.0,
        "semantic.motion.easing.default.exit.x2": 1.0,
        "semantic.color.on-disabled.palette-inverse.treshhold": 0.15,
        "semantic.motion.easing.default.exit.x1": 0.42,
        "core.breakpoint.max-width.s": 703.0,
        "semantic.color.on-disabled.palette.increment": 0.02,
        "avatar.l.text.letterSpacing": 0.0,
        "semantic.motion.easing.default.exit.y2": 1.0,
        "semantic.motion.easing.default.exit": "0.42, 0.0, 1.0, 1.0",
        "semantic.motion.duration.modifier.slow-to-fast": 1.0,
        "avatar.font-size.factor": 0.45,
        "avatar.xl.font-size": 36.0,
        "avatar.xl.text.fontSize": 36.0,
        "avatar.m.font-size": 21.6,
        "avatar.m.text.fontSize": 21.6,
        "avatar.l.font-size": 28.8,
        "avatar.l.text.fontSize": 28.8,
        "avatar.s.font-size": 16.2,
        "avatar.s.text.fontSize": 16.2,
        "core.breakpoint.2xl": "1472.0px",
        "semantic.motion.easing.default.change.y2": 1.0,
        "semantic.motion.easing.default.change": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.title.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.border-width.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.item.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "checkbox.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "checkbox.transition.check.easing": "0.25, 0.1, 0.25, 1.0",
        "button.contained.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.scaling.easing": "0.25, 0.1, 0.25, 1.0",
        "link.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "button.plain.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.chevron.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "semantic.motion.transition.focus.easing": "0.25, 0.1, 0.25, 1.0",
        "input-field.transition.easing": "0.25, 0.1, 0.25, 1.0"
    },
    "Compact": {
        "semantic.elevation.100": [
            {
                "x": "{semantic.dimension.elevation.core.100.x}",
                "y": "{semantic.dimension.elevation.core.100.y}",
                "blur": "{semantic.dimension.elevation.core.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.100.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.100.x}",
                "y": "{semantic.dimension.elevation.cast.100.y}",
                "blur": "{semantic.dimension.elevation.cast.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.100.spread}"
            }
        ],
        "semantic.elevation.200": [
            {
                "x": "{semantic.dimension.elevation.core.200.x}",
                "y": "{semantic.dimension.elevation.core.200.y}",
                "blur": "{semantic.dimension.elevation.core.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.200.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.200.x}",
                "y": "{semantic.dimension.elevation.cast.200.y}",
                "blur": "{semantic.dimension.elevation.cast.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.200.spread}"
            }
        ],
        "semantic.elevation.300": [
            {
                "x": "{semantic.dimension.elevation.core.300.x}",
                "y": "{semantic.dimension.elevation.core.300.y}",
                "blur": "{semantic.dimension.elevation.core.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.300.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.300.x}",
                "y": "{semantic.dimension.elevation.cast.300.y}",
                "blur": "{semantic.dimension.elevation.cast.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.300.spread}"
            }
        ],
        "semantic.elevation.400": [
            {
                "x": "{semantic.dimension.elevation.core.400.x}",
                "y": "{semantic.dimension.elevation.core.400.y}",
                "blur": "{semantic.dimension.elevation.core.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.400.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.400.x}",
                "y": "{semantic.dimension.elevation.cast.400.y}",
                "blur": "{semantic.dimension.elevation.cast.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.400.spread}"
            }
        ],
        "semantic.elevation.500": [
            {
                "x": "{semantic.dimension.elevation.core.500.x}",
                "y": "{semantic.dimension.elevation.core.500.y}",
                "blur": "{semantic.dimension.elevation.core.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.500.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.500.x}",
                "y": "{semantic.dimension.elevation.cast.500.y}",
                "blur": "{semantic.dimension.elevation.cast.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.500.spread}"
            }
        ],
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.color.red.100": "#FBF1F1",
        "core.color.red.200": "#FAE2E3",
        "core.color.red.300": "#FACAC6",
        "core.color.red.400": "#FEA5AA",
        "core.color.red.500": "#FF808A",
        "core.color.red.600": "#FD4369",
        "core.color.red.700": "#DD0A42",
        "core.color.red.800": "#AA001B",
        "core.color.red.900": "#7C0007",
        "core.color.red.1000": "#5C0906",
        "core.color.red.1100": "#3F0C06",
        "core.color.red.1200": "#1F0804",
        "core.color.aqua.100": "#EEF6F6",
        "core.color.aqua.200": "#DFEFF2",
        "core.color.aqua.300": "#B2DCEA",
        "core.color.aqua.400": "#83CBE5",
        "core.color.aqua.500": "#51B6DD",
        "core.color.aqua.600": "#0E98CC",
        "core.color.aqua.700": "#0377A8",
        "core.color.aqua.800": "#005885",
        "core.color.aqua.900": "#003D63",
        "core.color.aqua.1000": "#002F4B",
        "core.color.aqua.1100": "#001E32",
        "core.color.aqua.1200": "#00111D",
        "core.color.blue.100": "#F0F7FC",
        "core.color.blue.200": "#DBEAF5",
        "core.color.blue.300": "#C3D7E9",
        "core.color.blue.400": "#ADC6DC",
        "core.color.blue.500": "#8DAFD1",
        "core.color.blue.600": "#6590BD",
        "core.color.blue.700": "#3F72B1",
        "core.color.blue.800": "#1A5393",
        "core.color.blue.900": "#003781",
        "core.color.blue.1000": "#00266d",
        "core.color.blue.1100": "#001955",
        "core.color.blue.1200": "#000f39",
        "core.color.gray.100": "#f4f4f5",
        "core.color.gray.200": "#e9eaeb",
        "core.color.gray.300": "#d7d9db",
        "core.color.gray.400": "#c0c4c7",
        "core.color.gray.500": "#a7acb1",
        "core.color.gray.600": "#888f96",
        "core.color.gray.700": "#68727b",
        "core.color.gray.800": "#495560",
        "core.color.gray.900": "#2f3c49",
        "core.color.gray.1000": "#202d3b",
        "core.color.gray.1100": "#12202e",
        "core.color.gray.1200": "#041321",
        "core.color.teal.100": "#E3F8F8",
        "core.color.teal.200": "#C2F0EF",
        "core.color.teal.300": "#8DE3E2",
        "core.color.teal.400": "#6DD2D0",
        "core.color.teal.500": "#46BAB8",
        "core.color.teal.600": "#1F9B9E",
        "core.color.teal.700": "#057C85",
        "core.color.teal.800": "#005C64",
        "core.color.teal.900": "#014248",
        "core.color.teal.1000": "#013134",
        "core.color.teal.1100": "#012325",
        "core.color.teal.1200": "#001213",
        "core.color.black": "#000000",
        "core.color.green.100": "#E7F9EB",
        "core.color.green.200": "#C0F3D1",
        "core.color.green.300": "#9AE5B4",
        "core.color.green.400": "#68D190",
        "core.color.green.500": "#34C270",
        "core.color.green.600": "#10A251",
        "core.color.green.700": "#05813C",
        "core.color.green.800": "#006028",
        "core.color.green.900": "#00450F",
        "core.color.green.1000": "#023409",
        "core.color.green.1100": "#052409",
        "core.color.green.1200": "#071108",
        "core.color.white": "#FFFFFF",
        "core.color.orange.100": "#FBF3E9",
        "core.color.orange.200": "#FCE2C8",
        "core.color.orange.300": "#FECA91",
        "core.color.orange.400": "#FFA456",
        "core.color.orange.500": "#FF8939",
        "core.color.orange.600": "#EA6308",
        "core.color.orange.700": "#C34800",
        "core.color.orange.800": "#933400",
        "core.color.orange.900": "#682500",
        "core.color.orange.1000": "#4E1D01",
        "core.color.orange.1100": "#361503",
        "core.color.orange.1200": "#1B0A03",
        "core.color.purple.100": "#FDF1F7",
        "core.color.purple.200": "#F9E1ED",
        "core.color.purple.300": "#F4C9DF",
        "core.color.purple.400": "#EEAECB",
        "core.color.purple.500": "#E78EB3",
        "core.color.purple.600": "#DC6597",
        "core.color.purple.700": "#BD417F",
        "core.color.purple.800": "#962165",
        "core.color.purple.900": "#720849",
        "core.color.purple.1000": "#5B0037",
        "core.color.purple.1100": "#430023",
        "core.color.purple.1200": "#2A0010",
        "core.color.yellow.100": "#FEF5CD",
        "core.color.yellow.200": "#FBE6A7",
        "core.color.yellow.300": "#FAD066",
        "core.color.yellow.400": "#FAB600",
        "core.color.yellow.500": "#DBA103",
        "core.color.yellow.600": "#B48602",
        "core.color.yellow.700": "#8F6A00",
        "core.color.yellow.800": "#6A4E00",
        "core.color.yellow.900": "#4B3701",
        "core.color.yellow.1000": "#382A04",
        "core.color.yellow.1100": "#281D05",
        "core.color.yellow.1200": "#130E03",
        "core.color.darkblue.100": "#f2f4f9",
        "core.color.darkblue.200": "#e4eaf3",
        "core.color.darkblue.300": "#cfd9ea",
        "core.color.darkblue.400": "#b6c5de",
        "core.color.darkblue.500": "#98accf",
        "core.color.darkblue.600": "#758fbb",
        "core.color.darkblue.700": "#5371a4",
        "core.color.darkblue.800": "#335389",
        "core.color.darkblue.900": "#1c3a6c",
        "core.color.darkblue.1000": "#122b55",
        "core.color.darkblue.1100": "#0F1F3A",
        "core.color.darkblue.1200": "#091223",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "semantic.opacity.elevation.overlay.100": 0.0,
        "avatar.icon.size.factor": 0.625,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "button.contained.scaling.active": 0.99,
        "button.plain.scaling.active": 0.99,
        "link.scaling.active": 0.99,
        "semantic.motion.easing.default.exit.y1": 0.0,
        "core.motion.duration.250": "0.25s",
        "semantic.motion.duration.medium": "0.25s",
        "radio-button.transition.duration": "0.25s",
        "checkbox.transition.duration": "0.25s",
        "accordion.chevron.transition.duration": "0.25s",
        "core.breakpoint.xl": "1280.0px",
        "core.breakpoint.max-width.2xl": 1759.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.letter-spacing.base": 0.0,
        "semantic.motion.easing.default.change.y1": 0.1,
        "avatar.xl.text.letterSpacing": 0.0,
        "semantic.opacity.elevation.overlay.500": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.15,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.motion.easing.default.enter.y2": 1.0,
        "core.breakpoint.s": 320.0,
        "semantic.motion.easing.default.change.x2": 0.25,
        "core.motion.duration.500": "0.5s",
        "semantic.motion.duration.slow": "0.5s",
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "button.plain.scaling.resting": 1.0,
        "button.contained.scaling.resting": 1.0,
        "link.scaling.resting": 1.0,
        "radio-button.scaling.resting": 1.0,
        "core.breakpoint.xs": 0.0,
        "semantic.opacity.elevation.shadow.core": 0.16,
        "semantic.color.disabled.palette.treshhold": 0.04,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "semantic.motion.duration.modifier.medium-to-fast": 1.0,
        "checkbox.transition.check.duration": "0.25s",
        "button.contained.transition.duration": "0.25s",
        "link.transition.duration": "0.25s",
        "button.plain.transition.duration": "0.25s",
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "semantic.text.utility.default.xs.fontSize": 10.0,
        "indicator.text.fontSize": 10.0,
        "semantic.text.utility.attention.xs.fontSize": 10.0,
        "segmented-control.s.inset.all": 4.0,
        "switch.inset.all": 4.0,
        "core.dimension.200": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.dimension.elevation.core.200.blur": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "tile.stack": 8.0,
        "dropdown.flyout.offset": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.dimension.elevation.core.400.y": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.dimension.elevation.cast.200.y": 8.0,
        "tile.group.items.stack": 8.0,
        "semantic.spacing.static.100": 4.0,
        "link.gap": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "dropdown.item.gap": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "core.dimension.1000": 40.0,
        "semantic.dimension.elevation.cast.400.blur": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "semantic.dimension.elevation.core.300.blur": 16.0,
        "semantic.dimension.elevation.cast.100.blur": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "callout.info.size": 16.0,
        "tile.group.items.gap": 16.0,
        "semantic.dimension.elevation.core.500.y": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.dimension.elevation.cast.300.y": 16.0,
        "core.border-radius.200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "tile.gap": 16.0,
        "tab.item.gap": 4.0,
        "semantic.dimension.elevation.core.100.blur": 4.0,
        "core.dimension.500": 20.0,
        "semantic.dimension.elevation.cast.400.y": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "semantic.dimension.elevation.core.500.blur": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "semantic.dimension.elevation.core.300.y": 4.0,
        "text-input.stack": 4.0,
        "core.dimension.1500": 60.0,
        "semantic.dimension.elevation.cast.100.y": 4.0,
        "callout.gap": 4.0,
        "segmented-control.s.gap": 4.0,
        "label.gap": 4.0,
        "segmented-control.m.inset.all": 4.0,
        "core.dimension.25": 1.0,
        "semantic.dimension.elevation.core.100.y": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "checkbox.border-width": 1.0,
        "radio-button.border-width": 1.0,
        "tag.border-width": 1.0,
        "button.contained.border-width": 1.0,
        "switch.border-width": 1.0,
        "toggle-button.border-width": 1.0,
        "segmented-control.border-width": 1.0,
        "input-field.border-width": 1.0,
        "tile.border-width": 1.0,
        "semantic.border-width.static": 1.0,
        "tab.border-width": 1.0,
        "indicator.border-width": 1.0,
        "divider.border-width": 1.0,
        "accordion.border-width": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "semantic.dimension.elevation.cast.500.blur": 48.0,
        "button.plain.gap": 4.0,
        "core.dimension.0": 0.0,
        "semantic.dimension.elevation.core.400.spread": 0.0,
        "indicator.count.inset.vertical": 0.0,
        "semantic.dimension.elevation.core.100.spread": 0.0,
        "semantic.dimension.elevation.cast.300.spread": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.dimension.elevation.core.300.spread": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.dimension.elevation.cast.100.x": 0.0,
        "semantic.dimension.elevation.cast.500.spread": 0.0,
        "semantic.dimension.elevation.core.200.spread": 0.0,
        "semantic.dimension.elevation.core.100.x": 0.0,
        "semantic.dimension.elevation.core.200.x": 0.0,
        "semantic.dimension.elevation.cast.400.x": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "semantic.dimension.elevation.cast.200.x": 0.0,
        "semantic.dimension.elevation.cast.500.x": 0.0,
        "dropdown.flyout.gap": 0.0,
        "semantic.dimension.elevation.cast.200.spread": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.dimension.elevation.core.400.x": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.dimension.elevation.cast.100.spread": 0.0,
        "semantic.dimension.elevation.core.500.spread": 0.0,
        "semantic.dimension.elevation.cast.300.x": 0.0,
        "semantic.dimension.elevation.core.500.x": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.dimension.elevation.core.300.x": 0.0,
        "semantic.dimension.elevation.cast.400.spread": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.dimension.elevation.core.400.blur": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "accordion.l.item.header.gap": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "semantic.dimension.elevation.cast.300.blur": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "checkbox.border-radius": 4.0,
        "button.plain.border-radius": 4.0,
        "tab.focus.border-radius": 4.0,
        "segmented-control.button.border-radius": 4.0,
        "button.plain.focus.border-radius": 4.0,
        "link.focus.border-radius": 4.0,
        "core.dimension.50": 2.0,
        "callout.info.inset.vertical": 2.0,
        "text-input.hint.inset.vertical": 2.0,
        "callout.inset.vertical": 2.0,
        "semantic.dimension.elevation.core.200.y": 2.0,
        "semantic.offset.focus": 2.0,
        "checkbox.focus.border-radius": 6.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "button.plain.m.icon.indicator-countless.adjustment": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "button.contained.s.icon.indicator-countless.adjustment": 2.0,
        "tab.item.label.gap": 2.0,
        "text-input.message.inset.vertical": 2.0,
        "dropdown.message.inset.vertical": 2.0,
        "text-area.hint.inset.vertical": 2.0,
        "text-area.message.inset.vertical": 2.0,
        "button.contained.m.icon.indicator-countless.adjustment": 2.0,
        "button.plain.s.icon.indicator-countless.adjustment": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "dropdown.hint.inset.vertical": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "accordion.m.item.header.gap": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.dimension.elevation.cast.500.y": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.dimension.elevation.cast.200.blur": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "text-area.stack": 4.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "tab.item.border-width": 4.0,
        "core.dimension.700": 28.0,
        "dropdown.stack": 4.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "message.gap": 4.0,
        "core.dimension.1300": 52.0,
        "segmented-control.m.gap": 4.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.text.utility.attention.xs.lineHeight": 14.0,
        "semantic.text.utility.default.xs.lineHeight": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.6xl": 43.0,
        "semantic.text.headline.6xl.fontSize": 43.0,
        "semantic.font-size.headline.5xl": 37.0,
        "semantic.text.headline.5xl.fontSize": 37.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.text.body.m.fontSize": 16.0,
        "semantic.font-size.headline.xl": 21.0,
        "semantic.text.headline.xl.fontSize": 21.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.text.utility.default.m.fontSize": 16.0,
        "semantic.text.utility.attention.m.fontSize": 16.0,
        "semantic.font-size.headline.3xl": 28.0,
        "semantic.text.headline.3xl.fontSize": 28.0,
        "semantic.font-size.headline.4xl": 32.0,
        "semantic.text.headline.4xl.fontSize": 32.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.text.headline.m.fontSize": 16.0,
        "accordion.m.title.text.opened.fontSize": 16.0,
        "accordion.m.title.text.closed.fontSize": 16.0,
        "semantic.font-size.headline.2xl": 24.0,
        "semantic.text.headline.2xl.fontSize": 24.0,
        "semantic.font-size.headline.l": 18.0,
        "accordion.l.title.text.opened.fontSize": 18.0,
        "accordion.l.title.text.closed.fontSize": 18.0,
        "semantic.text.headline.l.fontSize": 18.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.text.body.s.fontSize": 14.0,
        "semantic.motion.duration.modifier.slow-to-medium": 1.0,
        "accordion.item.transition.duration": "0.5s",
        "semantic.font-weight.treshhold": 28.0,
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.opacity.elevation.overlay.300": 0.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.text.utility.attention.m.fontWeight": 700.0,
        "semantic.text.utility.attention.xs.fontWeight": 700.0,
        "semantic.text.utility.attention.s.fontWeight": 700.0,
        "accordion.m.title.text.opened.fontWeight": 700.0,
        "accordion.l.title.text.opened.fontWeight": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "radio-button.scaling.active": 0.95,
        "avatar.m.text.letterSpacing": 0.0,
        "semantic.font-size.growth-ratio.utility": 1.105,
        "core.motion.duration.100": "0.1s",
        "semantic.motion.duration.fast": "0.1s",
        "semantic.motion.transition.focus.duration": "0.1s",
        "radio-button.transition.border-width.duration": "0.1s",
        "input-field.transition.duration": "0.1s",
        "accordion.title.transition.duration": "0.1s",
        "radio-button.transition.scaling.duration": "0.1s",
        "semantic.color.disabled.palette.increment": 0.0225,
        "semantic.motion.easing.default.enter.x2": 0.58,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "semantic.font-size.headline.s": 14.0,
        "semantic.text.headline.s.fontSize": 14.0,
        "icon.illustrative.contained.icon.factor": 0.55,
        "semantic.opacity.elevation.overlay.200": 0.0,
        "semantic.color.disabled.palette-inverse.treshhold": 0.3,
        "semantic.color.on-disabled.palette-inverse.increment": 0.01,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.max-width.l": 1279.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.text.utility.attention.s.fontSize": 14.0,
        "semantic.text.utility.default.s.fontSize": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.letter-spacing.treshhold": 36.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.text.body.s.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "accordion.l.title.text.closed.letterSpacing": 0.0,
        "semantic.text.headline.l.letterSpacing": 0.0,
        "accordion.l.title.text.opened.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.text.headline.3xl.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.text.utility.default.m.letterSpacing": 0.0,
        "semantic.text.utility.attention.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.text.headline.s.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.text.utility.default.xs.letterSpacing": 0.0,
        "semantic.text.utility.attention.xs.letterSpacing": 0.0,
        "indicator.text.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.text.headline.2xl.letterSpacing": 0.0,
        "semantic.text.headline.xl.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.text.headline.6xl.letterSpacing": -0.5,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.text.utility.attention.s.letterSpacing": 0.0,
        "semantic.text.utility.default.s.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.4xl": 0.0,
        "semantic.text.headline.4xl.letterSpacing": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.text.body.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "accordion.m.title.text.opened.letterSpacing": 0.0,
        "accordion.m.title.text.closed.letterSpacing": 0.0,
        "semantic.text.headline.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.text.headline.5xl.letterSpacing": -0.5,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "accordion.l.item.gap": 40.0,
        "avatar.l.size": 56.0,
        "avatar.l.text.lineHeight": 56.0,
        "avatar.l.icon.size": 35.0,
        "avatar.l.border-radius": 28.0,
        "icon.illustrative.plain.m.size": 48.0,
        "breakpoint-m.tab.gap": 24.0,
        "icon.illustrative.contained.m.surface.size": 72.0,
        "icon.illustrative.contained.m.border-radius": 36.0,
        "icon.illustrative.contained.m.size": 39.6,
        "radio-button.group.items.gap": 24.0,
        "checkbox.group.items.gap": 24.0,
        "icon.illustrative.contained.s.surface.size": 56.0,
        "icon.illustrative.contained.s.size": 30.800000000000004,
        "icon.illustrative.contained.s.border-radius": 28.0,
        "toggle-button.inset.horizontal": 20.0,
        "accordion.m.item.gap": 24.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "avatar.xl.size": 68.0,
        "avatar.xl.text.lineHeight": 68.0,
        "avatar.xl.border-radius": 34.0,
        "avatar.xl.icon.size": 42.5,
        "semantic.spacing.modifier.linear.100": 4.0,
        "icon.illustrative.plain.s.size": 36.0,
        "input-field.inset.horizontal": 12.0,
        "tile.horizontal.inset.vertical": 10.0,
        "tile.vertical.inset.horizontal": 12.0,
        "tile.horizontal.icon.inset.horizontal": 12.0,
        "segmented-control.m.button.icon.inset.all": 6.0,
        "segmented-control.m.button.inset.horizontal": 12.0,
        "button.contained.s.inset.horizontal": 12.0,
        "button.contained.s.icon-before.inset.end": 12.0,
        "button.contained.s.icon-after.inset.start": 12.0,
        "button.contained.s.icon-before.inset.start": 10.0,
        "button.contained.s.icon-after.inset.end": 10.0,
        "accordion.l.item.inset.vertical": 20.0,
        "radio-button.group.stack": 12.0,
        "toggle-button.group.items.gap": 12.0,
        "segmented-control.m.button.inset.vertical": 6.0,
        "dropdown.item.inset.horizontal": 12.0,
        "dropdown.flyout.inset.vertical": 6.0,
        "radio-button.group.items.stack": 12.0,
        "toggle-button.inset.vertical": 10.0,
        "tile.horizontal.inset.horizontal": 12.0,
        "checkbox.group.items.stack": 12.0,
        "tile.group.stack": 12.0,
        "accordion.m.item.inset.vertical": 12.0,
        "tile.horizontal.icon.inset.top": 20.0,
        "tile.horizontal.icon.inset.bottom": 10.0,
        "tile.vertical.inset.vertical": 10.0,
        "toggle-button.group.stack": 12.0,
        "checkbox.group.stack": 12.0,
        "button.contained.m.inset.horizontal": 20.0,
        "button.contained.m.icon-after.inset.start": 20.0,
        "button.contained.m.icon-after.inset.end": 18.0,
        "button.contained.m.icon-before.inset.end": 20.0,
        "button.contained.m.icon-before.inset.start": 18.0,
        "indicator.icon.xl.size": 20.0,
        "indicator.icon.xl.border-radius": 10.0,
        "segmented-control.s.button.inset.horizontal": 8.0,
        "tab.gap": 20.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "indicator.icon.s.size": 10.0,
        "indicator.icon.s.border-radius": 5.0,
        "segmented-control.s.button.icon.inset.all": 2.0,
        "indicator.icon.l.size": 18.0,
        "indicator.icon.l.border-radius": 9.0,
        "tile.control.offset.end": 10.0,
        "segmented-control.s.button.inset.vertical": 2.0,
        "tile.control.offset.top": 10.0,
        "segmented-control.m.button.gap": 6.0,
        "segmented-control.s.button.gap": 6.0,
        "info.gap": 6.0,
        "indicator.icon.m.size": 14.0,
        "indicator.icon.m.border-radius": 7.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.label.stack": 2.0,
        "checkbox.label.stack": 2.0,
        "radio-button.group.label.stack": 2.0,
        "checkbox.group.label.stack": 2.0,
        "switch.label.stack": 2.0,
        "radio-button.label.stack": 2.0,
        "toggle-button.group.label.stack": 2.0,
        "tile.group.label.stack": 2.0,
        "tile.label.stack": 2.0,
        "button.contained.gap": 6.0,
        "input-field.gap": 6.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "dropdown.focus.border-radius": 7.0,
        "button.contained.border-radius": 7.0,
        "toggle-button.focus.border-radius": 9.0,
        "button.contained.focus.border-radius": 9.0,
        "segmented-control.focus.border-radius": 9.0,
        "segmented-control.border-radius": 7.0,
        "input-field.focus.border-radius": 7.0,
        "toggle-button.border-radius": 7.0,
        "tile.border-radius": 7.0,
        "tile.focus.border-radius": 9.0,
        "input-field.border-radius": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "dropdown.border-radius": 7.0,
        "semantic.motion.easing.default.enter.x1": 0.0,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "tile.horizontal.icon.size": 32.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "indicator.count.inset.horizontal": 3.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "checkbox.gap": 8.0,
        "dropdown.item.inset.vertical": 8.0,
        "tile.vertical.icon.size": 28.0,
        "tab.item.inset.bottom": 8.0,
        "tag.gap": 4.0,
        "radio-button.gap": 8.0,
        "switch.gap": 8.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "indicator.count.min-width": 14.0,
        "info.size": 16.0,
        "tag.deletable.inset.vertical": 4.0,
        "callout.info.inset.end": 2.0,
        "indicator.countless.size": 8.0,
        "indicator.countless.border-radius": 4.0,
        "tag.inset.horizontal": 10.0,
        "tag.selected.inset.vertical": 4.0,
        "tag.selected.inset.end": 10.0,
        "tag.deletable.inset.end": 8.0,
        "tag.selected.inset.start": 8.0,
        "indicator.count.height": 14.0,
        "indicator.text.lineHeight": 14.0,
        "indicator.count.border-radius": 7.0,
        "callout.info.inset.start": 8.0,
        "tag.inset.vertical": 4.0,
        "tag.deletable.inset.start": 10.0,
        "callout.inset.horizontal": 8.0,
        "badge.inset.horizontal": 8.0,
        "semantic.color.on-disabled.palette.treshhold": 0.4,
        "core.font-weight.100": 400.0,
        "accordion.m.title.text.closed.fontWeight": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.text.body.m.fontWeight": 400.0,
        "semantic.text.body.l.fontWeight": 400.0,
        "semantic.text.body.s.fontWeight": 400.0,
        "accordion.l.title.text.closed.fontWeight": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.text.utility.default.m.fontWeight": 400.0,
        "semantic.text.utility.default.xs.fontWeight": 400.0,
        "semantic.text.utility.default.s.fontWeight": 400.0,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.text.body.m.lineHeight": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.text.body.s.lineHeight": 20.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.l": 24.0,
        "accordion.l.title.text.opened.lineHeight": 24.0,
        "semantic.text.headline.l.lineHeight": 24.0,
        "accordion.l.title.text.closed.lineHeight": 24.0,
        "semantic.line-height.headline.2xl": 30.0,
        "semantic.text.headline.2xl.lineHeight": 30.0,
        "semantic.line-height.headline.5xl": 42.0,
        "semantic.text.headline.5xl.lineHeight": 42.0,
        "semantic.line-height.headline.xl": 26.0,
        "semantic.text.headline.xl.lineHeight": 26.0,
        "semantic.line-height.headline.m": 22.0,
        "accordion.m.title.text.closed.lineHeight": 22.0,
        "accordion.m.title.text.opened.lineHeight": 22.0,
        "semantic.text.headline.m.lineHeight": 22.0,
        "semantic.line-height.headline.4xl": 36.0,
        "semantic.text.headline.4xl.lineHeight": 36.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.text.headline.s.lineHeight": 20.0,
        "semantic.line-height.headline.6xl": 46.0,
        "semantic.text.headline.6xl.lineHeight": 46.0,
        "semantic.line-height.headline.3xl": 32.0,
        "semantic.text.headline.3xl.lineHeight": 32.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.text.utility.attention.s.lineHeight": 16.0,
        "semantic.size.content.s": 16.0,
        "checkbox.icon.size": 16.0,
        "tag.height": 24.0,
        "tag.border-radius": 12.0,
        "tag.focus.border-radius": 14.0,
        "link.s.icon.size": 16.0,
        "tag.icon.size": 16.0,
        "semantic.size.component.m": 40.0,
        "button.contained.m.inset.vertical": 12.0,
        "button.contained.m.icon.inset.all": 12.0,
        "button.contained.m.icon-before.inset.vertical": 12.0,
        "button.contained.m.icon-after.inset.vertical": 12.0,
        "input-field.min-height": 40.0,
        "avatar.m.size": 40.0,
        "avatar.m.border-radius": 20.0,
        "avatar.m.icon.size": 25.0,
        "avatar.m.text.lineHeight": 40.0,
        "icon.functional.s.size": 16.0,
        "button.contained.icon.size": 16.0,
        "button.contained.m.icon.indicator-countless.offset.bottom": 22.0,
        "button.contained.m.icon.indicator-count.offset.bottom": 20.0,
        "button.contained.m.icon.indicator-count.offset.start": 20.0,
        "button.contained.m.icon.indicator-countless.offset.start": 22.0,
        "semantic.size.component.s": 28.0,
        "avatar.s.size": 28.0,
        "avatar.s.border-radius": 14.0,
        "avatar.s.icon.size": 17.5,
        "avatar.s.text.lineHeight": 28.0,
        "message.icon.size": 16.0,
        "button.plain.s.icon.size": 16.0,
        "button.plain.s.icon.indicator-count.offset.start": 8.0,
        "button.plain.s.icon.indicator-countless.offset.start": 10.0,
        "button.plain.s.icon.indicator-countless.offset.bottom": 10.0,
        "button.plain.s.icon.indicator-count.offset.bottom": 8.0,
        "semantic.text.utility.default.s.lineHeight": 16.0,
        "button.contained.s.inset.vertical": 6.0,
        "button.contained.s.icon-after.inset.vertical": 6.0,
        "button.contained.s.icon.inset.all": 6.0,
        "button.contained.s.icon.indicator-countless.offset.bottom": 16.0,
        "button.contained.s.icon.indicator-count.offset.start": 14.0,
        "button.contained.s.icon.indicator-countless.offset.start": 16.0,
        "button.contained.s.icon.indicator-count.offset.bottom": 14.0,
        "button.contained.s.icon-before.inset.vertical": 6.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.text.utility.default.m.lineHeight": 20.0,
        "semantic.size.content.m": 20.0,
        "link.m.icon.size": 20.0,
        "button.plain.m.icon.size": 20.0,
        "button.plain.m.icon.indicator-countless.offset.bottom": 12.0,
        "button.plain.m.icon.indicator-count.offset.bottom": 10.0,
        "button.plain.m.icon.indicator-countless.offset.start": 12.0,
        "button.plain.m.icon.indicator-count.offset.start": 10.0,
        "badge.height": 20.0,
        "badge.border-radius": 10.0,
        "badge.inset.vertical": 2.0,
        "switch.height": 20.0,
        "switch.border-radius": 10.0,
        "switch.focus.border-radius": 12.0,
        "switch.knob.size": 12.0,
        "switch.knob.border-radius": 6.0,
        "icon.functional.m.size": 20.0,
        "callout.height": 20.0,
        "callout.border-radius": 10.0,
        "checkbox.size": 20.0,
        "radio-button.size": 20.0,
        "radio-button.border-radius": 10.0,
        "radio-button.focus.border-radius": 12.0,
        "radio-button.selected.border-width": 6.0,
        "badge.character.width": 20.0,
        "tab.mask.fade.width": 20.0,
        "tab.item.icon.size": 20.0,
        "switch.width": 40.0,
        "tab.mask.inset.horizontal": 20.0,
        "semantic.text.utility.attention.m.lineHeight": 20.0,
        "input-field.inset.vertical": 10.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.text.body.l.fontSize": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.text.body.l.letterSpacing": 0.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.text.body.l.lineHeight": 24.0,
        "core.motion.duration.0": "0.0s",
        "semantic.opacity.elevation.overlay.400": 0.0,
        "semantic.color.disabled.palette-inverse.increment": 0.025,
        "semantic.motion.easing.default.enter.y1": 0.0,
        "semantic.motion.easing.default.enter": "0.0, 0.0, 0.58, 1.0",
        "semantic.motion.easing.default.change.x1": 0.25,
        "semantic.opacity.elevation.shadow.cast": 0.12,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.text.headline.m.fontWeight": 700.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.text.headline.l.fontWeight": 700.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.text.headline.xl.fontWeight": 700.0,
        "semantic.font-weight.headline.2xl": 700.0,
        "semantic.text.headline.2xl.fontWeight": 700.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.text.headline.4xl.fontWeight": 600.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.text.headline.6xl.fontWeight": 600.0,
        "semantic.font-weight.headline.s": 700.0,
        "semantic.text.headline.s.fontWeight": 700.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.text.headline.3xl.fontWeight": 600.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.text.headline.5xl.fontWeight": 600.0,
        "avatar.xl.text.fontWeight": 600.0,
        "avatar.s.text.fontWeight": 600.0,
        "avatar.l.text.fontWeight": 600.0,
        "indicator.text.fontWeight": 600.0,
        "avatar.m.text.fontWeight": 600.0,
        "avatar.s.text.letterSpacing": 0.0,
        "core.breakpoint.m": 704.0,
        "semantic.motion.easing.default.exit.x2": 1.0,
        "semantic.color.on-disabled.palette-inverse.treshhold": 0.15,
        "semantic.motion.easing.default.exit.x1": 0.42,
        "core.breakpoint.max-width.s": 703.0,
        "semantic.color.on-disabled.palette.increment": 0.02,
        "avatar.l.text.letterSpacing": 0.0,
        "semantic.motion.easing.default.exit.y2": 1.0,
        "semantic.motion.easing.default.exit": "0.42, 0.0, 1.0, 1.0",
        "semantic.motion.duration.modifier.slow-to-fast": 1.0,
        "avatar.font-size.factor": 0.45,
        "avatar.xl.font-size": 30.6,
        "avatar.xl.text.fontSize": 30.6,
        "avatar.m.font-size": 18.0,
        "avatar.m.text.fontSize": 18.0,
        "avatar.l.font-size": 25.2,
        "avatar.l.text.fontSize": 25.2,
        "avatar.s.font-size": 12.6,
        "avatar.s.text.fontSize": 12.6,
        "core.breakpoint.2xl": "1472.0px",
        "semantic.motion.easing.default.change.y2": 1.0,
        "semantic.motion.easing.default.change": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.title.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.border-width.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.item.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "checkbox.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "checkbox.transition.check.easing": "0.25, 0.1, 0.25, 1.0",
        "button.contained.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.scaling.easing": "0.25, 0.1, 0.25, 1.0",
        "link.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "button.plain.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.chevron.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "semantic.motion.transition.focus.easing": "0.25, 0.1, 0.25, 1.0",
        "input-field.transition.easing": "0.25, 0.1, 0.25, 1.0"
    },
    "Dense": {
        "semantic.elevation.100": [
            {
                "x": "{semantic.dimension.elevation.core.100.x}",
                "y": "{semantic.dimension.elevation.core.100.y}",
                "blur": "{semantic.dimension.elevation.core.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.100.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.100.x}",
                "y": "{semantic.dimension.elevation.cast.100.y}",
                "blur": "{semantic.dimension.elevation.cast.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.100.spread}"
            }
        ],
        "semantic.elevation.200": [
            {
                "x": "{semantic.dimension.elevation.core.200.x}",
                "y": "{semantic.dimension.elevation.core.200.y}",
                "blur": "{semantic.dimension.elevation.core.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.200.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.200.x}",
                "y": "{semantic.dimension.elevation.cast.200.y}",
                "blur": "{semantic.dimension.elevation.cast.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.200.spread}"
            }
        ],
        "semantic.elevation.300": [
            {
                "x": "{semantic.dimension.elevation.core.300.x}",
                "y": "{semantic.dimension.elevation.core.300.y}",
                "blur": "{semantic.dimension.elevation.core.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.300.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.300.x}",
                "y": "{semantic.dimension.elevation.cast.300.y}",
                "blur": "{semantic.dimension.elevation.cast.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.300.spread}"
            }
        ],
        "semantic.elevation.400": [
            {
                "x": "{semantic.dimension.elevation.core.400.x}",
                "y": "{semantic.dimension.elevation.core.400.y}",
                "blur": "{semantic.dimension.elevation.core.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.400.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.400.x}",
                "y": "{semantic.dimension.elevation.cast.400.y}",
                "blur": "{semantic.dimension.elevation.cast.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.400.spread}"
            }
        ],
        "semantic.elevation.500": [
            {
                "x": "{semantic.dimension.elevation.core.500.x}",
                "y": "{semantic.dimension.elevation.core.500.y}",
                "blur": "{semantic.dimension.elevation.core.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.500.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.500.x}",
                "y": "{semantic.dimension.elevation.cast.500.y}",
                "blur": "{semantic.dimension.elevation.cast.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.500.spread}"
            }
        ],
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.color.red.100": "#FBF1F1",
        "core.color.red.200": "#FAE2E3",
        "core.color.red.300": "#FACAC6",
        "core.color.red.400": "#FEA5AA",
        "core.color.red.500": "#FF808A",
        "core.color.red.600": "#FD4369",
        "core.color.red.700": "#DD0A42",
        "core.color.red.800": "#AA001B",
        "core.color.red.900": "#7C0007",
        "core.color.red.1000": "#5C0906",
        "core.color.red.1100": "#3F0C06",
        "core.color.red.1200": "#1F0804",
        "core.color.aqua.100": "#EEF6F6",
        "core.color.aqua.200": "#DFEFF2",
        "core.color.aqua.300": "#B2DCEA",
        "core.color.aqua.400": "#83CBE5",
        "core.color.aqua.500": "#51B6DD",
        "core.color.aqua.600": "#0E98CC",
        "core.color.aqua.700": "#0377A8",
        "core.color.aqua.800": "#005885",
        "core.color.aqua.900": "#003D63",
        "core.color.aqua.1000": "#002F4B",
        "core.color.aqua.1100": "#001E32",
        "core.color.aqua.1200": "#00111D",
        "core.color.blue.100": "#F0F7FC",
        "core.color.blue.200": "#DBEAF5",
        "core.color.blue.300": "#C3D7E9",
        "core.color.blue.400": "#ADC6DC",
        "core.color.blue.500": "#8DAFD1",
        "core.color.blue.600": "#6590BD",
        "core.color.blue.700": "#3F72B1",
        "core.color.blue.800": "#1A5393",
        "core.color.blue.900": "#003781",
        "core.color.blue.1000": "#00266d",
        "core.color.blue.1100": "#001955",
        "core.color.blue.1200": "#000f39",
        "core.color.gray.100": "#f4f4f5",
        "core.color.gray.200": "#e9eaeb",
        "core.color.gray.300": "#d7d9db",
        "core.color.gray.400": "#c0c4c7",
        "core.color.gray.500": "#a7acb1",
        "core.color.gray.600": "#888f96",
        "core.color.gray.700": "#68727b",
        "core.color.gray.800": "#495560",
        "core.color.gray.900": "#2f3c49",
        "core.color.gray.1000": "#202d3b",
        "core.color.gray.1100": "#12202e",
        "core.color.gray.1200": "#041321",
        "core.color.teal.100": "#E3F8F8",
        "core.color.teal.200": "#C2F0EF",
        "core.color.teal.300": "#8DE3E2",
        "core.color.teal.400": "#6DD2D0",
        "core.color.teal.500": "#46BAB8",
        "core.color.teal.600": "#1F9B9E",
        "core.color.teal.700": "#057C85",
        "core.color.teal.800": "#005C64",
        "core.color.teal.900": "#014248",
        "core.color.teal.1000": "#013134",
        "core.color.teal.1100": "#012325",
        "core.color.teal.1200": "#001213",
        "core.color.black": "#000000",
        "core.color.green.100": "#E7F9EB",
        "core.color.green.200": "#C0F3D1",
        "core.color.green.300": "#9AE5B4",
        "core.color.green.400": "#68D190",
        "core.color.green.500": "#34C270",
        "core.color.green.600": "#10A251",
        "core.color.green.700": "#05813C",
        "core.color.green.800": "#006028",
        "core.color.green.900": "#00450F",
        "core.color.green.1000": "#023409",
        "core.color.green.1100": "#052409",
        "core.color.green.1200": "#071108",
        "core.color.white": "#FFFFFF",
        "core.color.orange.100": "#FBF3E9",
        "core.color.orange.200": "#FCE2C8",
        "core.color.orange.300": "#FECA91",
        "core.color.orange.400": "#FFA456",
        "core.color.orange.500": "#FF8939",
        "core.color.orange.600": "#EA6308",
        "core.color.orange.700": "#C34800",
        "core.color.orange.800": "#933400",
        "core.color.orange.900": "#682500",
        "core.color.orange.1000": "#4E1D01",
        "core.color.orange.1100": "#361503",
        "core.color.orange.1200": "#1B0A03",
        "core.color.purple.100": "#FDF1F7",
        "core.color.purple.200": "#F9E1ED",
        "core.color.purple.300": "#F4C9DF",
        "core.color.purple.400": "#EEAECB",
        "core.color.purple.500": "#E78EB3",
        "core.color.purple.600": "#DC6597",
        "core.color.purple.700": "#BD417F",
        "core.color.purple.800": "#962165",
        "core.color.purple.900": "#720849",
        "core.color.purple.1000": "#5B0037",
        "core.color.purple.1100": "#430023",
        "core.color.purple.1200": "#2A0010",
        "core.color.yellow.100": "#FEF5CD",
        "core.color.yellow.200": "#FBE6A7",
        "core.color.yellow.300": "#FAD066",
        "core.color.yellow.400": "#FAB600",
        "core.color.yellow.500": "#DBA103",
        "core.color.yellow.600": "#B48602",
        "core.color.yellow.700": "#8F6A00",
        "core.color.yellow.800": "#6A4E00",
        "core.color.yellow.900": "#4B3701",
        "core.color.yellow.1000": "#382A04",
        "core.color.yellow.1100": "#281D05",
        "core.color.yellow.1200": "#130E03",
        "core.color.darkblue.100": "#f2f4f9",
        "core.color.darkblue.200": "#e4eaf3",
        "core.color.darkblue.300": "#cfd9ea",
        "core.color.darkblue.400": "#b6c5de",
        "core.color.darkblue.500": "#98accf",
        "core.color.darkblue.600": "#758fbb",
        "core.color.darkblue.700": "#5371a4",
        "core.color.darkblue.800": "#335389",
        "core.color.darkblue.900": "#1c3a6c",
        "core.color.darkblue.1000": "#122b55",
        "core.color.darkblue.1100": "#0F1F3A",
        "core.color.darkblue.1200": "#091223",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "semantic.opacity.elevation.overlay.100": 0.0,
        "avatar.icon.size.factor": 0.625,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "button.contained.scaling.active": 0.99,
        "button.plain.scaling.active": 0.99,
        "link.scaling.active": 0.99,
        "semantic.motion.easing.default.exit.y1": 0.0,
        "core.motion.duration.250": "0.25s",
        "semantic.motion.duration.medium": "0.25s",
        "radio-button.transition.duration": "0.25s",
        "checkbox.transition.duration": "0.25s",
        "accordion.chevron.transition.duration": "0.25s",
        "core.breakpoint.xl": "1280.0px",
        "core.breakpoint.max-width.2xl": 1759.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.letter-spacing.base": 0.0,
        "semantic.motion.easing.default.change.y1": 0.1,
        "avatar.xl.text.letterSpacing": 0.0,
        "semantic.opacity.elevation.overlay.500": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.15,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.motion.easing.default.enter.y2": 1.0,
        "core.breakpoint.s": 320.0,
        "semantic.motion.easing.default.change.x2": 0.25,
        "core.motion.duration.500": "0.5s",
        "semantic.motion.duration.slow": "0.5s",
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "button.plain.scaling.resting": 1.0,
        "button.contained.scaling.resting": 1.0,
        "link.scaling.resting": 1.0,
        "radio-button.scaling.resting": 1.0,
        "core.breakpoint.xs": 0.0,
        "semantic.opacity.elevation.shadow.core": 0.16,
        "semantic.color.disabled.palette.treshhold": 0.04,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "semantic.motion.duration.modifier.medium-to-fast": 1.0,
        "checkbox.transition.check.duration": "0.25s",
        "button.contained.transition.duration": "0.25s",
        "link.transition.duration": "0.25s",
        "button.plain.transition.duration": "0.25s",
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "semantic.text.utility.default.xs.fontSize": 10.0,
        "indicator.text.fontSize": 10.0,
        "semantic.text.utility.attention.xs.fontSize": 10.0,
        "segmented-control.s.inset.all": 4.0,
        "switch.inset.all": 4.0,
        "core.dimension.200": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.dimension.elevation.core.200.blur": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "tile.stack": 8.0,
        "dropdown.flyout.offset": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.dimension.elevation.core.400.y": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.dimension.elevation.cast.200.y": 8.0,
        "tile.group.items.stack": 8.0,
        "semantic.spacing.static.100": 4.0,
        "link.gap": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "dropdown.item.gap": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "core.dimension.1000": 40.0,
        "semantic.dimension.elevation.cast.400.blur": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "semantic.dimension.elevation.core.300.blur": 16.0,
        "semantic.dimension.elevation.cast.100.blur": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "callout.info.size": 16.0,
        "tile.group.items.gap": 16.0,
        "semantic.dimension.elevation.core.500.y": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.dimension.elevation.cast.300.y": 16.0,
        "core.border-radius.200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "tile.gap": 16.0,
        "tab.item.gap": 4.0,
        "semantic.dimension.elevation.core.100.blur": 4.0,
        "core.dimension.500": 20.0,
        "semantic.dimension.elevation.cast.400.y": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "semantic.dimension.elevation.core.500.blur": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "semantic.dimension.elevation.core.300.y": 4.0,
        "text-input.stack": 4.0,
        "core.dimension.1500": 60.0,
        "semantic.dimension.elevation.cast.100.y": 4.0,
        "callout.gap": 4.0,
        "segmented-control.s.gap": 4.0,
        "label.gap": 4.0,
        "segmented-control.m.inset.all": 4.0,
        "core.dimension.25": 1.0,
        "semantic.dimension.elevation.core.100.y": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "checkbox.border-width": 1.0,
        "radio-button.border-width": 1.0,
        "tag.border-width": 1.0,
        "button.contained.border-width": 1.0,
        "switch.border-width": 1.0,
        "toggle-button.border-width": 1.0,
        "segmented-control.border-width": 1.0,
        "input-field.border-width": 1.0,
        "tile.border-width": 1.0,
        "semantic.border-width.static": 1.0,
        "tab.border-width": 1.0,
        "indicator.border-width": 1.0,
        "divider.border-width": 1.0,
        "accordion.border-width": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "semantic.dimension.elevation.cast.500.blur": 48.0,
        "button.plain.gap": 4.0,
        "core.dimension.0": 0.0,
        "semantic.dimension.elevation.core.400.spread": 0.0,
        "indicator.count.inset.vertical": 0.0,
        "semantic.dimension.elevation.core.100.spread": 0.0,
        "semantic.dimension.elevation.cast.300.spread": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.dimension.elevation.core.300.spread": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.dimension.elevation.cast.100.x": 0.0,
        "semantic.dimension.elevation.cast.500.spread": 0.0,
        "semantic.dimension.elevation.core.200.spread": 0.0,
        "semantic.dimension.elevation.core.100.x": 0.0,
        "semantic.dimension.elevation.core.200.x": 0.0,
        "semantic.dimension.elevation.cast.400.x": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "semantic.dimension.elevation.cast.200.x": 0.0,
        "semantic.dimension.elevation.cast.500.x": 0.0,
        "dropdown.flyout.gap": 0.0,
        "semantic.dimension.elevation.cast.200.spread": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.dimension.elevation.core.400.x": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.dimension.elevation.cast.100.spread": 0.0,
        "semantic.dimension.elevation.core.500.spread": 0.0,
        "semantic.dimension.elevation.cast.300.x": 0.0,
        "semantic.dimension.elevation.core.500.x": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.dimension.elevation.core.300.x": 0.0,
        "semantic.dimension.elevation.cast.400.spread": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.dimension.elevation.core.400.blur": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "accordion.l.item.header.gap": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "semantic.dimension.elevation.cast.300.blur": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "checkbox.border-radius": 4.0,
        "button.plain.border-radius": 4.0,
        "tab.focus.border-radius": 4.0,
        "segmented-control.button.border-radius": 4.0,
        "button.plain.focus.border-radius": 4.0,
        "link.focus.border-radius": 4.0,
        "core.dimension.50": 2.0,
        "callout.info.inset.vertical": 2.0,
        "text-input.hint.inset.vertical": 2.0,
        "callout.inset.vertical": 2.0,
        "semantic.dimension.elevation.core.200.y": 2.0,
        "semantic.offset.focus": 2.0,
        "checkbox.focus.border-radius": 6.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "button.plain.m.icon.indicator-countless.adjustment": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "button.contained.s.icon.indicator-countless.adjustment": 2.0,
        "tab.item.label.gap": 2.0,
        "text-input.message.inset.vertical": 2.0,
        "dropdown.message.inset.vertical": 2.0,
        "text-area.hint.inset.vertical": 2.0,
        "text-area.message.inset.vertical": 2.0,
        "button.contained.m.icon.indicator-countless.adjustment": 2.0,
        "button.plain.s.icon.indicator-countless.adjustment": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "dropdown.hint.inset.vertical": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "accordion.m.item.header.gap": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.dimension.elevation.cast.500.y": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.dimension.elevation.cast.200.blur": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "text-area.stack": 4.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "tab.item.border-width": 4.0,
        "core.dimension.700": 28.0,
        "dropdown.stack": 4.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "message.gap": 4.0,
        "core.dimension.1300": 52.0,
        "segmented-control.m.gap": 4.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.text.utility.attention.xs.lineHeight": 14.0,
        "semantic.text.utility.default.xs.lineHeight": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.6xl": 43.0,
        "semantic.text.headline.6xl.fontSize": 43.0,
        "semantic.font-size.headline.5xl": 37.0,
        "semantic.text.headline.5xl.fontSize": 37.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.text.body.m.fontSize": 16.0,
        "semantic.font-size.headline.xl": 21.0,
        "semantic.text.headline.xl.fontSize": 21.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.text.utility.default.m.fontSize": 16.0,
        "semantic.text.utility.attention.m.fontSize": 16.0,
        "semantic.font-size.headline.3xl": 28.0,
        "semantic.text.headline.3xl.fontSize": 28.0,
        "semantic.font-size.headline.4xl": 32.0,
        "semantic.text.headline.4xl.fontSize": 32.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.text.headline.m.fontSize": 16.0,
        "accordion.m.title.text.opened.fontSize": 16.0,
        "accordion.m.title.text.closed.fontSize": 16.0,
        "semantic.font-size.headline.2xl": 24.0,
        "semantic.text.headline.2xl.fontSize": 24.0,
        "semantic.font-size.headline.l": 18.0,
        "accordion.l.title.text.opened.fontSize": 18.0,
        "accordion.l.title.text.closed.fontSize": 18.0,
        "semantic.text.headline.l.fontSize": 18.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.text.body.s.fontSize": 14.0,
        "semantic.motion.duration.modifier.slow-to-medium": 1.0,
        "accordion.item.transition.duration": "0.5s",
        "semantic.font-weight.treshhold": 28.0,
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.opacity.elevation.overlay.300": 0.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.text.utility.attention.m.fontWeight": 700.0,
        "semantic.text.utility.attention.xs.fontWeight": 700.0,
        "semantic.text.utility.attention.s.fontWeight": 700.0,
        "accordion.m.title.text.opened.fontWeight": 700.0,
        "accordion.l.title.text.opened.fontWeight": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "radio-button.scaling.active": 0.95,
        "avatar.m.text.letterSpacing": 0.0,
        "semantic.font-size.growth-ratio.utility": 1.105,
        "core.motion.duration.100": "0.1s",
        "semantic.motion.duration.fast": "0.1s",
        "semantic.motion.transition.focus.duration": "0.1s",
        "radio-button.transition.border-width.duration": "0.1s",
        "input-field.transition.duration": "0.1s",
        "accordion.title.transition.duration": "0.1s",
        "radio-button.transition.scaling.duration": "0.1s",
        "semantic.color.disabled.palette.increment": 0.0225,
        "semantic.motion.easing.default.enter.x2": 0.58,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "semantic.font-size.headline.s": 14.0,
        "semantic.text.headline.s.fontSize": 14.0,
        "icon.illustrative.contained.icon.factor": 0.55,
        "semantic.opacity.elevation.overlay.200": 0.0,
        "semantic.color.disabled.palette-inverse.treshhold": 0.3,
        "semantic.color.on-disabled.palette-inverse.increment": 0.01,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.max-width.l": 1279.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.text.utility.attention.s.fontSize": 14.0,
        "semantic.text.utility.default.s.fontSize": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.letter-spacing.treshhold": 36.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.text.body.s.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "accordion.l.title.text.closed.letterSpacing": 0.0,
        "semantic.text.headline.l.letterSpacing": 0.0,
        "accordion.l.title.text.opened.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.text.headline.3xl.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.text.utility.default.m.letterSpacing": 0.0,
        "semantic.text.utility.attention.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.text.headline.s.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.text.utility.default.xs.letterSpacing": 0.0,
        "semantic.text.utility.attention.xs.letterSpacing": 0.0,
        "indicator.text.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.text.headline.2xl.letterSpacing": 0.0,
        "semantic.text.headline.xl.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.text.headline.6xl.letterSpacing": -0.5,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.text.utility.attention.s.letterSpacing": 0.0,
        "semantic.text.utility.default.s.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.4xl": 0.0,
        "semantic.text.headline.4xl.letterSpacing": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.text.body.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "accordion.m.title.text.opened.letterSpacing": 0.0,
        "accordion.m.title.text.closed.letterSpacing": 0.0,
        "semantic.text.headline.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.text.headline.5xl.letterSpacing": -0.5,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "accordion.l.item.gap": 40.0,
        "avatar.l.size": 56.0,
        "avatar.l.text.lineHeight": 56.0,
        "avatar.l.icon.size": 35.0,
        "avatar.l.border-radius": 28.0,
        "icon.illustrative.plain.m.size": 48.0,
        "breakpoint-m.tab.gap": 24.0,
        "icon.illustrative.contained.m.surface.size": 72.0,
        "icon.illustrative.contained.m.border-radius": 36.0,
        "icon.illustrative.contained.m.size": 39.6,
        "radio-button.group.items.gap": 24.0,
        "checkbox.group.items.gap": 24.0,
        "icon.illustrative.contained.s.surface.size": 56.0,
        "icon.illustrative.contained.s.size": 30.800000000000004,
        "icon.illustrative.contained.s.border-radius": 28.0,
        "toggle-button.inset.horizontal": 20.0,
        "accordion.m.item.gap": 24.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "avatar.xl.size": 68.0,
        "avatar.xl.text.lineHeight": 68.0,
        "avatar.xl.border-radius": 34.0,
        "avatar.xl.icon.size": 42.5,
        "semantic.spacing.modifier.linear.100": 4.0,
        "icon.illustrative.plain.s.size": 36.0,
        "input-field.inset.horizontal": 12.0,
        "tile.horizontal.inset.vertical": 10.0,
        "tile.vertical.inset.horizontal": 12.0,
        "tile.horizontal.icon.inset.horizontal": 12.0,
        "segmented-control.m.button.icon.inset.all": 6.0,
        "segmented-control.m.button.inset.horizontal": 12.0,
        "button.contained.s.inset.horizontal": 12.0,
        "button.contained.s.icon-before.inset.end": 12.0,
        "button.contained.s.icon-after.inset.start": 12.0,
        "button.contained.s.icon-before.inset.start": 10.0,
        "button.contained.s.icon-after.inset.end": 10.0,
        "accordion.l.item.inset.vertical": 20.0,
        "radio-button.group.stack": 12.0,
        "toggle-button.group.items.gap": 12.0,
        "segmented-control.m.button.inset.vertical": 6.0,
        "dropdown.item.inset.horizontal": 12.0,
        "dropdown.flyout.inset.vertical": 6.0,
        "radio-button.group.items.stack": 12.0,
        "toggle-button.inset.vertical": 10.0,
        "tile.horizontal.inset.horizontal": 12.0,
        "checkbox.group.items.stack": 12.0,
        "tile.group.stack": 12.0,
        "accordion.m.item.inset.vertical": 12.0,
        "tile.horizontal.icon.inset.top": 20.0,
        "tile.horizontal.icon.inset.bottom": 10.0,
        "tile.vertical.inset.vertical": 10.0,
        "toggle-button.group.stack": 12.0,
        "checkbox.group.stack": 12.0,
        "button.contained.m.inset.horizontal": 20.0,
        "button.contained.m.icon-after.inset.start": 20.0,
        "button.contained.m.icon-after.inset.end": 18.0,
        "button.contained.m.icon-before.inset.end": 20.0,
        "button.contained.m.icon-before.inset.start": 18.0,
        "indicator.icon.xl.size": 20.0,
        "indicator.icon.xl.border-radius": 10.0,
        "segmented-control.s.button.inset.horizontal": 8.0,
        "tab.gap": 20.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "indicator.icon.s.size": 10.0,
        "indicator.icon.s.border-radius": 5.0,
        "segmented-control.s.button.icon.inset.all": 2.0,
        "indicator.icon.l.size": 18.0,
        "indicator.icon.l.border-radius": 9.0,
        "tile.control.offset.end": 10.0,
        "segmented-control.s.button.inset.vertical": 2.0,
        "tile.control.offset.top": 10.0,
        "segmented-control.m.button.gap": 6.0,
        "segmented-control.s.button.gap": 6.0,
        "info.gap": 6.0,
        "indicator.icon.m.size": 14.0,
        "indicator.icon.m.border-radius": 7.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.label.stack": 2.0,
        "checkbox.label.stack": 2.0,
        "radio-button.group.label.stack": 2.0,
        "checkbox.group.label.stack": 2.0,
        "switch.label.stack": 2.0,
        "radio-button.label.stack": 2.0,
        "toggle-button.group.label.stack": 2.0,
        "tile.group.label.stack": 2.0,
        "tile.label.stack": 2.0,
        "button.contained.gap": 6.0,
        "input-field.gap": 6.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "dropdown.focus.border-radius": 7.0,
        "button.contained.border-radius": 7.0,
        "toggle-button.focus.border-radius": 9.0,
        "button.contained.focus.border-radius": 9.0,
        "segmented-control.focus.border-radius": 9.0,
        "segmented-control.border-radius": 7.0,
        "input-field.focus.border-radius": 7.0,
        "toggle-button.border-radius": 7.0,
        "tile.border-radius": 7.0,
        "tile.focus.border-radius": 9.0,
        "input-field.border-radius": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "dropdown.border-radius": 7.0,
        "semantic.motion.easing.default.enter.x1": 0.0,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "tile.horizontal.icon.size": 32.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "indicator.count.inset.horizontal": 3.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "checkbox.gap": 8.0,
        "dropdown.item.inset.vertical": 8.0,
        "tile.vertical.icon.size": 28.0,
        "tab.item.inset.bottom": 8.0,
        "tag.gap": 4.0,
        "radio-button.gap": 8.0,
        "switch.gap": 8.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "indicator.count.min-width": 14.0,
        "info.size": 16.0,
        "tag.deletable.inset.vertical": 4.0,
        "callout.info.inset.end": 2.0,
        "indicator.countless.size": 8.0,
        "indicator.countless.border-radius": 4.0,
        "tag.inset.horizontal": 10.0,
        "tag.selected.inset.vertical": 4.0,
        "tag.selected.inset.end": 10.0,
        "tag.deletable.inset.end": 8.0,
        "tag.selected.inset.start": 8.0,
        "indicator.count.height": 14.0,
        "indicator.text.lineHeight": 14.0,
        "indicator.count.border-radius": 7.0,
        "callout.info.inset.start": 8.0,
        "tag.inset.vertical": 4.0,
        "tag.deletable.inset.start": 10.0,
        "callout.inset.horizontal": 8.0,
        "badge.inset.horizontal": 8.0,
        "semantic.color.on-disabled.palette.treshhold": 0.4,
        "core.font-weight.100": 400.0,
        "accordion.m.title.text.closed.fontWeight": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.text.body.m.fontWeight": 400.0,
        "semantic.text.body.l.fontWeight": 400.0,
        "semantic.text.body.s.fontWeight": 400.0,
        "accordion.l.title.text.closed.fontWeight": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.text.utility.default.m.fontWeight": 400.0,
        "semantic.text.utility.default.xs.fontWeight": 400.0,
        "semantic.text.utility.default.s.fontWeight": 400.0,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.text.body.m.lineHeight": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.text.body.s.lineHeight": 20.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.l": 24.0,
        "accordion.l.title.text.opened.lineHeight": 24.0,
        "semantic.text.headline.l.lineHeight": 24.0,
        "accordion.l.title.text.closed.lineHeight": 24.0,
        "semantic.line-height.headline.2xl": 30.0,
        "semantic.text.headline.2xl.lineHeight": 30.0,
        "semantic.line-height.headline.5xl": 42.0,
        "semantic.text.headline.5xl.lineHeight": 42.0,
        "semantic.line-height.headline.xl": 26.0,
        "semantic.text.headline.xl.lineHeight": 26.0,
        "semantic.line-height.headline.m": 22.0,
        "accordion.m.title.text.closed.lineHeight": 22.0,
        "accordion.m.title.text.opened.lineHeight": 22.0,
        "semantic.text.headline.m.lineHeight": 22.0,
        "semantic.line-height.headline.4xl": 36.0,
        "semantic.text.headline.4xl.lineHeight": 36.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.text.headline.s.lineHeight": 20.0,
        "semantic.line-height.headline.6xl": 46.0,
        "semantic.text.headline.6xl.lineHeight": 46.0,
        "semantic.line-height.headline.3xl": 32.0,
        "semantic.text.headline.3xl.lineHeight": 32.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.text.utility.attention.s.lineHeight": 16.0,
        "semantic.size.content.s": 16.0,
        "checkbox.icon.size": 16.0,
        "tag.height": 24.0,
        "tag.border-radius": 12.0,
        "tag.focus.border-radius": 14.0,
        "link.s.icon.size": 16.0,
        "tag.icon.size": 16.0,
        "semantic.size.component.m": 40.0,
        "button.contained.m.inset.vertical": 12.0,
        "button.contained.m.icon.inset.all": 12.0,
        "button.contained.m.icon-before.inset.vertical": 12.0,
        "button.contained.m.icon-after.inset.vertical": 12.0,
        "input-field.min-height": 40.0,
        "avatar.m.size": 40.0,
        "avatar.m.border-radius": 20.0,
        "avatar.m.icon.size": 25.0,
        "avatar.m.text.lineHeight": 40.0,
        "icon.functional.s.size": 16.0,
        "button.contained.icon.size": 16.0,
        "button.contained.m.icon.indicator-countless.offset.bottom": 22.0,
        "button.contained.m.icon.indicator-count.offset.bottom": 20.0,
        "button.contained.m.icon.indicator-count.offset.start": 20.0,
        "button.contained.m.icon.indicator-countless.offset.start": 22.0,
        "semantic.size.component.s": 28.0,
        "avatar.s.size": 28.0,
        "avatar.s.border-radius": 14.0,
        "avatar.s.icon.size": 17.5,
        "avatar.s.text.lineHeight": 28.0,
        "message.icon.size": 16.0,
        "button.plain.s.icon.size": 16.0,
        "button.plain.s.icon.indicator-count.offset.start": 8.0,
        "button.plain.s.icon.indicator-countless.offset.start": 10.0,
        "button.plain.s.icon.indicator-countless.offset.bottom": 10.0,
        "button.plain.s.icon.indicator-count.offset.bottom": 8.0,
        "semantic.text.utility.default.s.lineHeight": 16.0,
        "button.contained.s.inset.vertical": 6.0,
        "button.contained.s.icon-after.inset.vertical": 6.0,
        "button.contained.s.icon.inset.all": 6.0,
        "button.contained.s.icon.indicator-countless.offset.bottom": 16.0,
        "button.contained.s.icon.indicator-count.offset.start": 14.0,
        "button.contained.s.icon.indicator-countless.offset.start": 16.0,
        "button.contained.s.icon.indicator-count.offset.bottom": 14.0,
        "button.contained.s.icon-before.inset.vertical": 6.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.text.utility.default.m.lineHeight": 20.0,
        "semantic.size.content.m": 20.0,
        "link.m.icon.size": 20.0,
        "button.plain.m.icon.size": 20.0,
        "button.plain.m.icon.indicator-countless.offset.bottom": 12.0,
        "button.plain.m.icon.indicator-count.offset.bottom": 10.0,
        "button.plain.m.icon.indicator-countless.offset.start": 12.0,
        "button.plain.m.icon.indicator-count.offset.start": 10.0,
        "badge.height": 20.0,
        "badge.border-radius": 10.0,
        "badge.inset.vertical": 2.0,
        "switch.height": 20.0,
        "switch.border-radius": 10.0,
        "switch.focus.border-radius": 12.0,
        "switch.knob.size": 12.0,
        "switch.knob.border-radius": 6.0,
        "icon.functional.m.size": 20.0,
        "callout.height": 20.0,
        "callout.border-radius": 10.0,
        "checkbox.size": 20.0,
        "radio-button.size": 20.0,
        "radio-button.border-radius": 10.0,
        "radio-button.focus.border-radius": 12.0,
        "radio-button.selected.border-width": 6.0,
        "badge.character.width": 20.0,
        "tab.mask.fade.width": 20.0,
        "tab.item.icon.size": 20.0,
        "switch.width": 40.0,
        "tab.mask.inset.horizontal": 20.0,
        "semantic.text.utility.attention.m.lineHeight": 20.0,
        "input-field.inset.vertical": 10.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.text.body.l.fontSize": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.text.body.l.letterSpacing": 0.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.text.body.l.lineHeight": 24.0,
        "core.motion.duration.0": "0.0s",
        "semantic.opacity.elevation.overlay.400": 0.0,
        "semantic.color.disabled.palette-inverse.increment": 0.025,
        "semantic.motion.easing.default.enter.y1": 0.0,
        "semantic.motion.easing.default.enter": "0.0, 0.0, 0.58, 1.0",
        "semantic.motion.easing.default.change.x1": 0.25,
        "semantic.opacity.elevation.shadow.cast": 0.12,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.text.headline.m.fontWeight": 700.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.text.headline.l.fontWeight": 700.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.text.headline.xl.fontWeight": 700.0,
        "semantic.font-weight.headline.2xl": 700.0,
        "semantic.text.headline.2xl.fontWeight": 700.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.text.headline.4xl.fontWeight": 600.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.text.headline.6xl.fontWeight": 600.0,
        "semantic.font-weight.headline.s": 700.0,
        "semantic.text.headline.s.fontWeight": 700.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.text.headline.3xl.fontWeight": 600.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.text.headline.5xl.fontWeight": 600.0,
        "avatar.xl.text.fontWeight": 600.0,
        "avatar.s.text.fontWeight": 600.0,
        "avatar.l.text.fontWeight": 600.0,
        "indicator.text.fontWeight": 600.0,
        "avatar.m.text.fontWeight": 600.0,
        "avatar.s.text.letterSpacing": 0.0,
        "core.breakpoint.m": 704.0,
        "semantic.motion.easing.default.exit.x2": 1.0,
        "semantic.color.on-disabled.palette-inverse.treshhold": 0.15,
        "semantic.motion.easing.default.exit.x1": 0.42,
        "core.breakpoint.max-width.s": 703.0,
        "semantic.color.on-disabled.palette.increment": 0.02,
        "avatar.l.text.letterSpacing": 0.0,
        "semantic.motion.easing.default.exit.y2": 1.0,
        "semantic.motion.easing.default.exit": "0.42, 0.0, 1.0, 1.0",
        "semantic.motion.duration.modifier.slow-to-fast": 1.0,
        "avatar.font-size.factor": 0.45,
        "avatar.xl.font-size": 30.6,
        "avatar.xl.text.fontSize": 30.6,
        "avatar.m.font-size": 18.0,
        "avatar.m.text.fontSize": 18.0,
        "avatar.l.font-size": 25.2,
        "avatar.l.text.fontSize": 25.2,
        "avatar.s.font-size": 12.6,
        "avatar.s.text.fontSize": 12.6,
        "core.breakpoint.2xl": "1472.0px",
        "semantic.motion.easing.default.change.y2": 1.0,
        "semantic.motion.easing.default.change": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.title.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.border-width.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.item.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "checkbox.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "checkbox.transition.check.easing": "0.25, 0.1, 0.25, 1.0",
        "button.contained.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "radio-button.transition.scaling.easing": "0.25, 0.1, 0.25, 1.0",
        "link.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "button.plain.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "accordion.chevron.transition.easing": "0.25, 0.1, 0.25, 1.0",
        "semantic.motion.transition.focus.easing": "0.25, 0.1, 0.25, 1.0",
        "input-field.transition.easing": "0.25, 0.1, 0.25, 1.0"
    },
    "Spacious XS-S": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.200": 8.0,
        "semantic.spacing.dynamic-s.200": 8.0,
        "semantic.spacing.dynamic-l.200": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.300": 12.0,
        "semantic.spacing.dynamic-s.300": 12.0,
        "semantic.spacing.dynamic-m.300": 12.0,
        "semantic.font-size.utility.xs": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.line-height.utility.xs": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "semantic.spacing.dynamic-m.400": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.400": 16.0,
        "semantic.spacing.dynamic-l.400": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "semantic.spacing.dynamic-s.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-l.1600": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.dynamic-m.1600": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "semantic.spacing.adjustment.icon.s": 4.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.dynamic-l.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "semantic.spacing.dynamic-m.2400": 96.0,
        "semantic.spacing.dynamic-s.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.dynamic-l.1200": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-s.1200": 48.0,
        "semantic.spacing.dynamic-m.1200": 48.0,
        "core.dimension.0": 0.0,
        "core.border-radius.0": 0.0,
        "core.dimension.800": 32.0,
        "semantic.spacing.dynamic-m.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "core.grid.column-gap.m": 32.0,
        "semantic.spacing.dynamic-s.800": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.800": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "semantic.spacing.dynamic-l.100": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.selected": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.600": 24.0,
        "semantic.spacing.dynamic-m.600": 24.0,
        "semantic.spacing.static.600": 24.0,
        "semantic.spacing.dynamic-s.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.1400": 56.0,
        "semantic.spacing.dynamic-l.1400": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "semantic.spacing.dynamic-s.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "semantic.border-width.focus": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.spacing.dynamic-m.100": 4.0,
        "semantic.spacing.adjustment.icon.m": 4.0,
        "core.dimension.900": 36.0,
        "semantic.spacing.dynamic-s.100": 4.0,
        "semantic.font-size.base": 18.0,
        "semantic.font-size.headline.s": 16.0,
        "semantic.font-size.body.m": 18.0,
        "semantic.font-size.utility.m": 18.0,
        "semantic.font-size.headline.m": 18.0,
        "semantic.font-size.body.s": 16.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 16.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 0.0,
        "semantic.spacing.modifier.linear.200": 0.0,
        "semantic.spacing.modifier.linear.300": 0.0,
        "semantic.spacing.modifier.linear.100": 0.0,
        "semantic.spacing.modifier.linear.50": 0.0,
        "semantic.spacing.label.stack": 4.0,
        "semantic.border-radius.surface.l": 16.0,
        "semantic.spacing.modifier.linear.25": 0.0,
        "semantic.border-radius.action.m": 8.0,
        "semantic.border-radius.surface.m": 8.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 0.0,
        "semantic.spacing.modifier.clamp-smaller.200": 0.0,
        "semantic.spacing.modifier.clamp-smaller.25": 0.0,
        "semantic.spacing.modifier.clamp-smaller.100": 0.0,
        "semantic.spacing.modifier.clamp-smaller.300": 0.0,
        "semantic.spacing.modifier.clamp-smaller.50": 0.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 4.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 24.0,
        "semantic.line-height.headline.s": 22.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 20.0,
        "semantic.size.content.s": 20.0,
        "semantic.size.component.s": 36.0,
        "semantic.size.component.m": 48.0,
        "semantic.line-height.utility.m": 24.0,
        "semantic.size.content.m": 24.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 20.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.2,
        "semantic.font-size.headline.6xl": 64.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 66.0,
        "semantic.font-size.headline.5xl": 54.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 56.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 37.0,
        "semantic.letter-spacing.headline.3xl": -0.5,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 42.0,
        "semantic.font-size.headline.xl": 26.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 30.0,
        "semantic.font-size.headline.4xl": 45.0,
        "semantic.letter-spacing.headline.4xl": -0.5,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 48.0,
        "semantic.font-size.headline.2xl": 31.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 600.0,
        "semantic.line-height.headline.2xl": 36.0,
        "semantic.font-size.headline.l": 22.0,
        "semantic.line-height.headline.l": 28.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 24.0,
        "semantic.line-height.body.s": 22.0,
        "semantic.line-height.body.l": 26.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Spacious M": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.200": 8.0,
        "semantic.spacing.dynamic-s.200": 8.0,
        "semantic.spacing.dynamic-l.200": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.300": 12.0,
        "semantic.spacing.dynamic-s.300": 12.0,
        "semantic.spacing.dynamic-m.300": 12.0,
        "semantic.font-size.utility.xs": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.line-height.utility.xs": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "semantic.spacing.dynamic-m.400": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.400": 16.0,
        "semantic.spacing.dynamic-l.400": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "semantic.spacing.dynamic-s.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-l.1600": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.dynamic-m.1600": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "semantic.spacing.adjustment.icon.s": 4.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.dynamic-l.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "semantic.spacing.dynamic-m.2400": 96.0,
        "semantic.spacing.dynamic-s.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.dynamic-l.1200": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-s.1200": 48.0,
        "semantic.spacing.dynamic-m.1200": 48.0,
        "core.dimension.0": 0.0,
        "core.border-radius.0": 0.0,
        "core.dimension.800": 32.0,
        "semantic.spacing.dynamic-m.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "core.grid.column-gap.m": 32.0,
        "semantic.spacing.dynamic-s.800": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.800": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "semantic.spacing.dynamic-l.100": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.selected": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.600": 24.0,
        "semantic.spacing.dynamic-m.600": 24.0,
        "semantic.spacing.static.600": 24.0,
        "semantic.spacing.dynamic-s.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.1400": 56.0,
        "semantic.spacing.dynamic-l.1400": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "semantic.spacing.dynamic-s.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "semantic.border-width.focus": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.spacing.dynamic-m.100": 4.0,
        "semantic.spacing.adjustment.icon.m": 4.0,
        "core.dimension.900": 36.0,
        "semantic.spacing.dynamic-s.100": 4.0,
        "semantic.font-size.base": 18.0,
        "semantic.font-size.headline.s": 16.0,
        "semantic.font-size.body.m": 18.0,
        "semantic.font-size.utility.m": 18.0,
        "semantic.font-size.headline.m": 18.0,
        "semantic.font-size.body.s": 16.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 16.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 0.0,
        "semantic.spacing.modifier.linear.200": 0.0,
        "semantic.spacing.modifier.linear.300": 0.0,
        "semantic.spacing.modifier.linear.100": 0.0,
        "semantic.spacing.modifier.linear.50": 0.0,
        "semantic.spacing.label.stack": 4.0,
        "semantic.border-radius.surface.l": 16.0,
        "semantic.spacing.modifier.linear.25": 0.0,
        "semantic.border-radius.action.m": 8.0,
        "semantic.border-radius.surface.m": 8.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 0.0,
        "semantic.spacing.modifier.clamp-smaller.200": 0.0,
        "semantic.spacing.modifier.clamp-smaller.25": 0.0,
        "semantic.spacing.modifier.clamp-smaller.100": 0.0,
        "semantic.spacing.modifier.clamp-smaller.300": 0.0,
        "semantic.spacing.modifier.clamp-smaller.50": 0.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 4.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 24.0,
        "semantic.line-height.headline.s": 22.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 20.0,
        "semantic.size.content.s": 20.0,
        "semantic.size.component.s": 36.0,
        "semantic.size.component.m": 48.0,
        "semantic.line-height.utility.m": 24.0,
        "semantic.size.content.m": 24.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 20.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.2,
        "semantic.font-size.headline.6xl": 64.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 66.0,
        "semantic.font-size.headline.5xl": 54.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 56.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 37.0,
        "semantic.letter-spacing.headline.3xl": -0.5,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 42.0,
        "semantic.font-size.headline.xl": 26.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 30.0,
        "semantic.font-size.headline.4xl": 45.0,
        "semantic.letter-spacing.headline.4xl": -0.5,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 48.0,
        "semantic.font-size.headline.2xl": 31.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 600.0,
        "semantic.line-height.headline.2xl": 36.0,
        "semantic.font-size.headline.l": 22.0,
        "semantic.line-height.headline.l": 28.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 24.0,
        "semantic.line-height.body.s": 22.0,
        "semantic.line-height.body.l": 26.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Spacious L-3XL": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.200": 8.0,
        "semantic.spacing.dynamic-s.200": 8.0,
        "semantic.spacing.dynamic-l.200": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.300": 12.0,
        "semantic.spacing.dynamic-s.300": 12.0,
        "semantic.spacing.dynamic-m.300": 12.0,
        "semantic.font-size.utility.xs": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.line-height.utility.xs": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "semantic.spacing.dynamic-m.400": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.400": 16.0,
        "semantic.spacing.dynamic-l.400": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "semantic.spacing.dynamic-s.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-l.1600": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.dynamic-m.1600": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "semantic.spacing.adjustment.icon.s": 4.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.dynamic-l.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "semantic.spacing.dynamic-m.2400": 96.0,
        "semantic.spacing.dynamic-s.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.dynamic-l.1200": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-s.1200": 48.0,
        "semantic.spacing.dynamic-m.1200": 48.0,
        "core.dimension.0": 0.0,
        "core.border-radius.0": 0.0,
        "core.dimension.800": 32.0,
        "semantic.spacing.dynamic-m.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "core.grid.column-gap.m": 32.0,
        "semantic.spacing.dynamic-s.800": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.800": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "semantic.spacing.dynamic-l.100": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.selected": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.600": 24.0,
        "semantic.spacing.dynamic-m.600": 24.0,
        "semantic.spacing.static.600": 24.0,
        "semantic.spacing.dynamic-s.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.1400": 56.0,
        "semantic.spacing.dynamic-l.1400": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "semantic.spacing.dynamic-s.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "semantic.border-width.focus": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.spacing.dynamic-m.100": 4.0,
        "semantic.spacing.adjustment.icon.m": 4.0,
        "core.dimension.900": 36.0,
        "semantic.spacing.dynamic-s.100": 4.0,
        "semantic.font-size.base": 18.0,
        "semantic.font-size.headline.s": 16.0,
        "semantic.font-size.body.m": 18.0,
        "semantic.font-size.utility.m": 18.0,
        "semantic.font-size.headline.m": 18.0,
        "semantic.font-size.body.s": 16.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 16.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 0.0,
        "semantic.spacing.modifier.linear.200": 0.0,
        "semantic.spacing.modifier.linear.300": 0.0,
        "semantic.spacing.modifier.linear.100": 0.0,
        "semantic.spacing.modifier.linear.50": 0.0,
        "semantic.spacing.label.stack": 4.0,
        "semantic.border-radius.surface.l": 16.0,
        "semantic.spacing.modifier.linear.25": 0.0,
        "semantic.border-radius.action.m": 8.0,
        "semantic.border-radius.surface.m": 8.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 0.0,
        "semantic.spacing.modifier.clamp-smaller.200": 0.0,
        "semantic.spacing.modifier.clamp-smaller.25": 0.0,
        "semantic.spacing.modifier.clamp-smaller.100": 0.0,
        "semantic.spacing.modifier.clamp-smaller.300": 0.0,
        "semantic.spacing.modifier.clamp-smaller.50": 0.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 4.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 24.0,
        "semantic.line-height.headline.s": 22.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 20.0,
        "semantic.size.content.s": 20.0,
        "semantic.size.component.s": 36.0,
        "semantic.size.component.m": 48.0,
        "semantic.line-height.utility.m": 24.0,
        "semantic.size.content.m": 24.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 20.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.3,
        "semantic.font-size.headline.6xl": 113.0,
        "semantic.letter-spacing.headline.6xl": -1.5,
        "semantic.line-height.headline.6xl": 110.0,
        "semantic.font-size.headline.5xl": 87.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -1.0,
        "semantic.line-height.headline.5xl": 88.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 51.0,
        "semantic.letter-spacing.headline.3xl": -0.5,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 54.0,
        "semantic.font-size.headline.xl": 30.0,
        "semantic.font-weight.headline.xl": 600.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 34.0,
        "semantic.font-size.headline.4xl": 67.0,
        "semantic.letter-spacing.headline.4xl": -0.5,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 68.0,
        "semantic.font-size.headline.2xl": 40.0,
        "semantic.letter-spacing.headline.2xl": -0.5,
        "semantic.font-weight.headline.2xl": 600.0,
        "semantic.line-height.headline.2xl": 44.0,
        "semantic.font-size.headline.l": 23.0,
        "semantic.line-height.headline.l": 28.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 24.0,
        "semantic.line-height.body.s": 22.0,
        "semantic.line-height.body.l": 26.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Compact XS-S": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "core.dimension.0": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.s": 14.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "semantic.spacing.modifier.linear.100": 4.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "semantic.spacing.label.stack": 2.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 22.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.size.content.s": 16.0,
        "semantic.size.component.s": 28.0,
        "semantic.size.component.m": 40.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.size.content.m": 20.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.15,
        "semantic.font-size.headline.6xl": 43.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 46.0,
        "semantic.font-size.headline.5xl": 37.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 42.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 28.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 32.0,
        "semantic.font-size.headline.xl": 21.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 26.0,
        "semantic.font-size.headline.4xl": 32.0,
        "semantic.letter-spacing.headline.4xl": 0.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 36.0,
        "semantic.font-size.headline.2xl": 24.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 700.0,
        "semantic.line-height.headline.2xl": 30.0,
        "semantic.font-size.headline.l": 18.0,
        "semantic.line-height.headline.l": 24.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Compact M": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "core.dimension.0": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.s": 14.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "semantic.spacing.modifier.linear.100": 4.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "semantic.spacing.label.stack": 2.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 22.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.size.content.s": 16.0,
        "semantic.size.component.s": 28.0,
        "semantic.size.component.m": 40.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.size.content.m": 20.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.15,
        "semantic.font-size.headline.6xl": 43.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 46.0,
        "semantic.font-size.headline.5xl": 37.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 42.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 28.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 32.0,
        "semantic.font-size.headline.xl": 21.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 26.0,
        "semantic.font-size.headline.4xl": 32.0,
        "semantic.letter-spacing.headline.4xl": 0.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 36.0,
        "semantic.font-size.headline.2xl": 24.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 700.0,
        "semantic.line-height.headline.2xl": 30.0,
        "semantic.font-size.headline.l": 18.0,
        "semantic.line-height.headline.l": 24.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Compact L-3XL": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "core.dimension.0": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.s": 14.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "semantic.spacing.modifier.linear.100": 4.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "semantic.spacing.label.stack": 2.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 22.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.size.content.s": 16.0,
        "semantic.size.component.s": 28.0,
        "semantic.size.component.m": 40.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.size.content.m": 20.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.15,
        "semantic.font-size.headline.6xl": 43.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 46.0,
        "semantic.font-size.headline.5xl": 37.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 42.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 28.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 32.0,
        "semantic.font-size.headline.xl": 21.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 26.0,
        "semantic.font-size.headline.4xl": 32.0,
        "semantic.letter-spacing.headline.4xl": 0.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 36.0,
        "semantic.font-size.headline.2xl": 24.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 700.0,
        "semantic.line-height.headline.2xl": 30.0,
        "semantic.font-size.headline.l": 18.0,
        "semantic.line-height.headline.l": 24.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Dense XS-S": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "core.dimension.0": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.s": 14.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "semantic.spacing.modifier.linear.100": 4.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "semantic.spacing.label.stack": 2.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 22.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.size.content.s": 16.0,
        "semantic.size.component.s": 28.0,
        "semantic.size.component.m": 40.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.size.content.m": 20.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.15,
        "semantic.font-size.headline.6xl": 43.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 46.0,
        "semantic.font-size.headline.5xl": 37.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 42.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 28.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 32.0,
        "semantic.font-size.headline.xl": 21.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 26.0,
        "semantic.font-size.headline.4xl": 32.0,
        "semantic.letter-spacing.headline.4xl": 0.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 36.0,
        "semantic.font-size.headline.2xl": 24.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 700.0,
        "semantic.line-height.headline.2xl": 30.0,
        "semantic.font-size.headline.l": 18.0,
        "semantic.line-height.headline.l": 24.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Dense M": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "core.dimension.0": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.s": 14.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "semantic.spacing.modifier.linear.100": 4.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "semantic.spacing.label.stack": 2.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 22.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.size.content.s": 16.0,
        "semantic.size.component.s": 28.0,
        "semantic.size.component.m": 40.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.size.content.m": 20.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.15,
        "semantic.font-size.headline.6xl": 43.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 46.0,
        "semantic.font-size.headline.5xl": 37.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 42.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 28.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 32.0,
        "semantic.font-size.headline.xl": 21.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 26.0,
        "semantic.font-size.headline.4xl": 32.0,
        "semantic.letter-spacing.headline.4xl": 0.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 36.0,
        "semantic.font-size.headline.2xl": 24.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 700.0,
        "semantic.line-height.headline.2xl": 30.0,
        "semantic.font-size.headline.l": 18.0,
        "semantic.line-height.headline.l": 24.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Dense L-3XL": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "core.breakpoint.max-width.xs": 319.0,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "semantic.font-size.utility.xs": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.400": 8.0,
        "semantic.spacing.dynamic-l.600": 8.0,
        "semantic.spacing.dynamic-s.300": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "semantic.spacing.dynamic-m.300": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.800": 12.0,
        "semantic.spacing.dynamic-s.400": 12.0,
        "semantic.spacing.dynamic-m.600": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "semantic.spacing.dynamic-m.800": 16.0,
        "semantic.spacing.dynamic-l.1200": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "core.grid.column-gap.s": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.600": 16.0,
        "core.border-radius.200": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "semantic.spacing.dynamic-s.2400": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-l.2400": 48.0,
        "semantic.spacing.dynamic-s.1400": 48.0,
        "semantic.spacing.dynamic-m.1600": 48.0,
        "core.dimension.0": 0.0,
        "semantic.spacing.dynamic-m.200": 0.0,
        "semantic.spacing.dynamic-l.300": 0.0,
        "semantic.spacing.dynamic-l.100": 0.0,
        "semantic.spacing.dynamic-m.100": 0.0,
        "semantic.spacing.dynamic-l.200": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.spacing.dynamic-s.100": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "semantic.spacing.dynamic-m.1400": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.spacing.dynamic-l.1600": 32.0,
        "semantic.spacing.dynamic-s.1200": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "core.dimension.50": 2.0,
        "semantic.offset.focus": 2.0,
        "semantic.spacing.adjustment.icon.s": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.focus": 2.0,
        "semantic.border-width.selected": 2.0,
        "semantic.spacing.adjustment.icon.m": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.spacing.dynamic-l.1400": 24.0,
        "semantic.spacing.dynamic-s.800": 24.0,
        "semantic.spacing.static.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "semantic.spacing.dynamic-m.1200": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.2400": 56.0,
        "semantic.spacing.dynamic-s.1600": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.line-height.utility.xs": 14.0,
        "semantic.spacing.dynamic-s.200": 4.0,
        "semantic.spacing.dynamic-l.400": 4.0,
        "core.dimension.900": 36.0,
        "semantic.font-size.base": 16.0,
        "semantic.font-size.headline.s": 14.0,
        "semantic.font-size.body.m": 16.0,
        "semantic.font-size.utility.m": 16.0,
        "semantic.font-size.headline.m": 16.0,
        "semantic.font-size.body.s": 14.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 14.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 1.0,
        "semantic.spacing.modifier.linear.200": 8.0,
        "semantic.spacing.modifier.linear.300": 12.0,
        "semantic.spacing.modifier.linear.100": 4.0,
        "semantic.spacing.modifier.linear.50": 2.0,
        "semantic.spacing.label.stack": 2.0,
        "semantic.border-radius.surface.l": 14.0,
        "semantic.spacing.modifier.linear.25": 1.0,
        "semantic.border-radius.action.m": 7.0,
        "semantic.border-radius.surface.m": 7.0,
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 1.0,
        "semantic.spacing.modifier.clamp-smaller.200": 8.0,
        "semantic.spacing.modifier.clamp-smaller.25": 1.0,
        "semantic.spacing.modifier.clamp-smaller.100": 4.0,
        "semantic.spacing.modifier.clamp-smaller.300": 12.0,
        "semantic.spacing.modifier.clamp-smaller.50": 2.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.line-height.cushion.utility": 2.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.line-height.cushion.headline": 6.0,
        "core.grid.max-width": 1344.0,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "core.grid.baseline": 4.0,
        "semantic.grid.baseline.body": 2.0,
        "semantic.grid.baseline.headline": 2.0,
        "semantic.line-height.headline.m": 22.0,
        "semantic.line-height.headline.s": 20.0,
        "semantic.grid.baseline.utility": 4.0,
        "semantic.line-height.utility.s": 16.0,
        "semantic.size.content.s": 16.0,
        "semantic.size.component.s": 28.0,
        "semantic.size.component.m": 40.0,
        "semantic.line-height.utility.m": 20.0,
        "semantic.size.content.m": 20.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 18.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.2,
        "semantic.font-size.headline.6xl": 57.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.line-height.headline.6xl": 60.0,
        "semantic.font-size.headline.5xl": 48.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.line-height.headline.5xl": 52.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.font-size.headline.3xl": 33.0,
        "semantic.letter-spacing.headline.3xl": 0.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.line-height.headline.3xl": 38.0,
        "semantic.font-size.headline.xl": 23.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.line-height.headline.xl": 28.0,
        "semantic.font-size.headline.4xl": 40.0,
        "semantic.letter-spacing.headline.4xl": -0.5,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.line-height.headline.4xl": 44.0,
        "semantic.font-size.headline.2xl": 28.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.font-weight.headline.2xl": 600.0,
        "semantic.line-height.headline.2xl": 32.0,
        "semantic.font-size.headline.l": 19.0,
        "semantic.line-height.headline.l": 24.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.line-height.body.m": 22.0,
        "semantic.line-height.body.s": 20.0,
        "semantic.line-height.body.l": 24.0,
        "semantic.font-size.growth-ratio.utility": 1.105
    },
    "Light": {
        "core.color.red.100": "#FBF1F1",
        "core.color.red.200": "#FAE2E3",
        "core.color.red.300": "#FACAC6",
        "core.color.red.400": "#FEA5AA",
        "core.color.red.500": "#FF808A",
        "core.color.red.600": "#FD4369",
        "core.color.red.700": "#DD0A42",
        "core.color.red.800": "#AA001B",
        "core.color.red.900": "#7C0007",
        "core.color.red.1000": "#5C0906",
        "core.color.red.1100": "#3F0C06",
        "core.color.red.1200": "#1F0804",
        "core.color.aqua.100": "#EEF6F6",
        "core.color.aqua.200": "#DFEFF2",
        "core.color.aqua.300": "#B2DCEA",
        "core.color.aqua.400": "#83CBE5",
        "core.color.aqua.500": "#51B6DD",
        "core.color.aqua.600": "#0E98CC",
        "core.color.aqua.700": "#0377A8",
        "core.color.aqua.800": "#005885",
        "core.color.aqua.900": "#003D63",
        "core.color.aqua.1000": "#002F4B",
        "core.color.aqua.1100": "#001E32",
        "core.color.aqua.1200": "#00111D",
        "core.color.blue.100": "#F0F7FC",
        "core.color.blue.200": "#DBEAF5",
        "core.color.blue.300": "#C3D7E9",
        "core.color.blue.400": "#ADC6DC",
        "core.color.blue.500": "#8DAFD1",
        "core.color.blue.600": "#6590BD",
        "core.color.blue.700": "#3F72B1",
        "core.color.blue.800": "#1A5393",
        "core.color.blue.900": "#003781",
        "core.color.blue.1000": "#00266d",
        "core.color.blue.1100": "#001955",
        "core.color.blue.1200": "#000f39",
        "core.color.gray.100": "#f4f4f5",
        "core.color.gray.200": "#e9eaeb",
        "core.color.gray.300": "#d7d9db",
        "core.color.gray.400": "#c0c4c7",
        "core.color.gray.500": "#a7acb1",
        "core.color.gray.600": "#888f96",
        "core.color.gray.700": "#68727b",
        "core.color.gray.800": "#495560",
        "core.color.gray.900": "#2f3c49",
        "core.color.gray.1000": "#202d3b",
        "core.color.gray.1100": "#12202e",
        "core.color.gray.1200": "#041321",
        "core.color.teal.100": "#E3F8F8",
        "core.color.teal.200": "#C2F0EF",
        "core.color.teal.300": "#8DE3E2",
        "core.color.teal.400": "#6DD2D0",
        "core.color.teal.500": "#46BAB8",
        "core.color.teal.600": "#1F9B9E",
        "core.color.teal.700": "#057C85",
        "core.color.teal.800": "#005C64",
        "core.color.teal.900": "#014248",
        "core.color.teal.1000": "#013134",
        "core.color.teal.1100": "#012325",
        "core.color.teal.1200": "#001213",
        "core.color.black": "#000000",
        "core.color.green.100": "#E7F9EB",
        "core.color.green.200": "#C0F3D1",
        "core.color.green.300": "#9AE5B4",
        "core.color.green.400": "#68D190",
        "core.color.green.500": "#34C270",
        "core.color.green.600": "#10A251",
        "core.color.green.700": "#05813C",
        "core.color.green.800": "#006028",
        "core.color.green.900": "#00450F",
        "core.color.green.1000": "#023409",
        "core.color.green.1100": "#052409",
        "core.color.green.1200": "#071108",
        "core.color.white": "#FFFFFF",
        "core.color.orange.100": "#FBF3E9",
        "core.color.orange.200": "#FCE2C8",
        "core.color.orange.300": "#FECA91",
        "core.color.orange.400": "#FFA456",
        "core.color.orange.500": "#FF8939",
        "core.color.orange.600": "#EA6308",
        "core.color.orange.700": "#C34800",
        "core.color.orange.800": "#933400",
        "core.color.orange.900": "#682500",
        "core.color.orange.1000": "#4E1D01",
        "core.color.orange.1100": "#361503",
        "core.color.orange.1200": "#1B0A03",
        "core.color.purple.100": "#FDF1F7",
        "core.color.purple.200": "#F9E1ED",
        "core.color.purple.300": "#F4C9DF",
        "core.color.purple.400": "#EEAECB",
        "core.color.purple.500": "#E78EB3",
        "core.color.purple.600": "#DC6597",
        "core.color.purple.700": "#BD417F",
        "core.color.purple.800": "#962165",
        "core.color.purple.900": "#720849",
        "core.color.purple.1000": "#5B0037",
        "core.color.purple.1100": "#430023",
        "core.color.purple.1200": "#2A0010",
        "core.color.yellow.100": "#FEF5CD",
        "core.color.yellow.200": "#FBE6A7",
        "core.color.yellow.300": "#FAD066",
        "core.color.yellow.400": "#FAB600",
        "core.color.yellow.500": "#DBA103",
        "core.color.yellow.600": "#B48602",
        "core.color.yellow.700": "#8F6A00",
        "core.color.yellow.800": "#6A4E00",
        "core.color.yellow.900": "#4B3701",
        "core.color.yellow.1000": "#382A04",
        "core.color.yellow.1100": "#281D05",
        "core.color.yellow.1200": "#130E03",
        "core.color.darkblue.100": "#f2f4f9",
        "core.color.darkblue.200": "#e4eaf3",
        "core.color.darkblue.300": "#cfd9ea",
        "core.color.darkblue.400": "#b6c5de",
        "core.color.darkblue.500": "#98accf",
        "core.color.darkblue.600": "#758fbb",
        "core.color.darkblue.700": "#5371a4",
        "core.color.darkblue.800": "#335389",
        "core.color.darkblue.900": "#1c3a6c",
        "core.color.darkblue.1000": "#122b55",
        "core.color.darkblue.1100": "#0F1F3A",
        "core.color.darkblue.1200": "#091223",
        "semantic.color.on-disabled.palette-inverse.treshhold": 0.15,
        "semantic.color.disabled.palette.increment": 0.0225,
        "semantic.opacity.elevation.overlay.200": 0.0,
        "semantic.color.on-disabled.palette-inverse.increment": 0.01,
        "semantic.opacity.elevation.overlay.100": 0.0,
        "semantic.color.disabled.palette.treshhold": 0.04,
        "semantic.color.disabled.palette-inverse.treshhold": 0.3,
        "semantic.color.on-disabled.palette.increment": 0.02,
        "semantic.opacity.elevation.shadow.cast": 0.12,
        "semantic.opacity.elevation.overlay.300": 0.0,
        "semantic.opacity.elevation.overlay.500": 0.0,
        "semantic.opacity.elevation.overlay.400": 0.0,
        "semantic.color.on-disabled.palette.treshhold": 0.4,
        "semantic.opacity.elevation.shadow.core": 0.16,
        "semantic.color.disabled.palette-inverse.increment": 0.025
    },
    "Dark": {
        "core.color.red.100": "#FBF1F1",
        "core.color.red.200": "#FAE2E3",
        "core.color.red.300": "#FACAC6",
        "core.color.red.400": "#FEA5AA",
        "core.color.red.500": "#FF808A",
        "core.color.red.600": "#FD4369",
        "core.color.red.700": "#DD0A42",
        "core.color.red.800": "#AA001B",
        "core.color.red.900": "#7C0007",
        "core.color.red.1000": "#5C0906",
        "core.color.red.1100": "#3F0C06",
        "core.color.red.1200": "#1F0804",
        "core.color.aqua.100": "#EEF6F6",
        "core.color.aqua.200": "#DFEFF2",
        "core.color.aqua.300": "#B2DCEA",
        "core.color.aqua.400": "#83CBE5",
        "core.color.aqua.500": "#51B6DD",
        "core.color.aqua.600": "#0E98CC",
        "core.color.aqua.700": "#0377A8",
        "core.color.aqua.800": "#005885",
        "core.color.aqua.900": "#003D63",
        "core.color.aqua.1000": "#002F4B",
        "core.color.aqua.1100": "#001E32",
        "core.color.aqua.1200": "#00111D",
        "core.color.blue.100": "#F0F7FC",
        "core.color.blue.200": "#DBEAF5",
        "core.color.blue.300": "#C3D7E9",
        "core.color.blue.400": "#ADC6DC",
        "core.color.blue.500": "#8DAFD1",
        "core.color.blue.600": "#6590BD",
        "core.color.blue.700": "#3F72B1",
        "core.color.blue.800": "#1A5393",
        "core.color.blue.900": "#003781",
        "core.color.blue.1000": "#00266d",
        "core.color.blue.1100": "#001955",
        "core.color.blue.1200": "#000f39",
        "core.color.gray.100": "#f4f4f5",
        "core.color.gray.200": "#e9eaeb",
        "core.color.gray.300": "#d7d9db",
        "core.color.gray.400": "#c0c4c7",
        "core.color.gray.500": "#a7acb1",
        "core.color.gray.600": "#888f96",
        "core.color.gray.700": "#68727b",
        "core.color.gray.800": "#495560",
        "core.color.gray.900": "#2f3c49",
        "core.color.gray.1000": "#202d3b",
        "core.color.gray.1100": "#12202e",
        "core.color.gray.1200": "#041321",
        "core.color.teal.100": "#E3F8F8",
        "core.color.teal.200": "#C2F0EF",
        "core.color.teal.300": "#8DE3E2",
        "core.color.teal.400": "#6DD2D0",
        "core.color.teal.500": "#46BAB8",
        "core.color.teal.600": "#1F9B9E",
        "core.color.teal.700": "#057C85",
        "core.color.teal.800": "#005C64",
        "core.color.teal.900": "#014248",
        "core.color.teal.1000": "#013134",
        "core.color.teal.1100": "#012325",
        "core.color.teal.1200": "#001213",
        "core.color.black": "#000000",
        "core.color.green.100": "#E7F9EB",
        "core.color.green.200": "#C0F3D1",
        "core.color.green.300": "#9AE5B4",
        "core.color.green.400": "#68D190",
        "core.color.green.500": "#34C270",
        "core.color.green.600": "#10A251",
        "core.color.green.700": "#05813C",
        "core.color.green.800": "#006028",
        "core.color.green.900": "#00450F",
        "core.color.green.1000": "#023409",
        "core.color.green.1100": "#052409",
        "core.color.green.1200": "#071108",
        "core.color.white": "#FFFFFF",
        "core.color.orange.100": "#FBF3E9",
        "core.color.orange.200": "#FCE2C8",
        "core.color.orange.300": "#FECA91",
        "core.color.orange.400": "#FFA456",
        "core.color.orange.500": "#FF8939",
        "core.color.orange.600": "#EA6308",
        "core.color.orange.700": "#C34800",
        "core.color.orange.800": "#933400",
        "core.color.orange.900": "#682500",
        "core.color.orange.1000": "#4E1D01",
        "core.color.orange.1100": "#361503",
        "core.color.orange.1200": "#1B0A03",
        "core.color.purple.100": "#FDF1F7",
        "core.color.purple.200": "#F9E1ED",
        "core.color.purple.300": "#F4C9DF",
        "core.color.purple.400": "#EEAECB",
        "core.color.purple.500": "#E78EB3",
        "core.color.purple.600": "#DC6597",
        "core.color.purple.700": "#BD417F",
        "core.color.purple.800": "#962165",
        "core.color.purple.900": "#720849",
        "core.color.purple.1000": "#5B0037",
        "core.color.purple.1100": "#430023",
        "core.color.purple.1200": "#2A0010",
        "core.color.yellow.100": "#FEF5CD",
        "core.color.yellow.200": "#FBE6A7",
        "core.color.yellow.300": "#FAD066",
        "core.color.yellow.400": "#FAB600",
        "core.color.yellow.500": "#DBA103",
        "core.color.yellow.600": "#B48602",
        "core.color.yellow.700": "#8F6A00",
        "core.color.yellow.800": "#6A4E00",
        "core.color.yellow.900": "#4B3701",
        "core.color.yellow.1000": "#382A04",
        "core.color.yellow.1100": "#281D05",
        "core.color.yellow.1200": "#130E03",
        "core.color.darkblue.100": "#f2f4f9",
        "core.color.darkblue.200": "#e4eaf3",
        "core.color.darkblue.300": "#cfd9ea",
        "core.color.darkblue.400": "#b6c5de",
        "core.color.darkblue.500": "#98accf",
        "core.color.darkblue.600": "#758fbb",
        "core.color.darkblue.700": "#5371a4",
        "core.color.darkblue.800": "#335389",
        "core.color.darkblue.900": "#1c3a6c",
        "core.color.darkblue.1000": "#122b55",
        "core.color.darkblue.1100": "#0F1F3A",
        "core.color.darkblue.1200": "#091223",
        "semantic.color.on-disabled.palette-inverse.treshhold": 0.15,
        "semantic.color.disabled.palette.increment": 0.0225,
        "semantic.opacity.elevation.overlay.200": 0.0,
        "semantic.color.on-disabled.palette-inverse.increment": 0.01,
        "semantic.opacity.elevation.overlay.100": 0.0,
        "semantic.color.disabled.palette.treshhold": 0.04,
        "semantic.color.disabled.palette-inverse.treshhold": 0.3,
        "semantic.color.on-disabled.palette.increment": 0.02,
        "semantic.opacity.elevation.shadow.cast": 0.12,
        "semantic.opacity.elevation.overlay.300": 0.0,
        "semantic.opacity.elevation.overlay.500": 0.0,
        "semantic.opacity.elevation.overlay.400": 0.0,
        "semantic.color.on-disabled.palette.treshhold": 0.4,
        "semantic.opacity.elevation.shadow.core": 0.16,
        "semantic.color.disabled.palette-inverse.increment": 0.025
    },
    "Core": {
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.color.red.100": "#FBF1F1",
        "core.color.red.200": "#FAE2E3",
        "core.color.red.300": "#FACAC6",
        "core.color.red.400": "#FEA5AA",
        "core.color.red.500": "#FF808A",
        "core.color.red.600": "#FD4369",
        "core.color.red.700": "#DD0A42",
        "core.color.red.800": "#AA001B",
        "core.color.red.900": "#7C0007",
        "core.color.red.1000": "#5C0906",
        "core.color.red.1100": "#3F0C06",
        "core.color.red.1200": "#1F0804",
        "core.color.aqua.100": "#EEF6F6",
        "core.color.aqua.200": "#DFEFF2",
        "core.color.aqua.300": "#B2DCEA",
        "core.color.aqua.400": "#83CBE5",
        "core.color.aqua.500": "#51B6DD",
        "core.color.aqua.600": "#0E98CC",
        "core.color.aqua.700": "#0377A8",
        "core.color.aqua.800": "#005885",
        "core.color.aqua.900": "#003D63",
        "core.color.aqua.1000": "#002F4B",
        "core.color.aqua.1100": "#001E32",
        "core.color.aqua.1200": "#00111D",
        "core.color.blue.100": "#F0F7FC",
        "core.color.blue.200": "#DBEAF5",
        "core.color.blue.300": "#C3D7E9",
        "core.color.blue.400": "#ADC6DC",
        "core.color.blue.500": "#8DAFD1",
        "core.color.blue.600": "#6590BD",
        "core.color.blue.700": "#3F72B1",
        "core.color.blue.800": "#1A5393",
        "core.color.blue.900": "#003781",
        "core.color.blue.1000": "#00266d",
        "core.color.blue.1100": "#001955",
        "core.color.blue.1200": "#000f39",
        "core.color.gray.100": "#f4f4f5",
        "core.color.gray.200": "#e9eaeb",
        "core.color.gray.300": "#d7d9db",
        "core.color.gray.400": "#c0c4c7",
        "core.color.gray.500": "#a7acb1",
        "core.color.gray.600": "#888f96",
        "core.color.gray.700": "#68727b",
        "core.color.gray.800": "#495560",
        "core.color.gray.900": "#2f3c49",
        "core.color.gray.1000": "#202d3b",
        "core.color.gray.1100": "#12202e",
        "core.color.gray.1200": "#041321",
        "core.color.teal.100": "#E3F8F8",
        "core.color.teal.200": "#C2F0EF",
        "core.color.teal.300": "#8DE3E2",
        "core.color.teal.400": "#6DD2D0",
        "core.color.teal.500": "#46BAB8",
        "core.color.teal.600": "#1F9B9E",
        "core.color.teal.700": "#057C85",
        "core.color.teal.800": "#005C64",
        "core.color.teal.900": "#014248",
        "core.color.teal.1000": "#013134",
        "core.color.teal.1100": "#012325",
        "core.color.teal.1200": "#001213",
        "core.color.black": "#000000",
        "core.color.green.100": "#E7F9EB",
        "core.color.green.200": "#C0F3D1",
        "core.color.green.300": "#9AE5B4",
        "core.color.green.400": "#68D190",
        "core.color.green.500": "#34C270",
        "core.color.green.600": "#10A251",
        "core.color.green.700": "#05813C",
        "core.color.green.800": "#006028",
        "core.color.green.900": "#00450F",
        "core.color.green.1000": "#023409",
        "core.color.green.1100": "#052409",
        "core.color.green.1200": "#071108",
        "core.color.white": "#FFFFFF",
        "core.color.orange.100": "#FBF3E9",
        "core.color.orange.200": "#FCE2C8",
        "core.color.orange.300": "#FECA91",
        "core.color.orange.400": "#FFA456",
        "core.color.orange.500": "#FF8939",
        "core.color.orange.600": "#EA6308",
        "core.color.orange.700": "#C34800",
        "core.color.orange.800": "#933400",
        "core.color.orange.900": "#682500",
        "core.color.orange.1000": "#4E1D01",
        "core.color.orange.1100": "#361503",
        "core.color.orange.1200": "#1B0A03",
        "core.color.purple.100": "#FDF1F7",
        "core.color.purple.200": "#F9E1ED",
        "core.color.purple.300": "#F4C9DF",
        "core.color.purple.400": "#EEAECB",
        "core.color.purple.500": "#E78EB3",
        "core.color.purple.600": "#DC6597",
        "core.color.purple.700": "#BD417F",
        "core.color.purple.800": "#962165",
        "core.color.purple.900": "#720849",
        "core.color.purple.1000": "#5B0037",
        "core.color.purple.1100": "#430023",
        "core.color.purple.1200": "#2A0010",
        "core.color.yellow.100": "#FEF5CD",
        "core.color.yellow.200": "#FBE6A7",
        "core.color.yellow.300": "#FAD066",
        "core.color.yellow.400": "#FAB600",
        "core.color.yellow.500": "#DBA103",
        "core.color.yellow.600": "#B48602",
        "core.color.yellow.700": "#8F6A00",
        "core.color.yellow.800": "#6A4E00",
        "core.color.yellow.900": "#4B3701",
        "core.color.yellow.1000": "#382A04",
        "core.color.yellow.1100": "#281D05",
        "core.color.yellow.1200": "#130E03",
        "core.color.darkblue.100": "#f2f4f9",
        "core.color.darkblue.200": "#e4eaf3",
        "core.color.darkblue.300": "#cfd9ea",
        "core.color.darkblue.400": "#b6c5de",
        "core.color.darkblue.500": "#98accf",
        "core.color.darkblue.600": "#758fbb",
        "core.color.darkblue.700": "#5371a4",
        "core.color.darkblue.800": "#335389",
        "core.color.darkblue.900": "#1c3a6c",
        "core.color.darkblue.1000": "#122b55",
        "core.color.darkblue.1100": "#0F1F3A",
        "core.color.darkblue.1200": "#091223",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "core.breakpoint.s": 320.0,
        "core.breakpoint.max-width.xs": 319.0,
        "core.motion.duration.500": "0.5s",
        "core.scaling.75": 0.99,
        "core.scaling.100": 1.0,
        "core.breakpoint.xs": 0.0,
        "core.motion.duration.250": "0.25s",
        "core.font-weight.150": 600.0,
        "core.breakpoint.l": 992.0,
        "core.breakpoint.m": 704.0,
        "core.breakpoint.max-width.xl": 1471.0,
        "core.breakpoint.max-width.l": 1279.0,
        "core.breakpoint.3xl": 1760.0,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "core.dimension.200": 8.0,
        "core.border-radius.100": 8.0,
        "core.dimension.300": 12.0,
        "core.dimension.1000": 40.0,
        "core.dimension.400": 16.0,
        "core.grid.column-gap.xs": 16.0,
        "core.border-radius.200": 16.0,
        "core.grid.column-gap.s": 16.0,
        "core.dimension.500": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "core.grid.inset.horizontal.2xl": 64.0,
        "core.grid.inset.horizontal.xl": 64.0,
        "core.grid.inset.horizontal.3xl": 64.0,
        "core.grid.inset.horizontal.l": 64.0,
        "core.dimension.1500": 60.0,
        "core.dimension.25": 1.0,
        "core.border-width.100": 1.0,
        "core.dimension.2400": 96.0,
        "core.dimension.1200": 48.0,
        "core.grid.inset.horizontal.m": 48.0,
        "core.dimension.0": 0.0,
        "core.border-radius.0": 0.0,
        "core.dimension.800": 32.0,
        "core.grid.column-gap.3xl": 32.0,
        "core.grid.column-gap.xl": 32.0,
        "core.grid.column-gap.m": 32.0,
        "core.grid.column-gap.l": 32.0,
        "core.grid.column-gap.2xl": 32.0,
        "core.border-radius.50": 4.0,
        "core.dimension.50": 2.0,
        "core.border-width.200": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "core.grid.inset.horizontal.s": 24.0,
        "core.grid.inset.horizontal.xs": 24.0,
        "core.dimension.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "core.dimension.900": 36.0,
        "core.breakpoint.xl": "1280.0px",
        "core.breakpoint.max-width.s": 703.0,
        "core.breakpoint.max-width.2xl": 1759.0,
        "core.breakpoint.max-width.m": 991.0,
        "core.font-weight.200": 700.0,
        "core.scaling.50": 0.975,
        "core.font-weight.100": 400.0,
        "core.breakpoint.2xl": "1472.0px",
        "core.scaling.25": 0.95,
        "core.grid.max-width": 1344.0,
        "core.grid.baseline": 4.0,
        "core.motion.duration.0": "0.0s",
        "core.motion.duration.100": "0.1s"
    },
    "Composites": {
        "semantic.elevation.100": [
            {
                "x": "{semantic.dimension.elevation.core.100.x}",
                "y": "{semantic.dimension.elevation.core.100.y}",
                "blur": "{semantic.dimension.elevation.core.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.100.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.100.x}",
                "y": "{semantic.dimension.elevation.cast.100.y}",
                "blur": "{semantic.dimension.elevation.cast.100.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.100.spread}"
            }
        ],
        "semantic.elevation.200": [
            {
                "x": "{semantic.dimension.elevation.core.200.x}",
                "y": "{semantic.dimension.elevation.core.200.y}",
                "blur": "{semantic.dimension.elevation.core.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.200.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.200.x}",
                "y": "{semantic.dimension.elevation.cast.200.y}",
                "blur": "{semantic.dimension.elevation.cast.200.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.200.spread}"
            }
        ],
        "semantic.elevation.300": [
            {
                "x": "{semantic.dimension.elevation.core.300.x}",
                "y": "{semantic.dimension.elevation.core.300.y}",
                "blur": "{semantic.dimension.elevation.core.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.300.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.300.x}",
                "y": "{semantic.dimension.elevation.cast.300.y}",
                "blur": "{semantic.dimension.elevation.cast.300.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.300.spread}"
            }
        ],
        "semantic.elevation.400": [
            {
                "x": "{semantic.dimension.elevation.core.400.x}",
                "y": "{semantic.dimension.elevation.core.400.y}",
                "blur": "{semantic.dimension.elevation.core.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.400.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.400.x}",
                "y": "{semantic.dimension.elevation.cast.400.y}",
                "blur": "{semantic.dimension.elevation.cast.400.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.400.spread}"
            }
        ],
        "semantic.elevation.500": [
            {
                "x": "{semantic.dimension.elevation.core.500.x}",
                "y": "{semantic.dimension.elevation.core.500.y}",
                "blur": "{semantic.dimension.elevation.core.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.core}",
                "spread": "{semantic.dimension.elevation.core.500.spread}"
            },
            {
                "x": "{semantic.dimension.elevation.cast.500.x}",
                "y": "{semantic.dimension.elevation.cast.500.y}",
                "blur": "{semantic.dimension.elevation.cast.500.blur}",
                "type": "dropShadow",
                "color": "{semantic.color.elevation.shadow.cast}",
                "spread": "{semantic.dimension.elevation.cast.500.spread}"
            }
        ],
        "core.border-position.inside": "inside",
        "core.border-position.outside": "outside",
        "core.color.red.100": "#FBF1F1",
        "core.color.red.200": "#FAE2E3",
        "core.color.red.300": "#FACAC6",
        "core.color.red.400": "#FEA5AA",
        "core.color.red.500": "#FF808A",
        "core.color.red.600": "#FD4369",
        "core.color.red.700": "#DD0A42",
        "core.color.red.800": "#AA001B",
        "core.color.red.900": "#7C0007",
        "core.color.red.1000": "#5C0906",
        "core.color.red.1100": "#3F0C06",
        "core.color.red.1200": "#1F0804",
        "core.color.aqua.100": "#EEF6F6",
        "core.color.aqua.200": "#DFEFF2",
        "core.color.aqua.300": "#B2DCEA",
        "core.color.aqua.400": "#83CBE5",
        "core.color.aqua.500": "#51B6DD",
        "core.color.aqua.600": "#0E98CC",
        "core.color.aqua.700": "#0377A8",
        "core.color.aqua.800": "#005885",
        "core.color.aqua.900": "#003D63",
        "core.color.aqua.1000": "#002F4B",
        "core.color.aqua.1100": "#001E32",
        "core.color.aqua.1200": "#00111D",
        "core.color.blue.100": "#F0F7FC",
        "core.color.blue.200": "#DBEAF5",
        "core.color.blue.300": "#C3D7E9",
        "core.color.blue.400": "#ADC6DC",
        "core.color.blue.500": "#8DAFD1",
        "core.color.blue.600": "#6590BD",
        "core.color.blue.700": "#3F72B1",
        "core.color.blue.800": "#1A5393",
        "core.color.blue.900": "#003781",
        "core.color.blue.1000": "#00266d",
        "core.color.blue.1100": "#001955",
        "core.color.blue.1200": "#000f39",
        "core.color.gray.100": "#f4f4f5",
        "core.color.gray.200": "#e9eaeb",
        "core.color.gray.300": "#d7d9db",
        "core.color.gray.400": "#c0c4c7",
        "core.color.gray.500": "#a7acb1",
        "core.color.gray.600": "#888f96",
        "core.color.gray.700": "#68727b",
        "core.color.gray.800": "#495560",
        "core.color.gray.900": "#2f3c49",
        "core.color.gray.1000": "#202d3b",
        "core.color.gray.1100": "#12202e",
        "core.color.gray.1200": "#041321",
        "core.color.teal.100": "#E3F8F8",
        "core.color.teal.200": "#C2F0EF",
        "core.color.teal.300": "#8DE3E2",
        "core.color.teal.400": "#6DD2D0",
        "core.color.teal.500": "#46BAB8",
        "core.color.teal.600": "#1F9B9E",
        "core.color.teal.700": "#057C85",
        "core.color.teal.800": "#005C64",
        "core.color.teal.900": "#014248",
        "core.color.teal.1000": "#013134",
        "core.color.teal.1100": "#012325",
        "core.color.teal.1200": "#001213",
        "core.color.black": "#000000",
        "core.color.green.100": "#E7F9EB",
        "core.color.green.200": "#C0F3D1",
        "core.color.green.300": "#9AE5B4",
        "core.color.green.400": "#68D190",
        "core.color.green.500": "#34C270",
        "core.color.green.600": "#10A251",
        "core.color.green.700": "#05813C",
        "core.color.green.800": "#006028",
        "core.color.green.900": "#00450F",
        "core.color.green.1000": "#023409",
        "core.color.green.1100": "#052409",
        "core.color.green.1200": "#071108",
        "core.color.white": "#FFFFFF",
        "core.color.orange.100": "#FBF3E9",
        "core.color.orange.200": "#FCE2C8",
        "core.color.orange.300": "#FECA91",
        "core.color.orange.400": "#FFA456",
        "core.color.orange.500": "#FF8939",
        "core.color.orange.600": "#EA6308",
        "core.color.orange.700": "#C34800",
        "core.color.orange.800": "#933400",
        "core.color.orange.900": "#682500",
        "core.color.orange.1000": "#4E1D01",
        "core.color.orange.1100": "#361503",
        "core.color.orange.1200": "#1B0A03",
        "core.color.purple.100": "#FDF1F7",
        "core.color.purple.200": "#F9E1ED",
        "core.color.purple.300": "#F4C9DF",
        "core.color.purple.400": "#EEAECB",
        "core.color.purple.500": "#E78EB3",
        "core.color.purple.600": "#DC6597",
        "core.color.purple.700": "#BD417F",
        "core.color.purple.800": "#962165",
        "core.color.purple.900": "#720849",
        "core.color.purple.1000": "#5B0037",
        "core.color.purple.1100": "#430023",
        "core.color.purple.1200": "#2A0010",
        "core.color.yellow.100": "#FEF5CD",
        "core.color.yellow.200": "#FBE6A7",
        "core.color.yellow.300": "#FAD066",
        "core.color.yellow.400": "#FAB600",
        "core.color.yellow.500": "#DBA103",
        "core.color.yellow.600": "#B48602",
        "core.color.yellow.700": "#8F6A00",
        "core.color.yellow.800": "#6A4E00",
        "core.color.yellow.900": "#4B3701",
        "core.color.yellow.1000": "#382A04",
        "core.color.yellow.1100": "#281D05",
        "core.color.yellow.1200": "#130E03",
        "core.color.darkblue.100": "#f2f4f9",
        "core.color.darkblue.200": "#e4eaf3",
        "core.color.darkblue.300": "#cfd9ea",
        "core.color.darkblue.400": "#b6c5de",
        "core.color.darkblue.500": "#98accf",
        "core.color.darkblue.600": "#758fbb",
        "core.color.darkblue.700": "#5371a4",
        "core.color.darkblue.800": "#335389",
        "core.color.darkblue.900": "#1c3a6c",
        "core.color.darkblue.1000": "#122b55",
        "core.color.darkblue.1100": "#0F1F3A",
        "core.color.darkblue.1200": "#091223",
        "core.text-case.none": "none",
        "core.text-case.uppercase": "uppercase",
        "core.font-family.primary": "Allianz Neo",
        "core.text-decoration.none": "none",
        "core.text-decoration.underline": "underline",
        "semantic.color.disabled.palette.increment": 0.0225,
        "semantic.font-size.shrink-ratio.headline": 1.15,
        "semantic.opacity.elevation.overlay.200": 0.0,
        "semantic.opacity.elevation.overlay.100": 0.0,
        "semantic.color.disabled.palette-inverse.treshhold": 0.3,
        "semantic.opacity.elevation.shadow.cast": 0.12,
        "core.scaling.75": 0.99,
        "semantic.scaling.shrink.s": 0.99,
        "core.scaling.100": 1.0,
        "semantic.scaling.initial": 1.0,
        "semantic.opacity.elevation.shadow.core": 0.16,
        "core.font-weight.150": 600.0,
        "semantic.font-weight.headline.larger": 600.0,
        "semantic.color.disabled.palette.treshhold": 0.04,
        "semantic.color.on-disabled.palette-inverse.increment": 0.01,
        "semantic.font-size.shrink-ratio.body": 1.15,
        "core.font-size.user-agent": 16.0,
        "core.dimension.100": 4.0,
        "core.dimension.250": 10.0,
        "core.dimension.200": 8.0,
        "semantic.spacing.static.200": 8.0,
        "semantic.spacing.dynamic-m.200": 8.0,
        "semantic.dimension.elevation.core.200.blur": 8.0,
        "semantic.dimension.elevation.core.400.y": 8.0,
        "semantic.dimension.elevation.cast.200.y": 8.0,
        "semantic.spacing.dynamic-s.200": 8.0,
        "semantic.spacing.dynamic-l.200": 8.0,
        "core.border-radius.100": 8.0,
        "semantic.spacing.static.100": 4.0,
        "core.dimension.300": 12.0,
        "semantic.spacing.static.300": 12.0,
        "semantic.spacing.dynamic-l.300": 12.0,
        "semantic.spacing.dynamic-s.300": 12.0,
        "semantic.spacing.dynamic-m.300": 12.0,
        "semantic.font-size.utility.xs": 12.0,
        "semantic.text.utility.default.xs.fontSize": 12.0,
        "semantic.text.utility.attention.xs.fontSize": 12.0,
        "core.dimension.1000": 40.0,
        "semantic.dimension.elevation.cast.400.blur": 40.0,
        "core.dimension.400": 16.0,
        "semantic.line-height.utility.xs": 16.0,
        "semantic.text.utility.attention.xs.lineHeight": 16.0,
        "semantic.text.utility.default.xs.lineHeight": 16.0,
        "semantic.dimension.elevation.core.300.blur": 16.0,
        "semantic.spacing.dynamic-m.400": 16.0,
        "semantic.dimension.elevation.core.500.y": 16.0,
        "semantic.dimension.elevation.cast.100.blur": 16.0,
        "semantic.dimension.elevation.cast.300.y": 16.0,
        "semantic.spacing.static.400": 16.0,
        "semantic.spacing.dynamic-s.400": 16.0,
        "semantic.spacing.dynamic-l.400": 16.0,
        "core.border-radius.200": 16.0,
        "semantic.dimension.elevation.core.100.blur": 4.0,
        "core.dimension.500": 20.0,
        "semantic.dimension.elevation.cast.400.y": 20.0,
        "core.dimension.650": 26.0,
        "core.dimension.1600": 64.0,
        "semantic.spacing.dynamic-s.1600": 64.0,
        "semantic.spacing.dynamic-l.1600": 64.0,
        "semantic.dimension.elevation.core.500.blur": 64.0,
        "semantic.spacing.dynamic-m.1600": 64.0,
        "semantic.spacing.static.1600": 64.0,
        "semantic.spacing.adjustment.icon.s": 4.0,
        "semantic.dimension.elevation.core.300.y": 4.0,
        "core.dimension.1500": 60.0,
        "semantic.dimension.elevation.cast.100.y": 4.0,
        "core.dimension.25": 1.0,
        "semantic.dimension.elevation.core.100.y": 1.0,
        "core.border-width.100": 1.0,
        "semantic.border-width.action": 1.0,
        "semantic.border-width.static": 1.0,
        "core.dimension.2400": 96.0,
        "semantic.spacing.dynamic-l.2400": 96.0,
        "semantic.spacing.static.2400": 96.0,
        "semantic.spacing.dynamic-m.2400": 96.0,
        "semantic.spacing.dynamic-s.2400": 96.0,
        "core.dimension.1200": 48.0,
        "semantic.spacing.dynamic-l.1200": 48.0,
        "semantic.spacing.static.1200": 48.0,
        "semantic.spacing.dynamic-s.1200": 48.0,
        "semantic.spacing.dynamic-m.1200": 48.0,
        "semantic.dimension.elevation.cast.500.blur": 48.0,
        "core.dimension.0": 0.0,
        "semantic.dimension.elevation.core.400.spread": 0.0,
        "semantic.dimension.elevation.core.100.spread": 0.0,
        "semantic.dimension.elevation.cast.300.spread": 0.0,
        "semantic.dimension.elevation.core.300.spread": 0.0,
        "core.border-radius.0": 0.0,
        "semantic.dimension.elevation.cast.100.x": 0.0,
        "semantic.dimension.elevation.cast.500.spread": 0.0,
        "semantic.dimension.elevation.core.200.spread": 0.0,
        "semantic.dimension.elevation.core.100.x": 0.0,
        "semantic.dimension.elevation.core.200.x": 0.0,
        "semantic.dimension.elevation.cast.400.x": 0.0,
        "semantic.dimension.elevation.cast.200.x": 0.0,
        "semantic.dimension.elevation.cast.500.x": 0.0,
        "semantic.dimension.elevation.cast.200.spread": 0.0,
        "semantic.dimension.elevation.core.400.x": 0.0,
        "semantic.dimension.elevation.cast.100.spread": 0.0,
        "semantic.dimension.elevation.core.500.spread": 0.0,
        "semantic.dimension.elevation.cast.300.x": 0.0,
        "semantic.dimension.elevation.core.500.x": 0.0,
        "semantic.dimension.elevation.core.300.x": 0.0,
        "semantic.dimension.elevation.cast.400.spread": 0.0,
        "core.dimension.800": 32.0,
        "semantic.spacing.dynamic-m.800": 32.0,
        "semantic.dimension.elevation.core.400.blur": 32.0,
        "semantic.spacing.dynamic-s.800": 32.0,
        "semantic.spacing.dynamic-l.800": 32.0,
        "semantic.spacing.static.800": 32.0,
        "semantic.dimension.elevation.cast.300.blur": 32.0,
        "core.border-radius.50": 4.0,
        "semantic.border-radius.surface.s": 4.0,
        "semantic.border-radius.action.s": 4.0,
        "semantic.spacing.dynamic-l.100": 4.0,
        "core.dimension.50": 2.0,
        "semantic.dimension.elevation.core.200.y": 2.0,
        "semantic.offset.focus": 2.0,
        "core.border-width.200": 2.0,
        "semantic.border-width.selected": 2.0,
        "core.dimension.150": 6.0,
        "core.dimension.600": 24.0,
        "semantic.dimension.elevation.cast.500.y": 24.0,
        "semantic.spacing.dynamic-l.600": 24.0,
        "semantic.dimension.elevation.cast.200.blur": 24.0,
        "semantic.spacing.dynamic-m.600": 24.0,
        "semantic.spacing.static.600": 24.0,
        "semantic.spacing.dynamic-s.600": 24.0,
        "core.dimension.1400": 56.0,
        "semantic.spacing.dynamic-m.1400": 56.0,
        "semantic.spacing.dynamic-l.1400": 56.0,
        "semantic.spacing.static.1400": 56.0,
        "semantic.spacing.dynamic-s.1400": 56.0,
        "core.dimension.4000": 160.0,
        "core.dimension.450": 18.0,
        "core.border-width.400": 4.0,
        "core.dimension.700": 28.0,
        "core.dimension.75": 3.0,
        "core.border-width.300": 3.0,
        "semantic.border-width.focus": 3.0,
        "core.dimension.1300": 52.0,
        "core.dimension.550": 22.0,
        "core.dimension.2000": 80.0,
        "core.dimension.350": 14.0,
        "semantic.spacing.dynamic-m.100": 4.0,
        "semantic.spacing.adjustment.icon.m": 4.0,
        "core.dimension.900": 36.0,
        "semantic.spacing.dynamic-s.100": 4.0,
        "semantic.font-size.base": 18.0,
        "semantic.font-size.headline.s": 16.0,
        "semantic.text.headline.s.fontSize": 16.0,
        "semantic.font-size.body.m": 18.0,
        "semantic.text.body.m.fontSize": 18.0,
        "semantic.font-size.utility.m": 18.0,
        "semantic.text.utility.default.m.fontSize": 18.0,
        "semantic.text.utility.attention.m.fontSize": 18.0,
        "semantic.font-size.headline.m": 18.0,
        "semantic.text.headline.m.fontSize": 18.0,
        "semantic.font-size.body.s": 16.0,
        "semantic.text.body.s.fontSize": 16.0,
        "semantic.font-size.shrink-ratio.utility": 1.15,
        "semantic.font-size.utility.s": 16.0,
        "semantic.text.utility.attention.s.fontSize": 16.0,
        "semantic.text.utility.default.s.fontSize": 16.0,
        "semantic.line-height.factor": 0.92,
        "semantic.font-weight.treshhold": 28.0,
        "semantic.letter-spacing.treshhold": 36.0,
        "semantic.color.on-disabled.palette-inverse.treshhold": 0.15,
        "semantic.spacing.modifier.clamp-larger.factor": 0.0,
        "semantic.spacing.modifier.clamp-larger.25": 0.0,
        "semantic.spacing.modifier.clamp-larger.100": 0.0,
        "semantic.spacing.modifier.clamp-larger.50": 0.0,
        "semantic.spacing.modifier.clamp-larger.300": 0.0,
        "semantic.spacing.modifier.clamp-larger.200": 0.0,
        "semantic.spacing.modifier.linear.factor": 0.0,
        "semantic.spacing.modifier.linear.200": 0.0,
        "semantic.spacing.modifier.linear.300": 0.0,
        "semantic.spacing.modifier.linear.100": 0.0,
        "semantic.spacing.modifier.linear.50": 0.0,
        "semantic.spacing.label.stack": 4.0,
        "semantic.border-radius.surface.l": 16.0,
        "semantic.spacing.modifier.linear.25": 0.0,
        "semantic.border-radius.action.m": 8.0,
        "semantic.border-radius.surface.m": 8.0,
        "semantic.color.on-disabled.palette.increment": 0.02,
        "semantic.letter-spacing.increment": 0.5,
        "semantic.opacity.elevation.overlay.300": 0.0,
        "semantic.max-width.text": 1088.0,
        "core.font-weight.200": 700.0,
        "semantic.font-weight.utility.attention": 700.0,
        "semantic.text.utility.attention.m.fontWeight": 700.0,
        "semantic.text.utility.attention.xs.fontWeight": 700.0,
        "semantic.text.utility.attention.s.fontWeight": 700.0,
        "semantic.font-weight.headline.smaller": 700.0,
        "semantic.font-weight.headline.m": 700.0,
        "semantic.text.headline.m.fontWeight": 700.0,
        "semantic.font-weight.headline.s": 700.0,
        "semantic.text.headline.s.fontWeight": 700.0,
        "core.scaling.50": 0.975,
        "semantic.scaling.shrink.m": 0.975,
        "semantic.spacing.modifier.clamp-smaller.factor": 0.0,
        "semantic.spacing.modifier.clamp-smaller.200": 0.0,
        "semantic.spacing.modifier.clamp-smaller.25": 0.0,
        "semantic.spacing.modifier.clamp-smaller.100": 0.0,
        "semantic.spacing.modifier.clamp-smaller.300": 0.0,
        "semantic.spacing.modifier.clamp-smaller.50": 0.0,
        "core.font-weight.100": 400.0,
        "semantic.font-weight.body": 400.0,
        "semantic.text.body.m.fontWeight": 400.0,
        "semantic.text.body.l.fontWeight": 400.0,
        "semantic.text.body.s.fontWeight": 400.0,
        "semantic.font-weight.utility.default": 400.0,
        "semantic.text.utility.default.m.fontWeight": 400.0,
        "semantic.text.utility.default.xs.fontWeight": 400.0,
        "semantic.text.utility.default.s.fontWeight": 400.0,
        "semantic.color.on-disabled.palette.treshhold": 0.4,
        "semantic.line-height.cushion.utility": 4.0,
        "semantic.line-height.cushion.headline": 6.0,
        "core.scaling.25": 0.95,
        "semantic.scaling.shrink.l": 0.95,
        "semantic.letter-spacing.base": 0.0,
        "semantic.letter-spacing.body.s": 0.0,
        "semantic.text.body.s.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.m": 0.0,
        "semantic.text.utility.default.m.letterSpacing": 0.0,
        "semantic.text.utility.attention.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.s": 0.0,
        "semantic.text.headline.s.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.xs": 0.0,
        "semantic.text.utility.default.xs.letterSpacing": 0.0,
        "semantic.text.utility.attention.xs.letterSpacing": 0.0,
        "semantic.letter-spacing.utility.s": 0.0,
        "semantic.text.utility.attention.s.letterSpacing": 0.0,
        "semantic.text.utility.default.s.letterSpacing": 0.0,
        "semantic.letter-spacing.body.m": 0.0,
        "semantic.text.body.m.letterSpacing": 0.0,
        "semantic.letter-spacing.headline.m": 0.0,
        "semantic.text.headline.m.letterSpacing": 0.0,
        "semantic.font-size.growth-ratio.body": 1.105,
        "semantic.font-size.body.l": 20.0,
        "semantic.text.body.l.fontSize": 20.0,
        "semantic.letter-spacing.body.l": 0.0,
        "semantic.text.body.l.letterSpacing": 0.0,
        "semantic.opacity.elevation.overlay.500": 0.0,
        "semantic.opacity.elevation.overlay.400": 0.0,
        "semantic.font-size.growth-ratio.headline": 1.2,
        "semantic.font-size.headline.6xl": 64.0,
        "semantic.letter-spacing.headline.6xl": -0.5,
        "semantic.text.headline.6xl.letterSpacing": -0.5,
        "semantic.text.headline.6xl.fontSize": 64.0,
        "semantic.font-size.headline.5xl": 54.0,
        "semantic.text.headline.5xl.fontSize": 54.0,
        "semantic.font-weight.headline.6xl": 600.0,
        "semantic.text.headline.6xl.fontWeight": 600.0,
        "semantic.font-weight.headline.5xl": 600.0,
        "semantic.text.headline.5xl.fontWeight": 600.0,
        "semantic.letter-spacing.headline.5xl": -0.5,
        "semantic.text.headline.5xl.letterSpacing": -0.5,
        "semantic.font-size.headline.3xl": 37.0,
        "semantic.letter-spacing.headline.3xl": -0.5,
        "semantic.text.headline.3xl.letterSpacing": -0.5,
        "semantic.text.headline.3xl.fontSize": 37.0,
        "semantic.font-weight.headline.3xl": 600.0,
        "semantic.text.headline.3xl.fontWeight": 600.0,
        "semantic.font-size.headline.xl": 26.0,
        "semantic.font-weight.headline.xl": 700.0,
        "semantic.text.headline.xl.fontWeight": 700.0,
        "semantic.text.headline.xl.fontSize": 26.0,
        "semantic.letter-spacing.headline.xl": 0.0,
        "semantic.font-size.headline.4xl": 45.0,
        "semantic.letter-spacing.headline.4xl": -0.5,
        "semantic.text.headline.4xl.letterSpacing": -0.5,
        "semantic.text.headline.4xl.fontSize": 45.0,
        "semantic.font-weight.headline.4xl": 600.0,
        "semantic.text.headline.4xl.fontWeight": 600.0,
        "semantic.font-size.headline.2xl": 31.0,
        "semantic.letter-spacing.headline.2xl": 0.0,
        "semantic.text.headline.2xl.letterSpacing": 0.0,
        "semantic.text.headline.xl.letterSpacing": 0.0,
        "semantic.font-weight.headline.2xl": 600.0,
        "semantic.text.headline.2xl.fontWeight": 600.0,
        "semantic.text.headline.2xl.fontSize": 31.0,
        "semantic.font-size.headline.l": 22.0,
        "semantic.text.headline.l.fontSize": 22.0,
        "semantic.font-weight.headline.l": 700.0,
        "semantic.text.headline.l.fontWeight": 700.0,
        "semantic.letter-spacing.headline.l": 0.0,
        "semantic.text.headline.l.letterSpacing": 0.0,
        "semantic.line-height.cushion.body": 6.0,
        "semantic.font-size.growth-ratio.utility": 1.105,
        "semantic.color.disabled.palette-inverse.increment": 0.025
    },
    "Lively": {
        "semantic.motion.easing.default.exit.x2": 1.0,
        "semantic.motion.easing.default.change.x2": 0.25,
        "semantic.motion.easing.default.exit.x1": 0.42,
        "semantic.motion.easing.default.enter.x2": 0.58,
        "semantic.motion.easing.default.enter.y1": 0.0,
        "semantic.motion.easing.default.change.x1": 0.25,
        "core.motion.duration.500": "0.5s",
        "semantic.motion.duration.slow": "0.5s",
        "semantic.motion.easing.default.enter.x1": 0.0,
        "semantic.motion.easing.default.exit.y2": 1.0,
        "semantic.motion.easing.default.exit.y1": 0.0,
        "semantic.motion.duration.modifier.slow-to-fast": 1.0,
        "core.motion.duration.250": "0.25s",
        "semantic.motion.duration.medium": "0.25s",
        "semantic.motion.easing.default.change.y2": 1.0,
        "semantic.motion.duration.modifier.medium-to-fast": 1.0,
        "semantic.motion.easing.default.change.y1": 0.1,
        "core.motion.duration.0": "0.0s",
        "semantic.motion.duration.modifier.slow-to-medium": 1.0,
        "semantic.motion.easing.default.enter.y2": 1.0,
        "core.motion.duration.100": "0.1s",
        "semantic.motion.duration.fast": "0.1s",
        "semantic.motion.transition.focus.duration": "0.1s"
    },
    "Minimal": {
        "semantic.motion.easing.default.exit.x2": 1.0,
        "semantic.motion.easing.default.change.x2": 0.25,
        "semantic.motion.easing.default.exit.x1": 0.42,
        "semantic.scaling.shrink.m": 1.0,
        "semantic.motion.easing.default.enter.x2": 0.58,
        "semantic.motion.easing.default.enter.y1": 0.0,
        "semantic.motion.easing.default.change.x1": 0.25,
        "core.motion.duration.500": "0.5s",
        "semantic.motion.duration.slow": "0.5s",
        "semantic.motion.easing.default.enter.x1": 0.0,
        "semantic.motion.easing.default.exit.y2": 1.0,
        "semantic.motion.easing.default.exit.y1": 0.0,
        "semantic.motion.duration.modifier.slow-to-fast": 4.0,
        "semantic.scaling.shrink.l": 1.0,
        "core.motion.duration.250": "0.25s",
        "semantic.motion.duration.medium": "0.25s",
        "semantic.motion.easing.default.change.y2": 1.0,
        "semantic.motion.duration.modifier.medium-to-fast": 2.0,
        "semantic.motion.easing.default.change.y1": 0.1,
        "core.motion.duration.0": "0.0s",
        "semantic.motion.duration.modifier.slow-to-medium": 2.0,
        "semantic.scaling.shrink.s": 1.0,
        "semantic.motion.easing.default.enter.y2": 1.0,
        "core.motion.duration.100": "0.1s",
        "semantic.motion.duration.fast": "0.1s",
        "semantic.motion.transition.focus.duration": "0.1s"
    }
}
```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/poetry.lock
```lock
# This file is automatically @generated by Poetry 2.1.1 and should not be changed by hand.

[[package]]
name = "colorama"
version = "0.4.6"
description = "Cross-platform colored terminal text."
optional = false
python-versions = "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*,!=3.6.*,>=2.7"
groups = ["main"]
markers = "sys_platform == \"win32\""
files = [
    {file = "colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6"},
    {file = "colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44"},
]

[[package]]
name = "coverage"
version = "7.8.0"
description = "Code coverage measurement for Python"
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "coverage-7.8.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:2931f66991175369859b5fd58529cd4b73582461877ecfd859b6549869287ffe"},
    {file = "coverage-7.8.0-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:52a523153c568d2c0ef8826f6cc23031dc86cffb8c6aeab92c4ff776e7951b28"},
    {file = "coverage-7.8.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5c8a5c139aae4c35cbd7cadca1df02ea8cf28a911534fc1b0456acb0b14234f3"},
    {file = "coverage-7.8.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:5a26c0c795c3e0b63ec7da6efded5f0bc856d7c0b24b2ac84b4d1d7bc578d676"},
    {file = "coverage-7.8.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:821f7bcbaa84318287115d54becb1915eece6918136c6f91045bb84e2f88739d"},
    {file = "coverage-7.8.0-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:a321c61477ff8ee705b8a5fed370b5710c56b3a52d17b983d9215861e37b642a"},
    {file = "coverage-7.8.0-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:ed2144b8a78f9d94d9515963ed273d620e07846acd5d4b0a642d4849e8d91a0c"},
    {file = "coverage-7.8.0-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:042e7841a26498fff7a37d6fda770d17519982f5b7d8bf5278d140b67b61095f"},
    {file = "coverage-7.8.0-cp310-cp310-win32.whl", hash = "sha256:f9983d01d7705b2d1f7a95e10bbe4091fabc03a46881a256c2787637b087003f"},
    {file = "coverage-7.8.0-cp310-cp310-win_amd64.whl", hash = "sha256:5a570cd9bd20b85d1a0d7b009aaf6c110b52b5755c17be6962f8ccd65d1dbd23"},
    {file = "coverage-7.8.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:e7ac22a0bb2c7c49f441f7a6d46c9c80d96e56f5a8bc6972529ed43c8b694e27"},
    {file = "coverage-7.8.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:bf13d564d310c156d1c8e53877baf2993fb3073b2fc9f69790ca6a732eb4bfea"},
    {file = "coverage-7.8.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a5761c70c017c1b0d21b0815a920ffb94a670c8d5d409d9b38857874c21f70d7"},
    {file = "coverage-7.8.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e5ff52d790c7e1628241ffbcaeb33e07d14b007b6eb00a19320c7b8a7024c040"},
    {file = "coverage-7.8.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d39fc4817fd67b3915256af5dda75fd4ee10621a3d484524487e33416c6f3543"},
    {file = "coverage-7.8.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:b44674870709017e4b4036e3d0d6c17f06a0e6d4436422e0ad29b882c40697d2"},
    {file = "coverage-7.8.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:8f99eb72bf27cbb167b636eb1726f590c00e1ad375002230607a844d9e9a2318"},
    {file = "coverage-7.8.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:b571bf5341ba8c6bc02e0baeaf3b061ab993bf372d982ae509807e7f112554e9"},
    {file = "coverage-7.8.0-cp311-cp311-win32.whl", hash = "sha256:e75a2ad7b647fd8046d58c3132d7eaf31b12d8a53c0e4b21fa9c4d23d6ee6d3c"},
    {file = "coverage-7.8.0-cp311-cp311-win_amd64.whl", hash = "sha256:3043ba1c88b2139126fc72cb48574b90e2e0546d4c78b5299317f61b7f718b78"},
    {file = "coverage-7.8.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:bbb5cc845a0292e0c520656d19d7ce40e18d0e19b22cb3e0409135a575bf79fc"},
    {file = "coverage-7.8.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:4dfd9a93db9e78666d178d4f08a5408aa3f2474ad4d0e0378ed5f2ef71640cb6"},
    {file = "coverage-7.8.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:f017a61399f13aa6d1039f75cd467be388d157cd81f1a119b9d9a68ba6f2830d"},
    {file = "coverage-7.8.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0915742f4c82208ebf47a2b154a5334155ed9ef9fe6190674b8a46c2fb89cb05"},
    {file = "coverage-7.8.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8a40fcf208e021eb14b0fac6bdb045c0e0cab53105f93ba0d03fd934c956143a"},
    {file = "coverage-7.8.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:a1f406a8e0995d654b2ad87c62caf6befa767885301f3b8f6f73e6f3c31ec3a6"},
    {file = "coverage-7.8.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:77af0f6447a582fdc7de5e06fa3757a3ef87769fbb0fdbdeba78c23049140a47"},
    {file = "coverage-7.8.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:f2d32f95922927186c6dbc8bc60df0d186b6edb828d299ab10898ef3f40052fe"},
    {file = "coverage-7.8.0-cp312-cp312-win32.whl", hash = "sha256:769773614e676f9d8e8a0980dd7740f09a6ea386d0f383db6821df07d0f08545"},
    {file = "coverage-7.8.0-cp312-cp312-win_amd64.whl", hash = "sha256:e5d2b9be5b0693cf21eb4ce0ec8d211efb43966f6657807f6859aab3814f946b"},
    {file = "coverage-7.8.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:5ac46d0c2dd5820ce93943a501ac5f6548ea81594777ca585bf002aa8854cacd"},
    {file = "coverage-7.8.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:771eb7587a0563ca5bb6f622b9ed7f9d07bd08900f7589b4febff05f469bea00"},
    {file = "coverage-7.8.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:42421e04069fb2cbcbca5a696c4050b84a43b05392679d4068acbe65449b5c64"},
    {file = "coverage-7.8.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:554fec1199d93ab30adaa751db68acec2b41c5602ac944bb19187cb9a41a8067"},
    {file = "coverage-7.8.0-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:5aaeb00761f985007b38cf463b1d160a14a22c34eb3f6a39d9ad6fc27cb73008"},
    {file = "coverage-7.8.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:581a40c7b94921fffd6457ffe532259813fc68eb2bdda60fa8cc343414ce3733"},
    {file = "coverage-7.8.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:f319bae0321bc838e205bf9e5bc28f0a3165f30c203b610f17ab5552cff90323"},
    {file = "coverage-7.8.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:04bfec25a8ef1c5f41f5e7e5c842f6b615599ca8ba8391ec33a9290d9d2db3a3"},
    {file = "coverage-7.8.0-cp313-cp313-win32.whl", hash = "sha256:dd19608788b50eed889e13a5d71d832edc34fc9dfce606f66e8f9f917eef910d"},
    {file = "coverage-7.8.0-cp313-cp313-win_amd64.whl", hash = "sha256:a9abbccd778d98e9c7e85038e35e91e67f5b520776781d9a1e2ee9d400869487"},
    {file = "coverage-7.8.0-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:18c5ae6d061ad5b3e7eef4363fb27a0576012a7447af48be6c75b88494c6cf25"},
    {file = "coverage-7.8.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:95aa6ae391a22bbbce1b77ddac846c98c5473de0372ba5c463480043a07bff42"},
    {file = "coverage-7.8.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e013b07ba1c748dacc2a80e69a46286ff145935f260eb8c72df7185bf048f502"},
    {file = "coverage-7.8.0-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d766a4f0e5aa1ba056ec3496243150698dc0481902e2b8559314368717be82b1"},
    {file = "coverage-7.8.0-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:ad80e6b4a0c3cb6f10f29ae4c60e991f424e6b14219d46f1e7d442b938ee68a4"},
    {file = "coverage-7.8.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:b87eb6fc9e1bb8f98892a2458781348fa37e6925f35bb6ceb9d4afd54ba36c73"},
    {file = "coverage-7.8.0-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:d1ba00ae33be84066cfbe7361d4e04dec78445b2b88bdb734d0d1cbab916025a"},
    {file = "coverage-7.8.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:f3c38e4e5ccbdc9198aecc766cedbb134b2d89bf64533973678dfcf07effd883"},
    {file = "coverage-7.8.0-cp313-cp313t-win32.whl", hash = "sha256:379fe315e206b14e21db5240f89dc0774bdd3e25c3c58c2c733c99eca96f1ada"},
    {file = "coverage-7.8.0-cp313-cp313t-win_amd64.whl", hash = "sha256:2e4b6b87bb0c846a9315e3ab4be2d52fac905100565f4b92f02c445c8799e257"},
    {file = "coverage-7.8.0-cp39-cp39-macosx_10_9_x86_64.whl", hash = "sha256:fa260de59dfb143af06dcf30c2be0b200bed2a73737a8a59248fcb9fa601ef0f"},
    {file = "coverage-7.8.0-cp39-cp39-macosx_11_0_arm64.whl", hash = "sha256:96121edfa4c2dfdda409877ea8608dd01de816a4dc4a0523356067b305e4e17a"},
    {file = "coverage-7.8.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6b8af63b9afa1031c0ef05b217faa598f3069148eeee6bb24b79da9012423b82"},
    {file = "coverage-7.8.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:89b1f4af0d4afe495cd4787a68e00f30f1d15939f550e869de90a86efa7e0814"},
    {file = "coverage-7.8.0-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:94ec0be97723ae72d63d3aa41961a0b9a6f5a53ff599813c324548d18e3b9e8c"},
    {file = "coverage-7.8.0-cp39-cp39-musllinux_1_2_aarch64.whl", hash = "sha256:8a1d96e780bdb2d0cbb297325711701f7c0b6f89199a57f2049e90064c29f6bd"},
    {file = "coverage-7.8.0-cp39-cp39-musllinux_1_2_i686.whl", hash = "sha256:f1d8a2a57b47142b10374902777e798784abf400a004b14f1b0b9eaf1e528ba4"},
    {file = "coverage-7.8.0-cp39-cp39-musllinux_1_2_x86_64.whl", hash = "sha256:cf60dd2696b457b710dd40bf17ad269d5f5457b96442f7f85722bdb16fa6c899"},
    {file = "coverage-7.8.0-cp39-cp39-win32.whl", hash = "sha256:be945402e03de47ba1872cd5236395e0f4ad635526185a930735f66710e1bd3f"},
    {file = "coverage-7.8.0-cp39-cp39-win_amd64.whl", hash = "sha256:90e7fbc6216ecaffa5a880cdc9c77b7418c1dcb166166b78dbc630d07f278cc3"},
    {file = "coverage-7.8.0-pp39.pp310.pp311-none-any.whl", hash = "sha256:b8194fb8e50d556d5849753de991d390c5a1edeeba50f68e3a9253fbd8bf8ccd"},
    {file = "coverage-7.8.0-py3-none-any.whl", hash = "sha256:dbf364b4c5e7bae9250528167dfe40219b62e2d573c854d74be213e1e52069f7"},
    {file = "coverage-7.8.0.tar.gz", hash = "sha256:7a3d62b3b03b4b6fd41a085f3574874cf946cb4604d2b4d3e8dca8cd570ca501"},
]

[package.extras]
toml = ["tomli ; python_full_version <= \"3.11.0a6\""]

[[package]]
name = "iniconfig"
version = "2.1.0"
description = "brain-dead simple config-ini parsing"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "iniconfig-2.1.0-py3-none-any.whl", hash = "sha256:9deba5723312380e77435581c6bf4935c94cbfab9b1ed33ef8d238ea168eb760"},
    {file = "iniconfig-2.1.0.tar.gz", hash = "sha256:3abbd2e30b36733fee78f9c7f7308f2d0050e88f0087fd25c2645f63c773e1c7"},
]

[[package]]
name = "packaging"
version = "24.2"
description = "Core utilities for Python packages"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "packaging-24.2-py3-none-any.whl", hash = "sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759"},
    {file = "packaging-24.2.tar.gz", hash = "sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f"},
]

[[package]]
name = "pluggy"
version = "1.5.0"
description = "plugin and hook calling mechanisms for python"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "pluggy-1.5.0-py3-none-any.whl", hash = "sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669"},
    {file = "pluggy-1.5.0.tar.gz", hash = "sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1"},
]

[package.extras]
dev = ["pre-commit", "tox"]
testing = ["pytest", "pytest-benchmark"]

[[package]]
name = "py-spy"
version = "0.4.0"
description = "Sampling profiler for Python programs"
optional = false
python-versions = "*"
groups = ["main"]
files = [
    {file = "py_spy-0.4.0-py2.py3-none-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl", hash = "sha256:f2cf3f7130e7d780471faa5957441d3b4e0ec39a79b2c00f4c33d494f7728428"},
    {file = "py_spy-0.4.0-py2.py3-none-macosx_11_0_arm64.whl", hash = "sha256:47cdda4c34d9b6cb01f3aaeceb2e88faf57da880207fe72ff6ff97e9bb6cc8a9"},
    {file = "py_spy-0.4.0-py2.py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:eee3d0bde85ca5cf4f01f012d461180ca76c24835a96f7b5c4ded64eb6a008ab"},
    {file = "py_spy-0.4.0-py2.py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:c5f06ffce4c9c98b7fc9f5e67e5e7db591173f1351837633f3f23d9378b1d18a"},
    {file = "py_spy-0.4.0-py2.py3-none-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:87573e64dbfdfc89ba2e0f5e2f525aa84e0299c7eb6454b47ea335fde583a7a0"},
    {file = "py_spy-0.4.0-py2.py3-none-manylinux_2_5_x86_64.manylinux1_x86_64.whl", hash = "sha256:8bf2f3702cef367a489faa45177b41a6c31b2a3e5bd78c978d44e29340152f5a"},
    {file = "py_spy-0.4.0-py2.py3-none-win_amd64.whl", hash = "sha256:77d8f637ade38367d944874776f45b703b7ac5938b1f7be8891f3a5876ddbb96"},
    {file = "py_spy-0.4.0.tar.gz", hash = "sha256:806602ce7972782cc9c1e383f339bfc27bfb822d42485e6a3e0530ae5040e1f0"},
]

[[package]]
name = "pytest"
version = "8.3.5"
description = "pytest: simple powerful testing with Python"
optional = false
python-versions = ">=3.8"
groups = ["main"]
files = [
    {file = "pytest-8.3.5-py3-none-any.whl", hash = "sha256:c69214aa47deac29fad6c2a4f590b9c4a9fdb16a403176fe154b79c0b4d4d820"},
    {file = "pytest-8.3.5.tar.gz", hash = "sha256:f4efe70cc14e511565ac476b57c279e12a855b11f48f212af1080ef2263d3845"},
]

[package.dependencies]
colorama = {version = "*", markers = "sys_platform == \"win32\""}
iniconfig = "*"
packaging = "*"
pluggy = ">=1.5,<2"

[package.extras]
dev = ["argcomplete", "attrs (>=19.2)", "hypothesis (>=3.56)", "mock", "pygments (>=2.7.2)", "requests", "setuptools", "xmlschema"]

[[package]]
name = "pytest-cov"
version = "6.1.0"
description = "Pytest plugin for measuring coverage."
optional = false
python-versions = ">=3.9"
groups = ["main"]
files = [
    {file = "pytest_cov-6.1.0-py3-none-any.whl", hash = "sha256:cd7e1d54981d5185ef2b8d64b50172ce97e6f357e6df5cb103e828c7f993e201"},
    {file = "pytest_cov-6.1.0.tar.gz", hash = "sha256:ec55e828c66755e5b74a21bd7cc03c303a9f928389c0563e50ba454a6dbe71db"},
]

[package.dependencies]
coverage = {version = ">=7.5", extras = ["toml"]}
pytest = ">=4.6"

[package.extras]
testing = ["fields", "hunter", "process-tests", "pytest-xdist", "virtualenv"]

[[package]]
name = "ruff"
version = "0.11.3"
description = "An extremely fast Python linter and code formatter, written in Rust."
optional = false
python-versions = ">=3.7"
groups = ["main"]
files = [
    {file = "ruff-0.11.3-py3-none-linux_armv6l.whl", hash = "sha256:cb893a5eedff45071d52565300a20cd4ac088869e156b25e0971cb98c06f5dd7"},
    {file = "ruff-0.11.3-py3-none-macosx_10_12_x86_64.whl", hash = "sha256:58edd48af0e201e2f494789de80f5b2f2b46c9a2991a12ea031254865d5f6aa3"},
    {file = "ruff-0.11.3-py3-none-macosx_11_0_arm64.whl", hash = "sha256:520f6ade25cea98b2e5cb29eb0906f6a0339c6b8e28a024583b867f48295f1ed"},
    {file = "ruff-0.11.3-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d1ca4405a93ebbc05e924358f872efceb1498c3d52a989ddf9476712a5480b16"},
    {file = "ruff-0.11.3-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:f4341d38775a6be605ce7cd50e951b89de65cbd40acb0399f95b8e1524d604c8"},
    {file = "ruff-0.11.3-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:72bf5b49e4b546f4bea6c05448ab71919b09cf75363adf5e3bf5276124afd31c"},
    {file = "ruff-0.11.3-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl", hash = "sha256:9fa791ee6c3629ba7f9ba2c8f2e76178b03f3eaefb920e426302115259819237"},
    {file = "ruff-0.11.3-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:2c81d3fe718f4d303aaa4ccdcd0f43e23bb2127da3353635f718394ca9b26721"},
    {file = "ruff-0.11.3-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:4e4c38e9b6c01caaba46b6d8e732791f4c78389a9923319991d55b298017ce02"},
    {file = "ruff-0.11.3-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9686f5d1a2b4c918b5a6e9876bfe7f47498a990076624d41f57d17aadd02a4dd"},
    {file = "ruff-0.11.3-py3-none-musllinux_1_2_aarch64.whl", hash = "sha256:4800ddc4764d42d8961ce4cb972bcf5cc2730d11cca3f11f240d9f7360460408"},
    {file = "ruff-0.11.3-py3-none-musllinux_1_2_armv7l.whl", hash = "sha256:e63a2808879361aa9597d88d86380d8fb934953ef91f5ff3dafe18d9cb0b1e14"},
    {file = "ruff-0.11.3-py3-none-musllinux_1_2_i686.whl", hash = "sha256:8f8b1c4ae62638cc220df440140c21469232d8f2cb7f5059f395f7f48dcdb59e"},
    {file = "ruff-0.11.3-py3-none-musllinux_1_2_x86_64.whl", hash = "sha256:3ea2026be50f6b1fbedd2d1757d004e1e58bd0f414efa2a6fa01235468d4c82a"},
    {file = "ruff-0.11.3-py3-none-win32.whl", hash = "sha256:73d8b90d12674a0c6e98cd9e235f2dcad09d1a80e559a585eac994bb536917a3"},
    {file = "ruff-0.11.3-py3-none-win_amd64.whl", hash = "sha256:faf1bfb0a51fb3a82aa1112cb03658796acef978e37c7f807d3ecc50b52ecbf6"},
    {file = "ruff-0.11.3-py3-none-win_arm64.whl", hash = "sha256:67f8b68d7ab909f08af1fb601696925a89d65083ae2bb3ab286e572b5dc456aa"},
    {file = "ruff-0.11.3.tar.gz", hash = "sha256:8d5fcdb3bb359adc12b757ed832ee743993e7474b9de714bb9ea13c4a8458bf9"},
]

[metadata]
lock-version = "2.1"
python-versions = ">=3.12"
content-hash = "a16237e904de1df373061feb73de245b509dd13557115249724bdec978b820d0"

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/pyproject.toml
```toml
[project]
name = "ts-design-tokens-interpreter"
version = "0.1.0"
description = ""
authors = [
    {name = "Lilith Wittmann",email = "mail@lilithwittmann.de"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pytest (>=8.3.5,<9.0.0)",
    "pytest-cov (>=6.1.0,<7.0.0)",
    "ruff (>=0.11.3,<0.12.0)",
    "py-spy (>=0.4.0,<0.5.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/README.md
```md
# Design tokens interpreter
This repository contains a proof of concept for a design tokens interpreter. It takes tokenset ZIPs and transform them into compiled tokensts objects. It is written in pure python 3.12 but optionally you can install `pytest` (preferably via poetry) to run the tests.

**Steps we take**
- unzip the tokenset and parse the sets and themes
- compile the tokensets into a list of unresolved tokens per theme
- run a lexer and parser on the tokensets (and cache the results)
- create a dependencytree by marking interdependencies of tokens in a dictionary
- we start iterating through all tokens which don't have any dependencies
- every time we resolve a token, we mark it as resolved in all tokens that depend on it
- if the new token has no dependencies, we can resolve it and mark it as resolved…

**Known issues**
- we don't support color functions
- the fallback from a interpreter token to just a string is quite hacky (basically a try…except)
- we don't support tokens which value is again made up of lists/objects yet. The strategy for preflattening the set is a bit naive.

## Usage
Compile an entire tokenset:
```bash
python3 main.py parse_tokenset --tokenset "tests/fixtures/big_set.zip"
```

Playground with the interpreter:
```bash
python3 main.py interactive
```

Now you can either directly pass in the expression you want to interpret or set variables (not interpreted) by typing `set_variables`.

```

File: /Users/mck/WebstormProjects/prototype-tokens-interpreter-py/token_set_interpreter.py
```py
import os
import json
from timeit import timeit
import logging
from typing import List

from config import UNINTERPRETED_KEYWORDS
from token_interpreter import Lexer, Parser, Interpreter
from token_interpreter.errors import InterpreterError


def load_token_sets(path):
    """
    Loads token sets from a given path recursively.
    :param path: Path to the directory containing token sets.
    :return: List of loaded token sets.
    """
    token_sets = {}
    for filename in os.listdir(path):
        if filename.endswith(".json"):
            with open(os.path.join(path, filename), "r") as file:
                token_set = json.load(file)
                token_sets[filename.replace(".json", "")] = token_set

        elif os.path.isdir(os.path.join(path, filename)):
            nested_token_sets = load_token_sets(os.path.join(path, filename))
            for nested_filename, nested_token_set in nested_token_sets.items():
                token_sets[f"{filename}/{nested_filename.replace('json', '')}"] = (
                    nested_token_set
                )

    return token_sets


def flatten_tokenset(tokenset, prefix="", resolve_all=False):
    """
    Flattens a token set by merging all tokens into a single dictionary.
    :param tokenset: Dictionary of token sets.
    :return: Flattened dictionary of tokens.
    """
    flattened_tokens = {}
    for set_name, set_data in tokenset.items():
        if isinstance(set_data, dict):
            if set_name == "$value" or resolve_all:
                for name, value in set_data.items():
                    if prefix:
                        name = f"{prefix}.{name}"
                    flattened_tokens[name] = value
                # print(flattened_tokens)
                continue

            elif set_name.startswith("$"):
                # Skip special keys
                continue
            # Recursively flatten nested dictionaries
            if prefix:
                set_name = f"{prefix}.{set_name}"
            else:
                set_name = set_name
            # print(set_data)
            nested_tokens = flatten_tokenset(set_data, prefix=set_name)
            flattened_tokens.update(nested_tokens)

        elif isinstance(set_data, list):
            # Flatten the list of tokens
            for index, value in enumerate(set_data):
                if prefix:
                    name = f"{prefix}.{index}"
                else:
                    name = str(index)
                flattened_tokens.update(
                    flatten_tokenset(value, prefix=name, resolve_all=True)
                )

        else:
            # Flatten the token set
            if set_name in ["value", "$value"]:
                flattened_tokens[f"{prefix}"] = set_data

    return flattened_tokens


def load_themes(tokensets):
    """
    Loads themes from the token sets.
    :param tokensets: Dictionary of token sets.
    :return: Dictionary of themes.
    """

    if "$themes" not in tokensets:
        raise ValueError("No themes found in the token sets.")

    theme_tokens = {}
    themes_data = tokensets["$themes"]

    for theme in themes_data:
        theme_name = theme["name"]
        theme_tokens[theme_name] = {}
        for set_name, status in theme["selectedTokenSets"].items():
            if status == "enabled" or status == "source":
                # add all tokensets to one dictionary
                if set_name not in tokensets:
                    raise ValueError(
                        f"Token set '{set_name}' referenced in '{theme_name}' not found."
                    )
                theme_tokens[theme_name].update(flatten_tokenset(tokensets[set_name]))

    return theme_tokens


class TokenSetResolver:
    def __init__(self, tokens, global_tokens):
        self.tokens = tokens
        self.resolved_tokens = global_tokens
        self.required_by_tokens = {}
        self.requires_tokens = {}
        self.parsers = {}
        self.logger = logging.getLogger(__name__)
        self._reference_cache = Interpreter(None, self.resolved_tokens, inline=True)

    def _build_requirements_graph(self) -> None:
        """
        Builds a requirements graph for the token set.
        This graph is used to resolve dependencies between tokens.

        The graph is built by iterating through all tokens and checking for
        dependencies. If a token has a dependency on another token, it is added
        to the `requires_tokens` dictionary. If a token is required by another
        token, it is added to the `required_by_tokens` dictionary (so the reverse).

        :return:
        """
        for token_name, token_data in self.tokens.items():
            if token_data in UNINTERPRETED_KEYWORDS:
                self.resolved_tokens[token_name] = token_data
                continue
            parser = None
            try:
                lexer = Lexer(token_data)
                if lexer.is_eof:
                    self.resolved_tokens[token_name] = token_data
                parser = Parser(lexer)
                self.parsers[token_name] = parser.parse()
            except Exception as e:
                self.logger.warn(f"Error parsing token '{token_name}': {e} (value: {token_data})")
                self.resolved_tokens[token_name] = token_data

            if parser:
                if token_name in parser.required_references:
                    self.logger.warn(
                        f"Token '{token_name}' has a circular reference to itself."
                    )
                for token in parser.required_references:
                    if token_name not in self.requires_tokens:
                        self.requires_tokens[token_name] = set()
                    if token not in self.required_by_tokens:
                        self.required_by_tokens[token] = set()
                    self.required_by_tokens[token].add(token_name)
                    self.requires_tokens[token_name].add(token)

    def _resolve_single_token(self, token_name: str) -> None:
        """
        Resolves a single token into its value.

        Afterwards it checks if any other tokens are dependent on this token and removes the dependency. Then it resolves
        those tokens as well.

        :param token_name: Name of the token to resolve.
        :return: Resolved value of the token.
        """



        if token_name not in self.tokens:
            raise ValueError(f"Token '{token_name}' not found.")

        if token_name not in self.resolved_tokens:

            interpreter = Interpreter(
                self.parsers[token_name], {}, inline=True
            )
            interpreter._references = self._reference_cache._references

            try:
                self.resolved_tokens[token_name] = interpreter._interpret(
                    self.parsers[token_name]
                )
            except Exception as e:
                self.logger.warn(
                    f"Error interpreting token '{token_name}': {e} (value: {self.tokens[token_name]})"
                )
                self.resolved_tokens[token_name] = self.tokens[token_name]

        # store in the central reference cache
        self._reference_cache.set_references(
            {
                token_name: self.resolved_tokens[token_name]
            }
        )

        # print(f"Resolving token '{token_name}' with dependencies: {self.required_by_tokens[token_name]}")
        if token_name in self.required_by_tokens:
            for dependent_token in self.required_by_tokens[token_name]:
                self.requires_tokens[dependent_token].remove(token_name)

                if len(self.requires_tokens[dependent_token]) == 0:
                    self._resolve_single_token(dependent_token)

        if token_name in self.requires_tokens:
            del self.requires_tokens[token_name]


    def resolve(self) -> dict[str, str]:
        """
        Resolves the token set into a single dictionary.
        :return: Resolved dictionary of tokens.
        """

        self._build_requirements_graph()


        for token_name in (
            set(self.tokens.keys())
            - set(self.requires_tokens.keys())
        ):
            self._resolve_single_token(token_name)

        non_resolved_tokens = set(list(self.tokens.keys())) - set(list(self.resolved_tokens.keys()))
        if len(non_resolved_tokens) > 0:
            self.logger.warn(
                f"Not all tokens could be resolved. Remaining tokens: {[{token: self.tokens[token]} for token in non_resolved_tokens] }"
            )

            #print(self.requires_tokens)
            #print(self.required_by_tokens)

        return self.resolved_tokens


def process_themes(themes):
    """
    Processes the themes and resolves the tokens.
    :param themes: Dictionary of themes.
    :return: Dictionary of resolved tokens.
    """
    sum_tokens = 0
    output_tokens = {}
    global_tokens_cache = {}
    global_parser_cache = {}
    for theme in themes.keys():
        # print(themes[theme])
        # TODO(Marco, Lilith): is the global iterative handover really necessary/happening?
        # token_set = TokenSetResolver(themes[theme], global_tokens=global_tokens_cache)
        # token_set.parsers = global_parser_cache
        token_set = TokenSetResolver(themes[theme], {})
        timing = timeit("token_set.resolve()", globals=locals(), number=1)
        print(f"Theme: {theme} ({len(token_set.tokens)} - {timing:.4f} seconds)")
        sum_tokens += len(token_set.resolved_tokens.keys())
        output_tokens[theme] = token_set.resolved_tokens
        global_tokens_cache.update(token_set.resolved_tokens)
        global_parser_cache.update(token_set.parsers)
        # pprint.pprint(token_set.resolved_tokens)
    print(f"Total tokens: {sum_tokens}")

    return output_tokens


if __name__ == "__main__":
    # Example usage
    path = "../../Downloads/big_set"
    token_sets = load_token_sets(path)
    themes = load_themes(token_sets)
    result = timeit(
        "process_themes(themes)",
        globals=globals(),
        number=1,
    )
    print(f"Execution time: {result:.4f} seconds")

```
</file_contents>
