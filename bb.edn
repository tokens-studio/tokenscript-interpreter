{:tasks
 {:requires [[babashka.fs :as fs]
             [clojure.string :as str]]
  fmt
  {:doc "Formats the repo (optionally supply files as args)"
   :task
   (let [files (if (seq *command-line-args*)
                 (str/join " " *command-line-args*)
                 ".")]
     (shell (str "steam-run npm run format " files)))}
  fix
  {:doc "Fixes interpreter (optionally supply files as args)"
   :task
   (let [files (if (seq *command-line-args*)
                 (str/join " " *command-line-args*)
                 ".")]
     (shell (str "steam-run npx biome check --write --unsafe --diagnostic-level=error " files))
     (shell (str "steam-run npx biome format --write " files))
     (shell (str "steam-run npm run lint:fix -- --skip=suspicious " files)))}
  fix:web
  {:doc "Fixes web (optionally supply files as args)"
   :task
   (let [opts {:dir "examples/web-repl"}
         files (if (seq *command-line-args*)
                 (->> *command-line-args*
                      (filter (fn [p] (fs/starts-with? p (:dir opts))))
                      (map (fn [p] (str (fs/relativize (:dir opts) p))))
                      (str/join " "))
                 ".")]
     (when (seq files)
       (prn "Processing" files)
       (shell opts (str "steam-run npx biome check --write --unsafe --diagnostic-level=error " files))
       (shell opts (str "steam-run npx biome format --write " files))
       (shell opts (str "steam-run npm run lint:fix -- --skip=suspicious " files))))}
  fix:all
  {:doc "Fixes all source code"
   :task
   (do
      (shell "bb fix")
      (shell "bb fix:web"))}
  dev:web
  {:doc "Fixes web"
   :task
   (shell {:dir "./examples/web-repl"} "npm run dev:watch")}
  nrepl
  {:doc "Start nrepl server"
   :task
   (shell "bun run --bun nbb nrepl-server")}
  precommit
  {:doc "Precommit hook"
   :task
   (let [changed-files (-> (shell {:out :string} "git diff --cached --name-only --diff-filter=ACMR")
                           :out
                           (str/trim)
                           (str/split-lines))
         changed-files (remove (fn [p] (contains? #{"edn"} (fs/extension p))) changed-files)
         changed-files (str/join "\n" changed-files)]
     (if (seq changed-files)
       (do
         (try
           (shell {:continue true} (str "bb fix:web " changed-files))
           (shell {:continue true} (str "bb fix " changed-files))
           (catch Exception _))
         (System/exit 0))
       (println "No staged files to check")))}}}
