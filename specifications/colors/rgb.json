{
  "$type": "https://schemas.tokens.studio/tokens/foundations/types/color.json",
  "$id": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json",
  "name": "RGB",
  "description": "RGB color",
  "schema": {
    "type": "object",
    "properties": {
      "r": {
        "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#r",
        "type": "number",
        "minimum": 0,
        "maximum": 255
      },
      "g": {
        "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#g",
        "type": "number",
        "minimum": 0,
        "maximum": 255
      },
      "b": {
        "$ref": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json#b",
        "type": "number",
        "minimum": 0,
        "maximum": 255
      }
    },
    "required": ["r", "g", "b"],
    "additionalProperties": false
  },
  "initializers": [
    {
      "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-initializer-function.json",
      "title": "function",
      "keyword": "rgb",
      "description": "Creates a RGB color from r, g, b values",
      "script": {
        "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
        "script": "variable r: Number = {input}.get(0); variable g: Number = {input}.get(1); variable b: Number = {input}.get(2); return r, g, b;"
      }
    }
  ],
  "conversions": [
    {
      "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-conversion.json",
      "source": "https://schemas.tokens.studio/tokens/foundations/types/hex.json",
      "target": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json",
      "description": "Converts HEX to RGB",
      "lossless": true,
      "script": {
        "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
        "script": "variable color_parts: List = {input}.split('#'); variable color: List = color_parts.get(1).split(); variable length: Number = color.length(); variable rgb: List = 0, 0, 0; if(length == 3) [ rgb.update(0, parse_int(color.get(0).concat(color.get(0)), 16)); rgb.update(1, parse_int(color.get(1).concat(color.get(1)), 16)); rgb.update(2, parse_int(color.get(2).concat(color.get(2)), 16)); ] else [ rgb.update(0, parse_int(color.get(0).concat(color.get(1)), 16)); rgb.update(1, parse_int(color.get(2).concat(color.get(3)), 16)); rgb.update(2, parse_int(color.get(4).concat(color.get(5)), 16)); ]; return rgb.get(0), rgb.get(1), rgb.get(2);"
      }
    },
    {
      "$type": "https://schemas.tokens.studio/tokens/foundations/types/color-conversion.json",
      "source": "https://schemas.tokens.studio/tokens/foundations/types/rgb.json",
      "target": "https://schemas.tokens.studio/tokens/foundations/types/hex.json",
      "description": "Converts RGB to HEX",
      "lossless": true,
      "script": {
        "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
        "script": "return '#'.concat({value}.r.to_string()).concat({value}.g.to_string()).concat({value}.b.to_string());"
      }
    }
  ],
  "stringify": {
    "type": "https://schemas.tokens.studio/tokens/foundations/tokens-script.json",
    "script": "return 'rgb('.concat({value}.r.to_string()).concat(', ').concat({value}.g.to_string()).concat(', ').concat({value}.b.to_string()).concat(')')"
  }
}
